/*
 * photoresistor_driver.c
 *
 *  Created on: Jun 2, 2024
 *      Author: cadre
 */

void enable_photoresistor(PhotoresistorTypeDef* photo)
{
	HAL_ADC_Stop(photo->adc1);
	HAL_ADC_Stop(photo->adc2);
	HAL_ADC_Stop(photo->adc3);
	HAL_ADC_Stop(photo->adc4);
}

void disable_photoresistor(PhotoresistorTypeDef* photo)
{
	HAL_ADC_Stop(photo->adc1);
	HAL_ADC_Stop(photo->adc2);
	HAL_ADC_Stop(photo->adc3);
	HAL_ADC_Stop(photo->adc4);
}

uint32_t get_adc_value(PhotoresistorTypeDef* photo, uint8_t num)
{
	// Will return values between 0-4095 (0V to 3.3V)
	if (num == 1){
		ADC_HandleTypeDef* adc = photo->adc1;
	}
	else if (num == 2){
		ADC_HandleTypeDef* adc = photo->adc2;
	}
	else if (num == 3){
		ADC_HandleTypeDef* adc = photo->adc3;
	}
	else if (num == 4){
		ADC_HandleTypeDef* adc = photo->adc4;
	}

	HAL_ADC_Start(adc);
	HAL_ADC_PollForConversion(adc,HAL_MAX_DELAY);
	uint32_t adc_val = HAL_ADC_GetValue(adc);
	HAL_ADC_Stop(adc);
	return adc_val;
}

uint32_t get_adc_diff(PhotoresistorTypeDef* photo, uint8_t num1, uint8_t num2)
{
	// NOTE: may need to record time difference between taking the first and
	// 		 second adc values in case they are significantly spaced out.
	//		 But this should only be around a few useconds. If it were longer,
	//		 look into DMA usage.
	uint32_t adc_val1 = get_adc_value(photo, num1);
	uint32_t adc_val2 = get_adc_value(photo,num2);
	uint32_t diff = adc_val1-adc_val2;
	return diff;
}
