/*!
 *  @file task1.c
 *  @brief Runs the states associated with task 1 as described in its FSM.
 *
 *  Created on: Jun 9, 2024
 */

#include <task2.h>

void main_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if(task->state == 0){
		state0_task2(task, intertask_vars);
	}
	else if(task->state == 1){
		state1_task2(task, intertask_vars);
	}
	else if(task->state == 2){
		state2_task2(task, intertask_vars);
	}
	else if(task->state == 3){
		state2_task2(task, intertask_vars);
	}
}

void state0_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	// Initializing the motor
	enable_mot(task->mot,1);
	set_PWM_percent(task->mot, 1, 0);

	// Initializng the servo
	enable_servo(task->servo);

	// Initializing the photoresistors

	// Initializing the encoder
	enable_enc(task->enc);
	set_zero(task->enc);

	// Initializing the IMU gyroscope
	bno055_init(task->gyro);
	HAL_Delay(100);
	bno055_set_unit(task->gyro, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
	task->state = 1;

	// Initializing the controller
	reset_controller(task->con);
}

void state1_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (intertask_vars->rc_trigger_flag){
		task->state = 2;
	}
}

void state2_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
	else{
		if (task->init_controller){
			// Sets up the controller the first time for angle-motor control
			reset_controller(task->con);
			set_gains(task->con, 0.1, 0, 0);
			set_target(task->con, 355);
			task->init_controller = 0;
		}
		else{
			// Setting the servo position to vertical
			servo_set_position(task->servo, 0);

			// Setting the motor position using the angle-motor controller
			// Read the gyroscope angle (yaw euler angle)
			bno055_euler(task->gyro, task->euler);
			float pitch_angle = task->euler->yaw;

			// Returning the controller output
			float output = get_output(task->con, pitch_angle);

			// Setting the motor PWM off of the controller output
			set_PWM(task->mot, 1, output);

			// Checking if the motor is at the right position
			// Checks if the angle is within a 5 degree range from the target angle
			if (abs(pitch_angle - 355) < 5){
				uint32_t curr_time = HAL_GetTick();
				// Checks if the angle has been within the tolerance for 100 ms
				if (!task->within_range){
					task->end_time = curr_time + 100;
					task->within_range = 1;
				}
				else if (curr_time > task->end_time && task->within_range){
					task->within_range = 0;
					set_PWM(task->mot, 1, 0);
					reset_controller(task->con);
					task->init_controller = 1;
					task->state = 3;
				}
			}
			else{
				task->within_range = 0;
			}

			// NOTE: this may block the code a little since polling takes time. Hopefully not much because it only polls one ADC, but another task dedicated for the photoresistors could be used.
			// Recording high values of light and their angles
			uint32_t curr_light = get_photo_value(task->photo, 1); // NOTE: Use the photoresistor on the top when vertical?
			if (curr_light > task->high_light){
				task->high_light = curr_light;
				task->high_angle = pitch_angle;
			}
		}
	}
}

void state3_task1(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
	else{
		if (task->init_controller){
			// Sets up the controller the first time for angle-motor control
			reset_controller(task->con);
			set_gains(task->con, 0.1, 0, 0);
			set_target(task->con, task->high_angle);
			task->init_controller = 0;
		}
		else{
			// Setting the motor position using the angle-motor controller
			// Read the gyroscope angle (yaw euler angle)
			bno055_euler(task->gyro, task->euler);
			float pitch_angle = task->euler->yaw;

			// Returning the controller output
			float output = get_output(task->con, pitch_angle);

			// Setting the motor PWM off of the controller output
			set_PWM(task->mot, 1, output);

			// Checking if the motor is at the right position
			// Checks if the angle is within a 10 degree range from the target angle
			if (abs(pitch_angle - 355) < 5){
				set_PWM(task->mot, 1, 0);
				reset_controller(task->con);
				task->init_controller = 1;
				task->state = 4;
			}
		}
	}
}

void state4_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
	else{
		if (task->init_controller){
			// Sets up the controller the first time for photoresistor-motor control (ADC voltage difference)
			reset_controller(task->con);
			set_gains(task->con, 0.1, 0, 0);
			set_target(task->con, 0);
			task->init_controller = 0;
		}
		else{
			// Setting the motor position using the photoresistor-motor controller // EDIT: WATCH OUT FOR DIRECTION
			// Read the horizontal ADC voltage difference (photoresistors 1 and 2) EDIT: Test and debug which ones are best
			float voltage_dif = get_photo_diff(task->photo, 1, 2);

			// Returning the controller output
			float output = get_output(task->con, voltage_dif);

			// Setting the motor PWM off of the controller output
			set_PWM(task->mot, 1, output);

			// Checking if the motor is at the right position
			// Checks if the angle is within a 50 ADC voltage difference
			if (abs(pitch_angle) < 50){
				uint32_t curr_time = HAL_GetTick();
				// Checks if the angle has been within the tolerance for 100 ms
				if (!task->within_range){
					task->end_time = curr_time + 100;
					task->within_range = 1;
				}
				else if (curr_time > task->end_time && task->within_range){
					task->within_range = 0;
					set_PWM(task->mot, 1, 0);
					reset_controller(task->con);
					task->init_controller = 1;
					task->state = 5;
				}
			}
			else{
				task->within_range = 0;
			}
		}
	}
}

void state5_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
	else{
		if (task->init_controller){
			// Sets up the controller the first time for photoresistor-motor control (ADC voltage difference)
			reset_controller(task->con);
			set_gains(task->con, 0.01, 0, 0);
			set_target(task->con, 0);
			task->init_controller = 0;
		}
		else{
			// Setting the servo position using the photoresistor-servo controller
			// Read the vertical ADC voltage difference (photoresistors 1 and 3) EDIT: Test and debug which ones are best
			float voltage_dif = get_photo_diff(task->photo, 1, 3);

			// Returning the controller output
			float output = get_output(task->con, voltage_dif);

			// Setting the servo position off of the controller output (current position + output)
			float servo_current_position = servo_get_position(task->servo);
			servo_set_position(task->servo, servo_current_position+output);

			// Checking if the motor is at the right position
			// Checks if the angle is within a 50 ADC voltage difference
			if (abs(pitch_angle) < 50){
				uint32_t curr_time = HAL_GetTick();
				// Checks if the angle has been within the tolerance for 100 ms
				if (!task->within_range){
					task->end_time = curr_time + 100;
					task->within_range = 1;
				}
				else if (curr_time > task->end_time && task->within_range){
					task->within_range = 0;
					reset_controller(task->con);
					task->init_controller = 1;
					task->state = 5;
				}
			}
			else{
				task->within_range = 0;
			}
		}
	}
}

void state6_task1(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
}

void state7_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
}

void state8_task1(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
}

void state9_task1(TASK2* task, INTERTASK_VARS* intertask_vars)
{
	if (!intertask_vars->rc_trigger_flag){
		task->state = 8;
	}
}




