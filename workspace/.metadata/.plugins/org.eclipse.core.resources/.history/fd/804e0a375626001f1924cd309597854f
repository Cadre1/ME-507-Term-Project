/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "motor_driver.h"
#include "servo_driver.h"
#include "radio_reciever_driver.h"
#include "photoresistor_driver.h"
#include "encoder_driver.h"
#include "bno055.h"
#include "bno_config.h"
#include "vector.h"
#include "task1.h"
#include "task2.h"
#include "interstate_vars.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
TIM_HandleTypeDef htim_cb;
volatile float gyro_angle_x = 0;
volatile float gyro_angle_y = 0;
volatile float gyro_angle_z = 0;

// Interrupt Flags
uint8_t rad_edge_flag = 0;
uint8_t adc_conversion_flag = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM5_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
int32_t pulse_to_PWM(RadioReciever_DriverTypeDef* rad);
VectorTypeDef get_reflect_angle(VectorTypeDef* light_source_angle, VectorTypeDef* target_position, VectorTypeDef* heliostat_position);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM5_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

  // Driver Initializations

  // Initializing the motor driver structure and enabling the motor
  volatile int32_t duty_percent;
  volatile int32_t duty_count;
  const int32_t pulse = 4799;
  Motor_DriverTypeDef mot = { .tim_handle = &htim2,
  	  	 	  	  	  	  	  .tim_channel1 = TIM_CHANNEL_1,
							  .tim_channel2 = TIM_CHANNEL_2,
  	  	 	  	  	  	  	  .tim_channel3 = TIM_CHANNEL_3,	// Unused
							  .tim_channel4 = TIM_CHANNEL_4,	// Unused
							  .pulse = pulse				 };
  enable_mot(&mot,1);
  // Initially setting the PWM to 0 in case they had been previously been set
  set_PWM_percent(&mot, 1, 0);


  // Initializing the servo motor driver structure and enabling the servo
  float servo_current_position;
  uint32_t CCR;
  float servo_angle;
  servo_object servo = { .pwmHandle = &htim5,
		  	  	  	  	 .timer_ch = TIM_CHANNEL_4,
						 .current_CCR = 0,
						 .timer_ARR = 1919999       };

  enable_servo(&servo);


  // Initializing the Radio Receiver structure and enabling the channel for inputs
  RadioReciever_DriverTypeDef rad = { .tim_handle = &htim1,
	  	  	  	  	  	  	     	   .tim_channel1 = TIM_CHANNEL_1,
									   .tim_channel2 = TIM_CHANNEL_2,
									   .IC_Rise = 0,
									   .IC_Fall = 0,
									   .IC_Diff = 0,
									   .pulse_width = 0,
									   .tol = 0.1,
									   .pulse_recieve_flag = 0,
									   .rise_flag = 0					};
  enable_rad(&rad);


  // Initializing the Photoresistors' structure
  uint32_t photo1, photo2, photo3, photo4;
  uint32_t photo_buff[4];

  Photoresistor_DriverTypeDef photo = { .adc_handle = &hadc1,
		  	  	  	  	  	  	  	  	.adc_channel1 = ADC_CHANNEL_4,
										.adc_channel2 = ADC_CHANNEL_5,
		  	  	  	  	  	  	  	  	.adc_channel1 = ADC_CHANNEL_6,
										.adc_channel2 = ADC_CHANNEL_7,
  	  	  	  	  	  	  	  	  	    .photo_results = photo_buff   };


  // Initializing the Encoder structure
  // NOTE: The purchased Encoder for this project has one non-functional output, meaning it can only read one direction and not as a quadrature
  int32_t count;
  Encoder_DriverTypeDef enc = { .tim_handle = &htim4,
		  	  	  	  	  	    .tim_channel1 = TIM_CHANNEL_1,
								.tim_channel2 = TIM_CHANNEL_2,
								.curr_count = 0,
								.prev_count = 0,
								.tot_count = 0,
								.pos = 0,
								.AR = 65535					   };
  enable_enc(&enc);
  set_zero(&enc);


  // UART Communication
  volatile uint32_t prev_time;
  volatile uint32_t curr_time;
  volatile char my_message[200];


  // Initializing Gyroscope I2C structure
  // Source: https://github.com/d-mironov/Bosch-BNO055-STM32/blob/main/examples/simple/Src/main.c
  bno055_euler_t euler = {0, 0, 0};
  error_bno err;
  volatile float gyro_angle_x = 0;
  volatile float gyro_angle_y = 0;
  volatile float gyro_angle_z = 0;

  bno055_t bno = (bno055_t){
      .i2c = &hi2c1,
      .addr = 0x28,
	  .mode = BNO_MODE_IMU };

  HAL_Delay(1000);

  if ((err = bno055_init(&bno)) == BNO_OK) {
	  sprintf(my_message,"[+] BNO055 init success\r\n");
	  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
      HAL_Delay(100);
  } else {
	  sprintf(my_message,"[!] BNO055 init failed: %s \r\n", bno055_err_str(err));
	  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
      Error_Handler();
  }

  HAL_Delay(100);
  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
                        BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
  if (err != BNO_OK) {
	  sprintf(my_message,"[BNO] Failed to set units. Err: %d\r\n", err);
	  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
  } else {
	  sprintf(my_message,"[BNO] Unit selection success\r\n");
	  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
  }

  /*
  HAL_StatusTypeDef ret;
  uint8_t Buffer[25] = {0};
  uint8_t Space[] = " - ";
  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
  uint8_t EndMSG[] = "Done! \r\n\r\n";

  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
  for(uint16_t i=1; i<128; i++)
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
      if (ret != HAL_OK)
      {
          HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
      }
      else if(ret == HAL_OK)
      {
          sprintf(Buffer, "0x%X", i);
          HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
      }
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
  */

  // Task Initializations

  INTERSTATE_VARS interstate_vars = { .rc_trigger_flag = 0 };

  TASK1 task1 = { .state = 0,
  	  	  	  	  .interstate_vars = &interstate_vars,
				  .mot = &mot,
				  .rad = &rad,
				  .photo = &photo,
				  .enc = &enc,
  	  	  	  	  .gyro = &bno	  							};

  TASK2 task2 = { .state = 0,
  	  	  	  	  .interstate_vars = &interstate_vars,
				  .mot = &mot,
				  .rad = &rad,
				  .photo = &photo,
				  .enc = &enc,
  	  	  	  	  .gyro = &bno	  							};

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  prev_time = HAL_GetTick();
  while (1)
  {
	  // FSM
	  main_task1(&task1, &interstate_vars);
	  main_task2(&task2, &interstate_vars);

	  // Testing Motor
	  int32_t duty_count = pulse_to_PWM(&rad);
	  set_PWM(&mot, 1, duty_count);

	  // Testing Servo
	  servo_set_position(&servo, servo_angle);
	  CCR = servo.current_CCR;
	  servo_current_position = servo_get_position(&servo);

	  // Testing Radio Receiver
	  if (rad_edge_flag){
		  read_pulse(&rad, &htim_cb);
		  rad_edge_flag = 0;
	  }

	  // Testing Photoresistor ADC values

	  uint32_t photo1 = get_photo_value(&photo, 1);
	  uint32_t photo2 = get_photo_value(&photo, 2);
	  uint32_t photo3 = get_photo_value(&photo, 3);
	  uint32_t photo4 = get_photo_value(&photo, 4);

	  // Testing Encoder Outputs
	  count = read_count(&enc);

	  // Testing I2C Gyroscope
	  bno055_euler(&bno, &euler);
	  gyro_angle_x = euler.yaw;
	  gyro_angle_y = euler.pitch;
	  gyro_angle_z = euler.roll;

	  //Printing out values through UART at set times
	  curr_time = HAL_GetTick();
	  if (curr_time - prev_time >= 1000){
		  uint32_t dt = (curr_time-prev_time);
		  /*
		  // Testing I2C Gyroscope
		  //uint8_t test_res[1];
		  //ret = HAL_I2C_Mem_Read(&hi2c1, (I2C_ADDR << 1), PWR_MGMT_REG, I2C_MEMADD_SIZE_8BIT, test_res, 1, HAL_MAX_DELAY);

		  ret = HAL_I2C_Mem_Read(&hi2c1, (I2C_ADDR << 1), GYRO_REG, 1, gyro_results, 6, HAL_MAX_DELAY);
		  if (ret == HAL_BUSY){
			  sprintf(my_message,"I2C IS BUSY \r\n", (char*)I2C_msg_buff);
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  }
		  else if (ret != HAL_OK){
			  sprintf(my_message,"I2C ERROR: %s \r\n", (char*)I2C_msg_buff);
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  }
		  else{
			  gyro_results_x = ((int16_t) gyro_results[0] << 8 | gyro_results[1]);
			  gyro_results_y = ((int16_t) gyro_results[2] << 8 | gyro_results[3]);
			  gyro_results_z = ((int16_t) gyro_results[4] << 8 | gyro_results[5]);
			  if (abs(gyro_results_x) > drift_tol){
				  gyro_angle_x += ((float)gyro_results_x)*((float)dt/1000);
			  }
			  if (abs(gyro_results_y) > drift_tol){
				  gyro_angle_y += ((float)gyro_results_y)*((float)dt/1000);
			  }
			  if (abs(gyro_results_z) > drift_tol){
				  gyro_angle_z += ((float)gyro_results_z)*((float)dt/1000);
			  }
		  }
		  */

		  sprintf(my_message,"Photoresistor 1 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo1*3.3/4095), photo1);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  sprintf(my_message,"Photoresistor 2 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo2*3.3/4095), photo2);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  sprintf(my_message,"Photoresistor 3 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo3*3.3/4095), photo3);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  sprintf(my_message,"Photoresistor 4 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo4*3.3/4095), photo4);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);

		  sprintf(my_message,"Encoder position is: %ld.\r\n", count);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);

		  sprintf(my_message,"Gyro X is: %d.\r\n", (int32_t)gyro_angle_x);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  sprintf(my_message,"Gyro Y is: %d.\r\n", (int32_t)gyro_angle_y);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
		  sprintf(my_message,"Gyro Z is: %d.\r\n", (int32_t)gyro_angle_z);
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);

		  sprintf(my_message,"\r\n");
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 10);

		  prev_time = curr_time;
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 95;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4799;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1919999;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

int32_t pulse_to_PWM(RadioReciever_DriverTypeDef* rad)
{
	  // Getting radio pulse and setting motor
	  int32_t pulse = 4799;
	  uint32_t pulse_rad = get_pulse(rad);
	  if (abs(pulse_rad) < 10){
		  pulse_rad = 1509;
	  }
	  int32_t duty_percent = (int32_t)((pulse_rad-1509)*100)/513;
	  int32_t duty_count = (int32_t)((pulse_rad-1509)*pulse)/513;
	  if (duty_percent > 100 || duty_count > 4799){
		  duty_percent = 100;
		  duty_count = 4799;
	  }
	  else if (duty_percent < -100 || duty_count < -4799){
		  duty_percent = -100;
		  duty_count = -4799;
	  }
	  return duty_count;
}

VectorTypeDef get_reflect_angle(VectorTypeDef* light_source_angle, VectorTypeDef* target_position, VectorTypeDef* heliostat_position)
{
    // Generating a unit vector from the light source angles
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
                                         .y = sin(light_source_angle->z)*sin(light_source_angle->x),
                                         .z = cos(light_source_angle->x)                                   };
    // Generating a unit vector from the target-to-heliostat positions
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
                                .y = (target_position->y)-(heliostat_position->y),
                                .z = (target_position->z)-(heliostat_position->z) };
    float target_vector_mag = get_mag(&target_dif);
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
                                   .y = target_dif.y/target_vector_mag,
                                   .z = target_dif.z/target_vector_mag };

    // Calculating the normal vector of the mirror to reflect the light source to the target
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
                                        .y = light_source_vector.y+target_vector.y,
                                        .z = light_source_vector.z+target_vector.z };
    float reflect_vector_dir_mag = get_mag(&reflect_vector_dir);
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
                                    .y = reflect_vector_dir.y/reflect_vector_dir_mag,
                                    .z = reflect_vector_dir.z/reflect_vector_dir_mag };

    // Calculating the pitch and yaw angles to produce the mirror normal vector
    float theta = acos(reflect_vector.z);
    float phi1 = acos(reflect_vector.x/sin(theta));
    float phi2 = asin(reflect_vector.y/sin(theta));

    // Generating an angle vector to store phi and theta (phi1 and phi2, with no rounding error, should be the same)
    VectorTypeDef reflect_angle = {.x = theta,
                                   .y = phi1,
                                   .z = phi2  };

    return reflect_angle;
}

// Callback Functions

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	rad_edge_flag = 1;
	htim_cb = *htim;

}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
