/*!
 * @file controller.h
 * @brief Sets up the general use PID controller structure
 *
 *  Created on: May 30, 2024
 *  @author Christopher Ng
 */

#ifndef INC_CONTROLLER_H_
#define INC_CONTROLLER_H_

#include <stdio.h>
#include <stdint.h>

/*!
 *  @struct 	controller
 *	@typedef 	ControllerTypeDef
 *  @brief 		A structure to contain the variables of TASK2 typedefs
 *	@param 		state: The task's current state
 *	@param 		*mot: The initialized motor driver structure to operate panning motion
 *	@param 		*servo: The initialized servo driver structure to operate pitching motion
 *	@param 		*rad: The initialized radio receiver driver structure to receive radio outputs
 *	@param		*photo: The initialized photoresistor driver structure to read brightness values
 *	@param 		*enc: The initialized encoder driver structure to read motor position
 *	@param 		*gyro: The initialized IMU gyroscope structure to read the mirror's normal vector angles
 *
 *	@param		*con: A general use controller
 *	@param		init_controller: A flag used to initially set controller values
 *	@param		*euler: Gyroscope Euler angles (yaw, pitch, roll)
 *	@param		within_range: A flag used to check if the controlled output has entered within a tolerance of the desired output
 *	@param 		end_time: An end time to be within the range until
 *	@param		high_light: A record of the brightest spot during state 2
 *	@param		high_angle: A record of the angle associated with the brightest spot during state 2
 *	@param		reflect_angle: A vector of the angles for the normal vector of the mirror to reflect light to the target
 *	@param		output: The output of the controller
 *	@param		*voltage_dif_list: A list of 3 voltage differences between photoresistors to be averaged
 *	@param		voltage_dif_count: A counter of 3 for the voltage_dif_list
 *	@param 		voltage_dif_avg: The average of the 3 voltage differences
 */
struct{
	float des_val;
	float kp;
	float kd;
	float ki;
	float int_err;
	float prev_err;
	uint32_t prev_time;
	uint8_t first_time;
} typedef ControllerTypeDef;

void reset_controller(ControllerTypeDef* con);
void set_gains(ControllerTypeDef* con, float kp, float kd, float ki);
void set_target(ControllerTypeDef* con, float des_val);
float get_output(ControllerTypeDef* con, float curr_val);

#endif /* INC_CONTROLLER_H_ */
