/*!
 *  @file task2.h
 *  @brief Sets up the task2 structure.
 *
 *  Created on: Jun 9, 2024
 */

#ifndef INC_TASK2_H_
#define INC_TASK2_H_

#include <stdio.h>
#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "motor_driver.h"
#include "servo_driver.h"
#include "radio_reciever_driver.h"
#include "photoresistor_driver.h"
#include "encoder_driver.h"
#include "bno055.h"
#include "bno_config.h"
#include "intertask_vars.h"
#include "vector.h"

/*!
 *  @struct 	TASK2
 *	@typedef 	TASK2
 *  @brief 		A structure to contain the variables of TASK2 typedefs
 *	@param 		state: The task's current state
 *	@param 		*mot: The initialized motor driver structure to operate panning motion
 *	@param 		*servo: The initialized servo driver structure to operate pitching motion
 *	@param 		*rad: The initialized radio receiver driver structure to receive radio outputs
 *	@param 		*enc: The initialized encoder driver structure to read motor position
 *	@param 		*gyro: The initialized IMU gyroscope structure to read the mirror's normal vector angles
 */
struct{
	uint8_t state;
	Motor_DriverTypeDef* mot;
	Servo_DriverTypeDef* servo;
	RadioReciever_DriverTypeDef* rad;
	Photoresistor_DriverTypeDef* photo;
	Encoder_DriverTypeDef* enc;
	bno055_t* gyro;
} typedef TASK2;

/*!
 *  @brief 		Runs the designated state for task 2
 *	@param 		*task: The task's current state
 *	@param 		*intertask_vars: The intertask variables used by other tasks
 */
void main_task2(TASK2* task, INTERTASK_VARS* intertask_vars);

/*!
 * 	@fn			state0_task2: Init Power
 *  @brief 		Initializes the IMU gyroscope I2C communication, photoresistor ADCs, motor PWM output, servo PWM output, and encoder channels
 *	@param 		*task: The task's current state
 *	@param 		*intertask_vars: The intertask variables used by other tasks
 */
void state0_task2(TASK2* task, INTERTASK_VARS* intertask_vars);

/*!
 * 	@fn			state1_task2: Wait For Start
 *  @brief 		Waits until the radio receiver receives a valid output to start through the radio receiver flag
 *	@param 		*task: The task's current state
 *	@param 		*intertask_vars: The intertask variables used by other tasks
 */
void state1_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state2_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state3_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state4_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state5_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state6_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state7_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state8_task2(TASK2* task, INTERTASK_VARS* intertask_vars);
void state9_task2(TASK2* task, INTERTASK_VARS* intertask_vars);

#endif /* INC_TASK2_H_ */
