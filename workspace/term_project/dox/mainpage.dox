/*! \mainpage
 *
 * This document will provide a description of the overall organization and function of the software used for the Automated Heliostat.
 * 
 * Program operations, file descriptions, and hardware can be found here:
 * - \subpage finiteStateMachinePage "Finite State Machines"
 *
 * - \subpage closedLoopControlPage "Closed Loop Control Systems"
 *
 * - \subpage fileDescriptionPage "File Descriptions"
 *
 * - \subpage hardwareInformationPage "Hardware Information"
 *
 * - \subpage electronicInformationPage "Electronics Information"
 *
 * \image html heliostatAssembly.jpg "Final Heliostat Design"
 * 
 * - [Demo Test](https://www.youtube.com/watch?v=41eYMNxH7vk)
 *
 */ 

/*! \page finiteStateMachinePage Finite State Machines
 *
 * The main.c program provided in this documentation contains two tasks, Radio Receiving and Main Control, that follow the two finite state machines as seen below. 
 * 
 * The Radio Receiving task is used to start the Main Control program and is also used as a deadman's switch for an E-stop. 
 * The states are as follows:
 * - S0 Init: Initializes the required pins and flags used for the radio receiver.
 * - S1 Off: Waits for an input from the radio receiver and determines if the trigger is greater than 50% pressed down to start the Main Control program.
 * - S2 On: Waits for another input from the radio receiver and determines if the trigger is less than 50% pressed down to stop the Main Control Program.
 *
 * The Main Control task manages the turning, light source detecting, and retargeting of the heliostat and is constantly checking the Radio Receiving task flag for changes in trigger outputs.
 * The states are as follows:
 * - S0 Init Power: Initializes the required pins, timers, I2C channels, ADCs, drivers, controller variables, and miscellaneous setting variables for the panning motor, encoder, photoresistors, IMU, and servo.
 * - S1 Wait For Start: Waits until the radio receiver receives a valid output to start.
 * - S2 Setup 1: Sets the position of the servo to 60 degrees from vertical and makes one full revolution using gyroscope-motor position control and records initial high voltage values and angles to get a general position of the light source.
 * - S3 Setup 2: Sets the initial motor position to one of the high light source positions using gyroscope-motor position control.
 * - S4 Pan	To Bright Spot: Determines where the brightest spot is using horizontal photoresistors voltage difference for photoresistor-motor position control.
 * - S5 Pitch To Bright Spot: Determines where the brightest spot is using vertical photoresistors voltage difference for photoresistor-servo position control.
 * - S6 Collect Angle: Stops and calculates the Euler angles of the bright spot using the bright spot angle and location of the reflection target.
 * - S7 Go To Reflection Angles: Pans to the reflection angle using gyroscope-motor position control and setting the servo angle.
 * - S8 Stop: Stops the operation when the radio receiver has an invalid input.
 * - S9 Return: Pans and pitches back to the home angle using gyroscope-motor position control.
 * 
 *  \image html task1FSM.png "Radio Receiving Task"
 *  \image html task2FSM.png "Main Control Task"
 *
 */

/*! \page closedLoopControlPage Closed Loop Control Systems
 * The various control loops can be found here.
 * 
 * \image html IMUMotorControlLoop.png "Gyroscope-Motor Control"
 *
 * \image html photoresistorMotorControlLoop.png "Photoresistor-Motor Control"
 *
 * \image html photoresistorServoControlLoop.png "Photoresistor-Servo Control"
 */

/*! \page fileDescriptionPage File Descriptions
 *
 * Brief file descriptions:
 * - \ref "main.c": The main program to be ran on the STM32 Microcontroller. Manages the multitasking of the two tasks as described 
 * in the \ref finiteStateMachinePage section and contains a debugging mode for manual control.
 * - \ref "task1.c": The structure containing the methods and variables for task 1 as described in the \ref finiteStateMachinePage section.
 * - \ref "task2.c": The structure containing the methods and variables for task 2 as described in the \ref finiteStateMachinePage section.
 * - \ref "controller.c": The structure containing the methods and variables for closed-loop control as described in the \ref closedLoopControlPage section.
 * - \ref "motor_driver.c": A driver for the brushed DC motor.
 * - \ref "servo_driver.c": A driver for the servo motor.
 * - \ref "bno055.c": A driver for the 9 DOF IMU generated by Daniel Mironow at https://github.com/d-mironov/Bosch-BNO055-STM32.
 * - \ref "encoder_driver.c": A driver for the integrated encoder of the brushed DC motor.
 * - \ref "photoresistor_driver.c": A driver for the four photoresistors.
 * - \ref "radio_reciever_driver.c": A driver for the radio receiver
 * - \ref "vector.h": A supporting structure to handle vector notation.
 * - \ref "intertask_vars.h": A supporting structure to handle intertask variables.
 *
 */

/*! \page hardwareInformationPage Hardware Information
 *
 * Relevant Hardware Information:
 * - Brushed DC Motor with Integrated Encoder: https://www.amazon.com/Encoder-Metal-Gearmotor-Arduino-Printers/dp/B07GNGGCVP/ref=cm_cr_arp_d_bdcrb_top?ie=UTF8&th=1
 * - Servo Motor: https://www.amazon.com/dp/B0BKPL2Y21?ref_=cm_sw_r_cp_ud_ct_KG6MDE21VATBG22A5V3G&th=1
 * - BNO055 IMU: https://www.bosch-sensortec.com/products/smart-sensor-systems/bno055/
 * - Photoresistors: https://www.digikey.com/en/products/detail/advanced-photonix/NSL-19M51/5039794
 * - Radio Receiver: https://www.amazon.com/DUMBORC-Channels-Receiver-Transmitter-Drifting/dp/B09MVY4W7G
 *
 */

/*! \page electronicInformationPage Electronics Information
 *
 * Main MCU PCB and Layout:
 *
 * \image html mainPCBLayout.png "Main PCB Layout"
 * \image html mainPCBSchematic1.png
 * \image html mainPCBSchematic2.png "Main PCB Schematic"
 *
 * External PCB and Layout:
 *
 * \image html externalPCBLayout.png "External PCB Layout"
 * \image html externalPCBSchematic.png "External PCB Schematic"
 * 
 * Electronic BOM:
 * [BOM](electronicBOM.pdf)
 */