
term_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d510  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800d6b0  0800d6b0  0000e6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbd8  0800dbd8  0000f070  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbd8  0800dbd8  0000ebd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbe0  0800dbe0  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbe0  0800dbe0  0000ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbe4  0800dbe4  0000ebe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800dbe8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000070  0800dc58  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800dc58  0000f42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d6e  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003381  00000000  00000000  00028e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe2  00000000  00000000  0002d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1aa  00000000  00000000  0002e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b2f  00000000  00000000  0004866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee8d  00000000  00000000  0006219b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ebc  00000000  00000000  0010106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00106f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d698 	.word	0x0800d698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800d698 	.word	0x0800d698

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b0af      	sub	sp, #188	@ 0xbc
 8000f8c:	af2a      	add	r7, sp, #168	@ 0xa8
 8000f8e:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	799b      	ldrb	r3, [r3, #6]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000fa0:	687c      	ldr	r4, [r7, #4]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000fa6:	f107 030e 	add.w	r3, r7, #14
 8000faa:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000fac:	2300      	movs	r3, #0
 8000fae:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000fb0:	4668      	mov	r0, sp
 8000fb2:	f104 0310 	add.w	r3, r4, #16
 8000fb6:	229c      	movs	r2, #156	@ 0x9c
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f009 fac9 	bl	800a550 <memcpy>
 8000fbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fc2:	f001 fbb6 	bl	8002732 <bno055_read_regs>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <bno055_init+0x4c>
        return err;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	e0b6      	b.n	8001142 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000fd8:	d001      	beq.n	8000fde <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	e0b1      	b.n	8001142 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000fde:	2100      	movs	r1, #0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fa74 	bl	80024ce <bno055_set_opmode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <bno055_init+0x6c>
        return err;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	e0a6      	b.n	8001142 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f004 fca7 	bl	8005948 <HAL_Delay>
    bno055_reset(imu);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fb53 	bl	80026a6 <bno055_reset>
    HAL_Delay(5000);
 8001000:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001004:	f004 fca0 	bl	8005948 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f001 faee 	bl	80025ec <bno055_set_pwr_mode>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <bno055_init+0x96>
        return err;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	e091      	b.n	8001142 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f004 fc92 	bl	8005948 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001024:	2100      	movs	r1, #0
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f001 fbe7 	bl	80027fa <bno055_set_page>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <bno055_init+0xb2>
        return err;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	e083      	b.n	8001142 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800103a:	200c      	movs	r0, #12
 800103c:	f004 fc84 	bl	8005948 <HAL_Delay>
    bno055_on(imu);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fb53 	bl	80026ec <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f001 fa3e 	bl	80024ce <bno055_set_opmode>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <bno055_init+0xd8>
        return err;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	e070      	b.n	8001142 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001060:	2018      	movs	r0, #24
 8001062:	f004 fc71 	bl	8005948 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a38      	ldr	r2, [pc, #224]	@ (800114c <bno055_init+0x1c4>)
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a38      	ldr	r2, [pc, #224]	@ (8001150 <bno055_init+0x1c8>)
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <bno055_init+0x1cc>)
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a37      	ldr	r2, [pc, #220]	@ (8001158 <bno055_init+0x1d0>)
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a36      	ldr	r2, [pc, #216]	@ (800115c <bno055_init+0x1d4>)
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a36      	ldr	r2, [pc, #216]	@ (8001160 <bno055_init+0x1d8>)
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a35      	ldr	r2, [pc, #212]	@ (8001164 <bno055_init+0x1dc>)
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a35      	ldr	r2, [pc, #212]	@ (8001168 <bno055_init+0x1e0>)
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a34      	ldr	r2, [pc, #208]	@ (800116c <bno055_init+0x1e4>)
 800109a:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a34      	ldr	r2, [pc, #208]	@ (8001170 <bno055_init+0x1e8>)
 80010a0:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a33      	ldr	r2, [pc, #204]	@ (8001174 <bno055_init+0x1ec>)
 80010a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a33      	ldr	r2, [pc, #204]	@ (8001178 <bno055_init+0x1f0>)
 80010ac:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a32      	ldr	r2, [pc, #200]	@ (800117c <bno055_init+0x1f4>)
 80010b2:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a32      	ldr	r2, [pc, #200]	@ (8001180 <bno055_init+0x1f8>)
 80010b8:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a31      	ldr	r2, [pc, #196]	@ (8001184 <bno055_init+0x1fc>)
 80010be:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <bno055_init+0x200>)
 80010c4:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a30      	ldr	r2, [pc, #192]	@ (800118c <bno055_init+0x204>)
 80010ca:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a30      	ldr	r2, [pc, #192]	@ (8001190 <bno055_init+0x208>)
 80010d0:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <bno055_init+0x20c>)
 80010d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a2f      	ldr	r2, [pc, #188]	@ (8001198 <bno055_init+0x210>)
 80010dc:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a2e      	ldr	r2, [pc, #184]	@ (800119c <bno055_init+0x214>)
 80010e2:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <bno055_init+0x218>)
 80010e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <bno055_init+0x21c>)
 80010f0:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a2c      	ldr	r2, [pc, #176]	@ (80011a8 <bno055_init+0x220>)
 80010f6:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a2c      	ldr	r2, [pc, #176]	@ (80011ac <bno055_init+0x224>)
 80010fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a2b      	ldr	r2, [pc, #172]	@ (80011b0 <bno055_init+0x228>)
 8001104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <bno055_init+0x22c>)
 800110c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <bno055_init+0x230>)
 8001114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <bno055_init+0x234>)
 800111c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <bno055_init+0x238>)
 8001124:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a26      	ldr	r2, [pc, #152]	@ (80011c4 <bno055_init+0x23c>)
 800112c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a25      	ldr	r2, [pc, #148]	@ (80011c8 <bno055_init+0x240>)
 8001134:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a24      	ldr	r2, [pc, #144]	@ (80011cc <bno055_init+0x244>)
 800113c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	080011d1 	.word	0x080011d1
 8001150:	08001239 	.word	0x08001239
 8001154:	080012b9 	.word	0x080012b9
 8001158:	08001339 	.word	0x08001339
 800115c:	080013b9 	.word	0x080013b9
 8001160:	08001485 	.word	0x08001485
 8001164:	08001505 	.word	0x08001505
 8001168:	08001585 	.word	0x08001585
 800116c:	08001605 	.word	0x08001605
 8001170:	080016d1 	.word	0x080016d1
 8001174:	08001751 	.word	0x08001751
 8001178:	080017d1 	.word	0x080017d1
 800117c:	08001851 	.word	0x08001851
 8001180:	0800191d 	.word	0x0800191d
 8001184:	08001989 	.word	0x08001989
 8001188:	080019f5 	.word	0x080019f5
 800118c:	08001a61 	.word	0x08001a61
 8001190:	08001b15 	.word	0x08001b15
 8001194:	08001b99 	.word	0x08001b99
 8001198:	08001c1d 	.word	0x08001c1d
 800119c:	08001ca1 	.word	0x08001ca1
 80011a0:	08001d6d 	.word	0x08001d6d
 80011a4:	08001df1 	.word	0x08001df1
 80011a8:	08001e75 	.word	0x08001e75
 80011ac:	08001ef9 	.word	0x08001ef9
 80011b0:	08001fc5 	.word	0x08001fc5
 80011b4:	08002035 	.word	0x08002035
 80011b8:	080020a5 	.word	0x080020a5
 80011bc:	08002115 	.word	0x08002115
 80011c0:	08002185 	.word	0x08002185
 80011c4:	08002261 	.word	0x08002261
 80011c8:	08002331 	.word	0x08002331
 80011cc:	080023ff 	.word	0x080023ff

080011d0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b0af      	sub	sp, #188	@ 0xbc
 80011d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80011de:	687c      	ldr	r4, [r7, #4]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011e4:	f107 030e 	add.w	r3, r7, #14
 80011e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011ea:	2334      	movs	r3, #52	@ 0x34
 80011ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011ee:	4668      	mov	r0, sp
 80011f0:	f104 0310 	add.w	r3, r4, #16
 80011f4:	229c      	movs	r2, #156	@ 0x9c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f009 f9aa 	bl	800a550 <memcpy>
 80011fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001200:	f001 fa97 	bl	8002732 <bno055_read_regs>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <bno055_temperature+0x42>
        return err;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	e00d      	b.n	800122e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7bdb      	ldrb	r3, [r3, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <bno055_temperature+0x54>
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	b25b      	sxtb	r3, r3
 8001222:	e001      	b.n	8001228 <bno055_temperature+0x58>
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
	...

08001238 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0af      	sub	sp, #188	@ 0xbc
 800123c:	af2a      	add	r7, sp, #168	@ 0xa8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001242:	687c      	ldr	r4, [r7, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800124e:	2308      	movs	r3, #8
 8001250:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	229c      	movs	r2, #156	@ 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	f009 f978 	bl	800a550 <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f001 fa65 	bl	8002732 <bno055_read_regs>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bno055_acc_x+0x3e>
        return err;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	e019      	b.n	80012aa <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <bno055_acc_x+0x62>
 8001294:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012b4 <bno055_acc_x+0x7c>
 8001298:	e001      	b.n	800129e <bno055_acc_x+0x66>
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800129e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012a8:	2300      	movs	r3, #0
};
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	42c80000 	.word	0x42c80000

080012b8 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b0af      	sub	sp, #188	@ 0xbc
 80012bc:	af2a      	add	r7, sp, #168	@ 0xa8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80012c2:	687c      	ldr	r4, [r7, #4]
 80012c4:	2302      	movs	r3, #2
 80012c6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012ce:	230a      	movs	r3, #10
 80012d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012d2:	4668      	mov	r0, sp
 80012d4:	f104 0310 	add.w	r3, r4, #16
 80012d8:	229c      	movs	r2, #156	@ 0x9c
 80012da:	4619      	mov	r1, r3
 80012dc:	f009 f938 	bl	800a550 <memcpy>
 80012e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e4:	f001 fa25 	bl	8002732 <bno055_read_regs>
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <bno055_acc_y+0x3e>
        return err;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	e019      	b.n	800132a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b21b      	sxth	r3, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <bno055_acc_y+0x62>
 8001314:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001334 <bno055_acc_y+0x7c>
 8001318:	e001      	b.n	800131e <bno055_acc_y+0x66>
 800131a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001328:	2300      	movs	r3, #0
};
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	42c80000 	.word	0x42c80000

08001338 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b0af      	sub	sp, #188	@ 0xbc
 800133c:	af2a      	add	r7, sp, #168	@ 0xa8
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001342:	687c      	ldr	r4, [r7, #4]
 8001344:	2302      	movs	r3, #2
 8001346:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800134e:	230c      	movs	r3, #12
 8001350:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001352:	4668      	mov	r0, sp
 8001354:	f104 0310 	add.w	r3, r4, #16
 8001358:	229c      	movs	r2, #156	@ 0x9c
 800135a:	4619      	mov	r1, r3
 800135c:	f009 f8f8 	bl	800a550 <memcpy>
 8001360:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001364:	f001 f9e5 	bl	8002732 <bno055_read_regs>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <bno055_acc_z+0x3e>
        return err;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	e019      	b.n	80013aa <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21b      	sxth	r3, r3
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <bno055_acc_z+0x62>
 8001394:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80013b4 <bno055_acc_z+0x7c>
 8001398:	e001      	b.n	800139e <bno055_acc_z+0x66>
 800139a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800139e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013a8:	2300      	movs	r3, #0
};
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	42c80000 	.word	0x42c80000

080013b8 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b0b1      	sub	sp, #196	@ 0xc4
 80013bc:	af2a      	add	r7, sp, #168	@ 0xa8
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80013c2:	687c      	ldr	r4, [r7, #4]
 80013c4:	2306      	movs	r3, #6
 80013c6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013ce:	2308      	movs	r3, #8
 80013d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013d2:	4668      	mov	r0, sp
 80013d4:	f104 0310 	add.w	r3, r4, #16
 80013d8:	229c      	movs	r2, #156	@ 0x9c
 80013da:	4619      	mov	r1, r3
 80013dc:	f009 f8b8 	bl	800a550 <memcpy>
 80013e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013e4:	f001 f9a5 	bl	8002732 <bno055_read_regs>
 80013e8:	4603      	mov	r3, r0
 80013ea:	75fb      	strb	r3, [r7, #23]
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <bno055_acc+0x3e>
        return err;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	e03f      	b.n	8001476 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <bno055_acc+0x4a>
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <bno055_acc+0xc8>)
 8001400:	e001      	b.n	8001406 <bno055_acc+0x4e>
 8001402:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001406:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001408:	7a7b      	ldrb	r3, [r7, #9]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21a      	sxth	r2, r3
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800141e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	7abb      	ldrb	r3, [r7, #10]
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21b      	sxth	r3, r3
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	ed97 7a04 	vldr	s14, [r7, #16]
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001450:	7b7b      	ldrb	r3, [r7, #13]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21a      	sxth	r2, r3
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21b      	sxth	r3, r3
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001466:	ed97 7a04 	vldr	s14, [r7, #16]
 800146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001474:	2300      	movs	r3, #0
};
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	42c80000 	.word	0x42c80000

08001484 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b0af      	sub	sp, #188	@ 0xbc
 8001488:	af2a      	add	r7, sp, #168	@ 0xa8
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800148e:	687c      	ldr	r4, [r7, #4]
 8001490:	2302      	movs	r3, #2
 8001492:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	9328      	str	r3, [sp, #160]	@ 0xa0
 800149a:	2328      	movs	r3, #40	@ 0x28
 800149c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800149e:	4668      	mov	r0, sp
 80014a0:	f104 0310 	add.w	r3, r4, #16
 80014a4:	229c      	movs	r2, #156	@ 0x9c
 80014a6:	4619      	mov	r1, r3
 80014a8:	f009 f852 	bl	800a550 <memcpy>
 80014ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b0:	f001 f93f 	bl	8002732 <bno055_read_regs>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <bno055_linear_acc_x+0x3e>
        return err;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	e019      	b.n	80014f6 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014c2:	7b7b      	ldrb	r3, [r7, #13]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <bno055_linear_acc_x+0x62>
 80014e0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001500 <bno055_linear_acc_x+0x7c>
 80014e4:	e001      	b.n	80014ea <bno055_linear_acc_x+0x66>
 80014e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014f4:	2300      	movs	r3, #0
};
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	bf00      	nop
 8001500:	42c80000 	.word	0x42c80000

08001504 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b0af      	sub	sp, #188	@ 0xbc
 8001508:	af2a      	add	r7, sp, #168	@ 0xa8
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800150e:	687c      	ldr	r4, [r7, #4]
 8001510:	2302      	movs	r3, #2
 8001512:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	9328      	str	r3, [sp, #160]	@ 0xa0
 800151a:	232a      	movs	r3, #42	@ 0x2a
 800151c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800151e:	4668      	mov	r0, sp
 8001520:	f104 0310 	add.w	r3, r4, #16
 8001524:	229c      	movs	r2, #156	@ 0x9c
 8001526:	4619      	mov	r1, r3
 8001528:	f009 f812 	bl	800a550 <memcpy>
 800152c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001530:	f001 f8ff 	bl	8002732 <bno055_read_regs>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <bno055_linear_acc_y+0x3e>
        return err;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	e019      	b.n	8001576 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	7b3b      	ldrb	r3, [r7, #12]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <bno055_linear_acc_y+0x62>
 8001560:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001580 <bno055_linear_acc_y+0x7c>
 8001564:	e001      	b.n	800156a <bno055_linear_acc_y+0x66>
 8001566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001574:	2300      	movs	r3, #0
};
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	42c80000 	.word	0x42c80000

08001584 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b0af      	sub	sp, #188	@ 0xbc
 8001588:	af2a      	add	r7, sp, #168	@ 0xa8
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800158e:	687c      	ldr	r4, [r7, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	9328      	str	r3, [sp, #160]	@ 0xa0
 800159a:	232c      	movs	r3, #44	@ 0x2c
 800159c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800159e:	4668      	mov	r0, sp
 80015a0:	f104 0310 	add.w	r3, r4, #16
 80015a4:	229c      	movs	r2, #156	@ 0x9c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f008 ffd2 	bl	800a550 <memcpy>
 80015ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b0:	f001 f8bf 	bl	8002732 <bno055_read_regs>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <bno055_linear_acc_z+0x3e>
        return err;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	e019      	b.n	80015f6 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80015c2:	7b7b      	ldrb	r3, [r7, #13]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <bno055_linear_acc_z+0x62>
 80015e0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001600 <bno055_linear_acc_z+0x7c>
 80015e4:	e001      	b.n	80015ea <bno055_linear_acc_z+0x66>
 80015e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015f4:	2300      	movs	r3, #0
};
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	42c80000 	.word	0x42c80000

08001604 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b0b1      	sub	sp, #196	@ 0xc4
 8001608:	af2a      	add	r7, sp, #168	@ 0xa8
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800160e:	687c      	ldr	r4, [r7, #4]
 8001610:	2306      	movs	r3, #6
 8001612:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	9328      	str	r3, [sp, #160]	@ 0xa0
 800161a:	2328      	movs	r3, #40	@ 0x28
 800161c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800161e:	4668      	mov	r0, sp
 8001620:	f104 0310 	add.w	r3, r4, #16
 8001624:	229c      	movs	r2, #156	@ 0x9c
 8001626:	4619      	mov	r1, r3
 8001628:	f008 ff92 	bl	800a550 <memcpy>
 800162c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001630:	f001 f87f 	bl	8002732 <bno055_read_regs>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <bno055_linear_acc+0x3e>
        return err;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	e03f      	b.n	80016c2 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <bno055_linear_acc+0x4a>
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <bno055_linear_acc+0xc8>)
 800164c:	e001      	b.n	8001652 <bno055_linear_acc+0x4e>
 800164e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001652:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21a      	sxth	r2, r3
 800165a:	7a3b      	ldrb	r3, [r7, #8]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800166a:	ed97 7a04 	vldr	s14, [r7, #16]
 800166e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	7abb      	ldrb	r3, [r7, #10]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800169c:	7b7b      	ldrb	r3, [r7, #13]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7b3b      	ldrb	r3, [r7, #12]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80016c0:	2300      	movs	r3, #0
};
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	42c80000 	.word	0x42c80000

080016d0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b0af      	sub	sp, #188	@ 0xbc
 80016d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80016da:	687c      	ldr	r4, [r7, #4]
 80016dc:	2302      	movs	r3, #2
 80016de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80016e6:	2314      	movs	r3, #20
 80016e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80016ea:	4668      	mov	r0, sp
 80016ec:	f104 0310 	add.w	r3, r4, #16
 80016f0:	229c      	movs	r2, #156	@ 0x9c
 80016f2:	4619      	mov	r1, r3
 80016f4:	f008 ff2c 	bl	800a550 <memcpy>
 80016f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016fc:	f001 f819 	bl	8002732 <bno055_read_regs>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <bno055_gyro_x+0x3e>
        return err;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	e019      	b.n	8001742 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <bno055_gyro_x+0x62>
 800172c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001730:	e001      	b.n	8001736 <bno055_gyro_x+0x66>
 8001732:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800174c <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001740:	2300      	movs	r3, #0
};
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	44610000 	.word	0x44610000

08001750 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b0af      	sub	sp, #188	@ 0xbc
 8001754:	af2a      	add	r7, sp, #168	@ 0xa8
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800175a:	687c      	ldr	r4, [r7, #4]
 800175c:	2302      	movs	r3, #2
 800175e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001766:	2316      	movs	r3, #22
 8001768:	9327      	str	r3, [sp, #156]	@ 0x9c
 800176a:	4668      	mov	r0, sp
 800176c:	f104 0310 	add.w	r3, r4, #16
 8001770:	229c      	movs	r2, #156	@ 0x9c
 8001772:	4619      	mov	r1, r3
 8001774:	f008 feec 	bl	800a550 <memcpy>
 8001778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177c:	f000 ffd9 	bl	8002732 <bno055_read_regs>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <bno055_gyro_y+0x3e>
        return err;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	e019      	b.n	80017c2 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7b3b      	ldrb	r3, [r7, #12]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <bno055_gyro_y+0x62>
 80017ac:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80017b0:	e001      	b.n	80017b6 <bno055_gyro_y+0x66>
 80017b2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80017cc <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017c0:	2300      	movs	r3, #0
};
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	44610000 	.word	0x44610000

080017d0 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b0af      	sub	sp, #188	@ 0xbc
 80017d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80017da:	687c      	ldr	r4, [r7, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80017e6:	2318      	movs	r3, #24
 80017e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80017ea:	4668      	mov	r0, sp
 80017ec:	f104 0310 	add.w	r3, r4, #16
 80017f0:	229c      	movs	r2, #156	@ 0x9c
 80017f2:	4619      	mov	r1, r3
 80017f4:	f008 feac 	bl	800a550 <memcpy>
 80017f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017fc:	f000 ff99 	bl	8002732 <bno055_read_regs>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <bno055_gyro_z+0x3e>
        return err;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	e019      	b.n	8001842 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21b      	sxth	r3, r3
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <bno055_gyro_z+0x62>
 800182c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001830:	e001      	b.n	8001836 <bno055_gyro_z+0x66>
 8001832:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800184c <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001840:	2300      	movs	r3, #0
};
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	44610000 	.word	0x44610000

08001850 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b0b1      	sub	sp, #196	@ 0xc4
 8001854:	af2a      	add	r7, sp, #168	@ 0xa8
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800185a:	687c      	ldr	r4, [r7, #4]
 800185c:	2306      	movs	r3, #6
 800185e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001866:	2314      	movs	r3, #20
 8001868:	9327      	str	r3, [sp, #156]	@ 0x9c
 800186a:	4668      	mov	r0, sp
 800186c:	f104 0310 	add.w	r3, r4, #16
 8001870:	229c      	movs	r2, #156	@ 0x9c
 8001872:	4619      	mov	r1, r3
 8001874:	f008 fe6c 	bl	800a550 <memcpy>
 8001878:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800187c:	f000 ff59 	bl	8002732 <bno055_read_regs>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <bno055_gyro+0x3e>
        return err;
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	e03f      	b.n	800190e <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <bno055_gyro+0x4c>
 8001896:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800189a:	e000      	b.n	800189e <bno055_gyro+0x4e>
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800189e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80018a0:	7a7b      	ldrb	r3, [r7, #9]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	7a3b      	ldrb	r3, [r7, #8]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80018ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	7abb      	ldrb	r3, [r7, #10]
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018da:	ed97 7a04 	vldr	s14, [r7, #16]
 80018de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80018e8:	7b7b      	ldrb	r3, [r7, #13]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	7b3b      	ldrb	r3, [r7, #12]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	bf00      	nop
 8001918:	44610000 	.word	0x44610000

0800191c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b0af      	sub	sp, #188	@ 0xbc
 8001920:	af2a      	add	r7, sp, #168	@ 0xa8
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001926:	687c      	ldr	r4, [r7, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001932:	230e      	movs	r3, #14
 8001934:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001936:	4668      	mov	r0, sp
 8001938:	f104 0310 	add.w	r3, r4, #16
 800193c:	229c      	movs	r2, #156	@ 0x9c
 800193e:	4619      	mov	r1, r3
 8001940:	f008 fe06 	bl	800a550 <memcpy>
 8001944:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001948:	f000 fef3 	bl	8002732 <bno055_read_regs>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <bno055_mag_x+0x3e>
        return err;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	e012      	b.n	8001980 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800195a:	7b7b      	ldrb	r3, [r7, #13]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	7b3b      	ldrb	r3, [r7, #12]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21b      	sxth	r3, r3
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001970:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b0af      	sub	sp, #188	@ 0xbc
 800198c:	af2a      	add	r7, sp, #168	@ 0xa8
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001992:	687c      	ldr	r4, [r7, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800199e:	2310      	movs	r3, #16
 80019a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80019a2:	4668      	mov	r0, sp
 80019a4:	f104 0310 	add.w	r3, r4, #16
 80019a8:	229c      	movs	r2, #156	@ 0x9c
 80019aa:	4619      	mov	r1, r3
 80019ac:	f008 fdd0 	bl	800a550 <memcpy>
 80019b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b4:	f000 febd 	bl	8002732 <bno055_read_regs>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <bno055_mag_y+0x3e>
        return err;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	e012      	b.n	80019ec <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019c6:	7b7b      	ldrb	r3, [r7, #13]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}

080019f4 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b0af      	sub	sp, #188	@ 0xbc
 80019f8:	af2a      	add	r7, sp, #168	@ 0xa8
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80019fe:	687c      	ldr	r4, [r7, #4]
 8001a00:	2302      	movs	r3, #2
 8001a02:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a0e:	4668      	mov	r0, sp
 8001a10:	f104 0310 	add.w	r3, r4, #16
 8001a14:	229c      	movs	r2, #156	@ 0x9c
 8001a16:	4619      	mov	r1, r3
 8001a18:	f008 fd9a 	bl	800a550 <memcpy>
 8001a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a20:	f000 fe87 	bl	8002732 <bno055_read_regs>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <bno055_mag_z+0x3e>
        return err;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	e012      	b.n	8001a58 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}

08001a60 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b0af      	sub	sp, #188	@ 0xbc
 8001a64:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001a6a:	687c      	ldr	r4, [r7, #4]
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a76:	230e      	movs	r3, #14
 8001a78:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a7a:	4668      	mov	r0, sp
 8001a7c:	f104 0310 	add.w	r3, r4, #16
 8001a80:	229c      	movs	r2, #156	@ 0x9c
 8001a82:	4619      	mov	r1, r3
 8001a84:	f008 fd64 	bl	800a550 <memcpy>
 8001a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a8c:	f000 fe51 	bl	8002732 <bno055_read_regs>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <bno055_mag+0x3e>
        return err;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	e036      	b.n	8001b0c <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a9e:	7a7b      	ldrb	r3, [r7, #9]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	7a3b      	ldrb	r3, [r7, #8]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	7abb      	ldrb	r3, [r7, #10]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001b0a:	2300      	movs	r3, #0
};
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b0b1      	sub	sp, #196	@ 0xc4
 8001b18:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b1e:	687c      	ldr	r4, [r7, #4]
 8001b20:	2302      	movs	r3, #2
 8001b22:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b2a:	232e      	movs	r3, #46	@ 0x2e
 8001b2c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b2e:	4668      	mov	r0, sp
 8001b30:	f104 0310 	add.w	r3, r4, #16
 8001b34:	229c      	movs	r2, #156	@ 0x9c
 8001b36:	4619      	mov	r1, r3
 8001b38:	f008 fd0a 	bl	800a550 <memcpy>
 8001b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b40:	f000 fdf7 	bl	8002732 <bno055_read_regs>
 8001b44:	4603      	mov	r3, r0
 8001b46:	75fb      	strb	r3, [r7, #23]
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <bno055_gravity_x+0x3e>
        return err;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	e01b      	b.n	8001b8a <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <bno055_gravity_x+0x4a>
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <bno055_gravity_x+0x80>)
 8001b5c:	e001      	b.n	8001b62 <bno055_gravity_x+0x4e>
 8001b5e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b62:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	42c80000 	.word	0x42c80000

08001b98 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b0b1      	sub	sp, #196	@ 0xc4
 8001b9c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001ba2:	687c      	ldr	r4, [r7, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bae:	2330      	movs	r3, #48	@ 0x30
 8001bb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bb2:	4668      	mov	r0, sp
 8001bb4:	f104 0310 	add.w	r3, r4, #16
 8001bb8:	229c      	movs	r2, #156	@ 0x9c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f008 fcc8 	bl	800a550 <memcpy>
 8001bc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bc4:	f000 fdb5 	bl	8002732 <bno055_read_regs>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	75fb      	strb	r3, [r7, #23]
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <bno055_gravity_y+0x3e>
        return err;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	e01b      	b.n	8001c0e <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <bno055_gravity_y+0x4a>
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <bno055_gravity_y+0x80>)
 8001be0:	e001      	b.n	8001be6 <bno055_gravity_y+0x4e>
 8001be2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001be6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bfe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd90      	pop	{r4, r7, pc}
 8001c16:	bf00      	nop
 8001c18:	42c80000 	.word	0x42c80000

08001c1c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b0b1      	sub	sp, #196	@ 0xc4
 8001c20:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c26:	687c      	ldr	r4, [r7, #4]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001c32:	2332      	movs	r3, #50	@ 0x32
 8001c34:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001c36:	4668      	mov	r0, sp
 8001c38:	f104 0310 	add.w	r3, r4, #16
 8001c3c:	229c      	movs	r2, #156	@ 0x9c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f008 fc86 	bl	800a550 <memcpy>
 8001c44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c48:	f000 fd73 	bl	8002732 <bno055_read_regs>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <bno055_gravity_z+0x3e>
        return err;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	e01b      	b.n	8001c92 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <bno055_gravity_z+0x4a>
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <bno055_gravity_z+0x80>)
 8001c64:	e001      	b.n	8001c6a <bno055_gravity_z+0x4e>
 8001c66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c6a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c6c:	7b7b      	ldrb	r3, [r7, #13]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c82:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	42c80000 	.word	0x42c80000

08001ca0 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b0b1      	sub	sp, #196	@ 0xc4
 8001ca4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001caa:	687c      	ldr	r4, [r7, #4]
 8001cac:	2306      	movs	r3, #6
 8001cae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001cb6:	232e      	movs	r3, #46	@ 0x2e
 8001cb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001cba:	4668      	mov	r0, sp
 8001cbc:	f104 0310 	add.w	r3, r4, #16
 8001cc0:	229c      	movs	r2, #156	@ 0x9c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f008 fc44 	bl	800a550 <memcpy>
 8001cc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ccc:	f000 fd31 	bl	8002732 <bno055_read_regs>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	75fb      	strb	r3, [r7, #23]
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <bno055_gravity+0x3e>
        return err;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	e03f      	b.n	8001d5e <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <bno055_gravity+0x4a>
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <bno055_gravity+0xc8>)
 8001ce8:	e001      	b.n	8001cee <bno055_gravity+0x4e>
 8001cea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cee:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001cf0:	7a7b      	ldrb	r3, [r7, #9]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001d38:	7b7b      	ldrb	r3, [r7, #13]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	7b3b      	ldrb	r3, [r7, #12]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	42c80000 	.word	0x42c80000

08001d6c <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b0b1      	sub	sp, #196	@ 0xc4
 8001d70:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001d76:	687c      	ldr	r4, [r7, #4]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d82:	231a      	movs	r3, #26
 8001d84:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d86:	4668      	mov	r0, sp
 8001d88:	f104 0310 	add.w	r3, r4, #16
 8001d8c:	229c      	movs	r2, #156	@ 0x9c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f008 fbde 	bl	800a550 <memcpy>
 8001d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d98:	f000 fccb 	bl	8002732 <bno055_read_regs>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	75fb      	strb	r3, [r7, #23]
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	e01b      	b.n	8001de2 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <bno055_euler_yaw+0x4c>
 8001db2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001db6:	e000      	b.n	8001dba <bno055_euler_yaw+0x4e>
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dba:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001dbc:	7b7b      	ldrb	r3, [r7, #13]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	7b3b      	ldrb	r3, [r7, #12]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	44610000 	.word	0x44610000

08001df0 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b0b1      	sub	sp, #196	@ 0xc4
 8001df4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001dfa:	687c      	ldr	r4, [r7, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e06:	231c      	movs	r3, #28
 8001e08:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e0a:	4668      	mov	r0, sp
 8001e0c:	f104 0310 	add.w	r3, r4, #16
 8001e10:	229c      	movs	r2, #156	@ 0x9c
 8001e12:	4619      	mov	r1, r3
 8001e14:	f008 fb9c 	bl	800a550 <memcpy>
 8001e18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e1c:	f000 fc89 	bl	8002732 <bno055_read_regs>
 8001e20:	4603      	mov	r3, r0
 8001e22:	75fb      	strb	r3, [r7, #23]
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <bno055_euler_roll+0x3e>
        return err;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	e01b      	b.n	8001e66 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <bno055_euler_roll+0x4c>
 8001e36:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e3a:	e000      	b.n	8001e3e <bno055_euler_roll+0x4e>
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e3e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e40:	7b7b      	ldrb	r3, [r7, #13]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	7b3b      	ldrb	r3, [r7, #12]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	44610000 	.word	0x44610000

08001e74 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b0b1      	sub	sp, #196	@ 0xc4
 8001e78:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001e7e:	687c      	ldr	r4, [r7, #4]
 8001e80:	2302      	movs	r3, #2
 8001e82:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e8a:	231e      	movs	r3, #30
 8001e8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e8e:	4668      	mov	r0, sp
 8001e90:	f104 0310 	add.w	r3, r4, #16
 8001e94:	229c      	movs	r2, #156	@ 0x9c
 8001e96:	4619      	mov	r1, r3
 8001e98:	f008 fb5a 	bl	800a550 <memcpy>
 8001e9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea0:	f000 fc47 	bl	8002732 <bno055_read_regs>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	75fb      	strb	r3, [r7, #23]
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <bno055_euler_pitch+0x3e>
        return err;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	e01b      	b.n	8001eea <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <bno055_euler_pitch+0x4c>
 8001eba:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001ebe:	e000      	b.n	8001ec2 <bno055_euler_pitch+0x4e>
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001ec2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	44610000 	.word	0x44610000

08001ef8 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b0b1      	sub	sp, #196	@ 0xc4
 8001efc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001f02:	687c      	ldr	r4, [r7, #4]
 8001f04:	2306      	movs	r3, #6
 8001f06:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f0e:	231a      	movs	r3, #26
 8001f10:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f12:	4668      	mov	r0, sp
 8001f14:	f104 0310 	add.w	r3, r4, #16
 8001f18:	229c      	movs	r2, #156	@ 0x9c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f008 fb18 	bl	800a550 <memcpy>
 8001f20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f24:	f000 fc05 	bl	8002732 <bno055_read_regs>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	e03f      	b.n	8001fb6 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <bno055_euler+0x4c>
 8001f3e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001f42:	e000      	b.n	8001f46 <bno055_euler+0x4e>
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f46:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001f48:	7a7b      	ldrb	r3, [r7, #9]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	7a3b      	ldrb	r3, [r7, #8]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	7abb      	ldrb	r3, [r7, #10]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001f90:	7b7b      	ldrb	r3, [r7, #13]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	7b3b      	ldrb	r3, [r7, #12]
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fa6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	44610000 	.word	0x44610000

08001fc4 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0af      	sub	sp, #188	@ 0xbc
 8001fc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001fce:	687c      	ldr	r4, [r7, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fda:	2320      	movs	r3, #32
 8001fdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fde:	4668      	mov	r0, sp
 8001fe0:	f104 0310 	add.w	r3, r4, #16
 8001fe4:	229c      	movs	r2, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f008 fab2 	bl	800a550 <memcpy>
 8001fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff0:	f000 fb9f 	bl	8002732 <bno055_read_regs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bno055_quaternion_w+0x3e>
        return err;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e012      	b.n	8002028 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002030 <bno055_quaternion_w+0x6c>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	46800000 	.word	0x46800000

08002034 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0af      	sub	sp, #188	@ 0xbc
 8002038:	af2a      	add	r7, sp, #168	@ 0xa8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	9328      	str	r3, [sp, #160]	@ 0xa0
 800204a:	2322      	movs	r3, #34	@ 0x22
 800204c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800204e:	4668      	mov	r0, sp
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	229c      	movs	r2, #156	@ 0x9c
 8002056:	4619      	mov	r1, r3
 8002058:	f008 fa7a 	bl	800a550 <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f000 fb67 	bl	8002732 <bno055_read_regs>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <bno055_quaternion_x+0x3e>
        return err;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	e012      	b.n	8002098 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80020a0 <bno055_quaternion_x+0x6c>
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	46800000 	.word	0x46800000

080020a4 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b0af      	sub	sp, #188	@ 0xbc
 80020a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80020ae:	687c      	ldr	r4, [r7, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020ba:	2324      	movs	r3, #36	@ 0x24
 80020bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020be:	4668      	mov	r0, sp
 80020c0:	f104 0310 	add.w	r3, r4, #16
 80020c4:	229c      	movs	r2, #156	@ 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f008 fa42 	bl	800a550 <memcpy>
 80020cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f000 fb2f 	bl	8002732 <bno055_read_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <bno055_quaternion_y+0x3e>
        return err;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	e012      	b.n	8002108 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002110 <bno055_quaternion_y+0x6c>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	46800000 	.word	0x46800000

08002114 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b0af      	sub	sp, #188	@ 0xbc
 8002118:	af2a      	add	r7, sp, #168	@ 0xa8
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800211e:	687c      	ldr	r4, [r7, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	9328      	str	r3, [sp, #160]	@ 0xa0
 800212a:	2326      	movs	r3, #38	@ 0x26
 800212c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800212e:	4668      	mov	r0, sp
 8002130:	f104 0310 	add.w	r3, r4, #16
 8002134:	229c      	movs	r2, #156	@ 0x9c
 8002136:	4619      	mov	r1, r3
 8002138:	f008 fa0a 	bl	800a550 <memcpy>
 800213c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002140:	f000 faf7 	bl	8002732 <bno055_read_regs>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <bno055_quaternion_z+0x3e>
        return err;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	e012      	b.n	8002178 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b21a      	sxth	r2, r3
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21b      	sxth	r3, r3
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002180 <bno055_quaternion_z+0x6c>
 800216c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	46800000 	.word	0x46800000

08002184 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b0b1      	sub	sp, #196	@ 0xc4
 8002188:	af2a      	add	r7, sp, #168	@ 0xa8
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 800218e:	687c      	ldr	r4, [r7, #4]
 8002190:	2308      	movs	r3, #8
 8002192:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	9328      	str	r3, [sp, #160]	@ 0xa0
 800219a:	2320      	movs	r3, #32
 800219c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800219e:	4668      	mov	r0, sp
 80021a0:	f104 0310 	add.w	r3, r4, #16
 80021a4:	229c      	movs	r2, #156	@ 0x9c
 80021a6:	4619      	mov	r1, r3
 80021a8:	f008 f9d2 	bl	800a550 <memcpy>
 80021ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f000 fabf 	bl	8002732 <bno055_read_regs>
 80021b4:	4603      	mov	r3, r0
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <bno055_quaternion+0x3e>
        return err;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	e048      	b.n	8002254 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80021c2:	7b7b      	ldrb	r3, [r7, #13]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	7b3b      	ldrb	r3, [r7, #12]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800225c <bno055_quaternion+0xd8>
 80021dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800225c <bno055_quaternion+0xd8>
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800220a:	7c7b      	ldrb	r3, [r7, #17]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	7c3b      	ldrb	r3, [r7, #16]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002220:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800225c <bno055_quaternion+0xd8>
 8002224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	7cbb      	ldrb	r3, [r7, #18]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21b      	sxth	r3, r3
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002244:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800225c <bno055_quaternion+0xd8>
 8002248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	46800000 	.word	0x46800000

08002260 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b0af      	sub	sp, #188	@ 0xbc
 8002264:	af2a      	add	r7, sp, #168	@ 0xa8
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	70fb      	strb	r3, [r7, #3]
 8002272:	460b      	mov	r3, r1
 8002274:	70bb      	strb	r3, [r7, #2]
 8002276:	4613      	mov	r3, r2
 8002278:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800227a:	2101      	movs	r1, #1
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fabc 	bl	80027fa <bno055_set_page>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <bno055_acc_conf+0x30>
        return err;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	e04b      	b.n	8002328 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f91b 	bl	80024ce <bno055_set_opmode>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <bno055_acc_conf+0x46>
        return err;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	e040      	b.n	8002328 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80022a6:	200c      	movs	r0, #12
 80022a8:	f003 fb4e 	bl	8005948 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	78bb      	ldrb	r3, [r7, #2]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80022bc:	687c      	ldr	r4, [r7, #4]
 80022be:	2301      	movs	r3, #1
 80022c0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022c2:	f107 030e 	add.w	r3, r7, #14
 80022c6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022c8:	2308      	movs	r3, #8
 80022ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022cc:	4668      	mov	r0, sp
 80022ce:	f104 0310 	add.w	r3, r4, #16
 80022d2:	229c      	movs	r2, #156	@ 0x9c
 80022d4:	4619      	mov	r1, r3
 80022d6:	f008 f93b 	bl	800a550 <memcpy>
 80022da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022de:	f000 fa5e 	bl	800279e <bno055_write_regs>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <bno055_acc_conf+0x90>
        return err;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	e01b      	b.n	8002328 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8e9 	bl	80024ce <bno055_set_opmode>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <bno055_acc_conf+0xaa>
        return err;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	e00e      	b.n	8002328 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800230a:	2018      	movs	r0, #24
 800230c:	f003 fb1c 	bl	8005948 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa71 	bl	80027fa <bno055_set_page>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <bno055_acc_conf+0xc6>
        return err;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	e000      	b.n	8002328 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}

08002330 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b0af      	sub	sp, #188	@ 0xbc
 8002334:	af2a      	add	r7, sp, #168	@ 0xa8
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	70fb      	strb	r3, [r7, #3]
 8002342:	460b      	mov	r3, r1
 8002344:	70bb      	strb	r3, [r7, #2]
 8002346:	4613      	mov	r3, r2
 8002348:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800234a:	2101      	movs	r1, #1
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa54 	bl	80027fa <bno055_set_page>
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <bno055_gyr_conf+0x30>
        return err;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	e04a      	b.n	80023f6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002360:	2100      	movs	r1, #0
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8b3 	bl	80024ce <bno055_set_opmode>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <bno055_gyr_conf+0x46>
        return err;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	e03f      	b.n	80023f6 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002376:	200c      	movs	r0, #12
 8002378:	f003 fae6 	bl	8005948 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	78bb      	ldrb	r3, [r7, #2]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	733b      	strb	r3, [r7, #12]
 8002386:	787b      	ldrb	r3, [r7, #1]
 8002388:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800238a:	687c      	ldr	r4, [r7, #4]
 800238c:	2302      	movs	r3, #2
 800238e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002396:	230a      	movs	r3, #10
 8002398:	9327      	str	r3, [sp, #156]	@ 0x9c
 800239a:	4668      	mov	r0, sp
 800239c:	f104 0310 	add.w	r3, r4, #16
 80023a0:	229c      	movs	r2, #156	@ 0x9c
 80023a2:	4619      	mov	r1, r3
 80023a4:	f008 f8d4 	bl	800a550 <memcpy>
 80023a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023ac:	f000 f9f7 	bl	800279e <bno055_write_regs>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	e01b      	b.n	80023f6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f882 	bl	80024ce <bno055_set_opmode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <bno055_gyr_conf+0xa8>
        return err;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	e00e      	b.n	80023f6 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023d8:	2018      	movs	r0, #24
 80023da:	f003 fab5 	bl	8005948 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023de:	2100      	movs	r1, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fa0a 	bl	80027fa <bno055_set_page>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <bno055_gyr_conf+0xc4>
        return err;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	e000      	b.n	80023f6 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}

080023fe <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80023fe:	b590      	push	{r4, r7, lr}
 8002400:	b0af      	sub	sp, #188	@ 0xbc
 8002402:	af2a      	add	r7, sp, #168	@ 0xa8
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4603      	mov	r3, r0
 800240e:	70fb      	strb	r3, [r7, #3]
 8002410:	460b      	mov	r3, r1
 8002412:	70bb      	strb	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002418:	2101      	movs	r1, #1
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f9ed 	bl	80027fa <bno055_set_page>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <bno055_mag_conf+0x30>
        return err;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	e04b      	b.n	80024c6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800242e:	2100      	movs	r1, #0
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f84c 	bl	80024ce <bno055_set_opmode>
 8002436:	4603      	mov	r3, r0
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <bno055_mag_conf+0x46>
        return err;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	e040      	b.n	80024c6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002444:	200c      	movs	r0, #12
 8002446:	f003 fa7f 	bl	8005948 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	78bb      	ldrb	r3, [r7, #2]
 800244e:	4313      	orrs	r3, r2
 8002450:	b2da      	uxtb	r2, r3
 8002452:	787b      	ldrb	r3, [r7, #1]
 8002454:	4313      	orrs	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800245a:	687c      	ldr	r4, [r7, #4]
 800245c:	2301      	movs	r3, #1
 800245e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002460:	f107 030e 	add.w	r3, r7, #14
 8002464:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002466:	2309      	movs	r3, #9
 8002468:	9327      	str	r3, [sp, #156]	@ 0x9c
 800246a:	4668      	mov	r0, sp
 800246c:	f104 0310 	add.w	r3, r4, #16
 8002470:	229c      	movs	r2, #156	@ 0x9c
 8002472:	4619      	mov	r1, r3
 8002474:	f008 f86c 	bl	800a550 <memcpy>
 8002478:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800247c:	f000 f98f 	bl	800279e <bno055_write_regs>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <bno055_mag_conf+0x90>
        return err;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	e01b      	b.n	80024c6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f81a 	bl	80024ce <bno055_set_opmode>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <bno055_mag_conf+0xaa>
        return err;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	e00e      	b.n	80024c6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80024a8:	2018      	movs	r0, #24
 80024aa:	f003 fa4d 	bl	8005948 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80024ae:	2100      	movs	r1, #0
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f9a2 	bl	80027fa <bno055_set_page>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <bno055_mag_conf+0xc6>
        return err;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	e000      	b.n	80024c6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}

080024ce <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80024ce:	b590      	push	{r4, r7, lr}
 80024d0:	b0af      	sub	sp, #188	@ 0xbc
 80024d2:	af2a      	add	r7, sp, #168	@ 0xa8
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80024da:	687c      	ldr	r4, [r7, #4]
 80024dc:	2301      	movs	r3, #1
 80024de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024e0:	1cfb      	adds	r3, r7, #3
 80024e2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024e4:	233d      	movs	r3, #61	@ 0x3d
 80024e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024e8:	4668      	mov	r0, sp
 80024ea:	f104 0310 	add.w	r3, r4, #16
 80024ee:	229c      	movs	r2, #156	@ 0x9c
 80024f0:	4619      	mov	r1, r3
 80024f2:	f008 f82d 	bl	800a550 <memcpy>
 80024f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024fa:	f000 f950 	bl	800279e <bno055_write_regs>
 80024fe:	4603      	mov	r3, r0
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	e003      	b.n	8002514 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800250c:	2018      	movs	r0, #24
 800250e:	f003 fa1b 	bl	8005948 <HAL_Delay>
    return BNO_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b0af      	sub	sp, #188	@ 0xbc
 8002520:	af2a      	add	r7, sp, #168	@ 0xa8
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	70fb      	strb	r3, [r7, #3]
 800252e:	460b      	mov	r3, r1
 8002530:	70bb      	strb	r3, [r7, #2]
 8002532:	4613      	mov	r3, r2
 8002534:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ffc8 	bl	80024ce <bno055_set_opmode>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <bno055_set_unit+0x30>
        return err;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	e04b      	b.n	80025e4 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800254c:	2100      	movs	r1, #0
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f953 	bl	80027fa <bno055_set_page>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <bno055_set_unit+0x46>
        return err;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	e040      	b.n	80025e4 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	78bb      	ldrb	r3, [r7, #2]
 8002566:	4313      	orrs	r3, r2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	787b      	ldrb	r3, [r7, #1]
 800256c:	4313      	orrs	r3, r2
 800256e:	b2da      	uxtb	r2, r3
 8002570:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002574:	4313      	orrs	r3, r2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800257a:	687c      	ldr	r4, [r7, #4]
 800257c:	2301      	movs	r3, #1
 800257e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002580:	f107 030e 	add.w	r3, r7, #14
 8002584:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002586:	233b      	movs	r3, #59	@ 0x3b
 8002588:	9327      	str	r3, [sp, #156]	@ 0x9c
 800258a:	4668      	mov	r0, sp
 800258c:	f104 0310 	add.w	r3, r4, #16
 8002590:	229c      	movs	r2, #156	@ 0x9c
 8002592:	4619      	mov	r1, r3
 8002594:	f007 ffdc 	bl	800a550 <memcpy>
 8002598:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800259c:	f000 f8ff 	bl	800279e <bno055_write_regs>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <bno055_set_unit+0x92>
        return err;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	e01a      	b.n	80025e4 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	78ba      	ldrb	r2, [r7, #2]
 80025b2:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	787a      	ldrb	r2, [r7, #1]
 80025b8:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025c0:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff7d 	bl	80024ce <bno055_set_opmode>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <bno055_set_unit+0xc6>
        return err;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	e000      	b.n	80025e4 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}

080025ec <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b0af      	sub	sp, #188	@ 0xbc
 80025f0:	af2a      	add	r7, sp, #168	@ 0xa8
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 80025fe:	2304      	movs	r3, #4
 8002600:	e04d      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff62 	bl	80024ce <bno055_set_opmode>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <bno055_set_pwr_mode+0x2c>
        return err;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	e042      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002618:	2100      	movs	r1, #0
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8ed 	bl	80027fa <bno055_set_page>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <bno055_set_pwr_mode+0x42>
        return err;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	e037      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800262e:	687c      	ldr	r4, [r7, #4]
 8002630:	2301      	movs	r3, #1
 8002632:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002634:	1cfb      	adds	r3, r7, #3
 8002636:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002638:	233e      	movs	r3, #62	@ 0x3e
 800263a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800263c:	4668      	mov	r0, sp
 800263e:	f104 0310 	add.w	r3, r4, #16
 8002642:	229c      	movs	r2, #156	@ 0x9c
 8002644:	4619      	mov	r1, r3
 8002646:	f007 ff83 	bl	800a550 <memcpy>
 800264a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800264e:	f000 f8a6 	bl	800279e <bno055_write_regs>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	e01e      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002666:	2100      	movs	r1, #0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f8c6 	bl	80027fa <bno055_set_page>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <bno055_set_pwr_mode+0x90>
        return err;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	e010      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	791b      	ldrb	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff23 	bl	80024ce <bno055_set_opmode>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <bno055_set_pwr_mode+0xaa>
        return err;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	e003      	b.n	800269e <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8002696:	2002      	movs	r0, #2
 8002698:	f003 f956 	bl	8005948 <HAL_Delay>
    return BNO_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}

080026a6 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80026a6:	b590      	push	{r4, r7, lr}
 80026a8:	b0af      	sub	sp, #188	@ 0xbc
 80026aa:	af2a      	add	r7, sp, #168	@ 0xa8
 80026ac:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026b2:	687c      	ldr	r4, [r7, #4]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80026b8:	f107 030f 	add.w	r3, r7, #15
 80026bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80026be:	233f      	movs	r3, #63	@ 0x3f
 80026c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80026c2:	4668      	mov	r0, sp
 80026c4:	f104 0310 	add.w	r3, r4, #16
 80026c8:	229c      	movs	r2, #156	@ 0x9c
 80026ca:	4619      	mov	r1, r3
 80026cc:	f007 ff40 	bl	800a550 <memcpy>
 80026d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026d4:	f000 f863 	bl	800279e <bno055_write_regs>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <bno055_reset+0x3e>
    }
    return BNO_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b0af      	sub	sp, #188	@ 0xbc
 80026f0:	af2a      	add	r7, sp, #168	@ 0xa8
 80026f2:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026f8:	687c      	ldr	r4, [r7, #4]
 80026fa:	2301      	movs	r3, #1
 80026fc:	9329      	str	r3, [sp, #164]	@ 0xa4
 80026fe:	f107 030f 	add.w	r3, r7, #15
 8002702:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002704:	233f      	movs	r3, #63	@ 0x3f
 8002706:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002708:	4668      	mov	r0, sp
 800270a:	f104 0310 	add.w	r3, r4, #16
 800270e:	229c      	movs	r2, #156	@ 0x9c
 8002710:	4619      	mov	r1, r3
 8002712:	f007 ff1d 	bl	800a550 <memcpy>
 8002716:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800271a:	f000 f840 	bl	800279e <bno055_write_regs>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <bno055_on+0x3e>
    }
    return BNO_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}

08002732 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002732:	b084      	sub	sp, #16
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af02      	add	r7, sp, #8
 800273a:	f107 0c10 	add.w	ip, r7, #16
 800273e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	7dbb      	ldrb	r3, [r7, #22]
 8002746:	4619      	mov	r1, r3
 8002748:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2301      	movs	r3, #1
 8002754:	f004 f8e8 	bl	8006928 <HAL_I2C_Master_Transmit>
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002762:	2301      	movs	r3, #1
 8002764:	e014      	b.n	8002790 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002766:	6938      	ldr	r0, [r7, #16]
 8002768:	7dbb      	ldrb	r3, [r7, #22]
 800276a:	4619      	mov	r1, r3
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002770:	b29b      	uxth	r3, r3
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	9200      	str	r2, [sp, #0]
 8002778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800277c:	f004 f9d2 	bl	8006b24 <HAL_I2C_Master_Receive>
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800279a:	b004      	add	sp, #16
 800279c:	4770      	bx	lr

0800279e <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 800279e:	b084      	sub	sp, #16
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af04      	add	r7, sp, #16
 80027a6:	f107 0418 	add.w	r4, r7, #24
 80027aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80027ae:	69b8      	ldr	r0, [r7, #24]
 80027b0:	7fbb      	ldrb	r3, [r7, #30]
 80027b2:	461d      	mov	r5, r3
 80027b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027be:	b299      	uxth	r1, r3
 80027c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f04f 34ff 	mov.w	r4, #4294967295
 80027ca:	9402      	str	r4, [sp, #8]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	460b      	mov	r3, r1
 80027d6:	4629      	mov	r1, r5
 80027d8:	f004 fbd6 	bl	8006f88 <HAL_I2C_Mem_Write>
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80027f6:	b004      	add	sp, #16
 80027f8:	4770      	bx	lr

080027fa <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80027fa:	b590      	push	{r4, r7, lr}
 80027fc:	b0af      	sub	sp, #188	@ 0xbc
 80027fe:	af2a      	add	r7, sp, #168	@ 0xa8
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7b5a      	ldrb	r2, [r3, #13]
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <bno055_set_page+0x1a>
        return BNO_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e024      	b.n	800285e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d901      	bls.n	800281e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800281a:	2302      	movs	r3, #2
 800281c:	e01f      	b.n	800285e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800281e:	687c      	ldr	r4, [r7, #4]
 8002820:	2301      	movs	r3, #1
 8002822:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002824:	1cfb      	adds	r3, r7, #3
 8002826:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002828:	2307      	movs	r3, #7
 800282a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800282c:	4668      	mov	r0, sp
 800282e:	f104 0310 	add.w	r3, r4, #16
 8002832:	229c      	movs	r2, #156	@ 0x9c
 8002834:	4619      	mov	r1, r3
 8002836:	f007 fe8b 	bl	800a550 <memcpy>
 800283a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800283e:	f7ff ffae 	bl	800279e <bno055_write_regs>
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <bno055_set_page+0x56>
        return err;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	e006      	b.n	800285e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002856:	2002      	movs	r0, #2
 8002858:	f003 f876 	bl	8005948 <HAL_Delay>
    return BNO_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
	...

08002868 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d81f      	bhi.n	80028b8 <bno055_err_str+0x50>
 8002878:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <bno055_err_str+0x18>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	0800289d 	.word	0x0800289d
 8002884:	080028a1 	.word	0x080028a1
 8002888:	080028a5 	.word	0x080028a5
 800288c:	080028b1 	.word	0x080028b1
 8002890:	080028a9 	.word	0x080028a9
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028b5 	.word	0x080028b5
        case BNO_OK:
            return "[BNO] Ok!";
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <bno055_err_str+0x60>)
 800289e:	e00c      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <bno055_err_str+0x64>)
 80028a2:	e00a      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <bno055_err_str+0x68>)
 80028a6:	e008      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80028a8:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <bno055_err_str+0x6c>)
 80028aa:	e006      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <bno055_err_str+0x70>)
 80028ae:	e004      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <bno055_err_str+0x74>)
 80028b2:	e002      	b.n	80028ba <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <bno055_err_str+0x78>)
 80028b6:	e000      	b.n	80028ba <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <bno055_err_str+0x60>)
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	0800d6b0 	.word	0x0800d6b0
 80028cc:	0800d6bc 	.word	0x0800d6bc
 80028d0:	0800d6d0 	.word	0x0800d6d0
 80028d4:	0800d6ec 	.word	0x0800d6ec
 80028d8:	0800d710 	.word	0x0800d710
 80028dc:	0800d728 	.word	0x0800d728
 80028e0:	0800d734 	.word	0x0800d734

080028e4 <reset_controller>:
 */

#include "controller.h"

void reset_controller(ControllerTypeDef* con)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	con->kp = 0;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
	con->kd = 0;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
	con->ki = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
	con->des_val = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
	con->first_time = 1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	771a      	strb	r2, [r3, #28]
	con->prev_time = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
	con->int_err = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
	con->prev_err = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <set_gains>:

void set_gains(ControllerTypeDef* con, float kp, float kd, float ki)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002940:	edc7 0a01 	vstr	s1, [r7, #4]
 8002944:	ed87 1a00 	vstr	s2, [r7]
	con->kp = kp;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	605a      	str	r2, [r3, #4]
	con->kd = kd;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
	con->ki = ki;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	60da      	str	r2, [r3, #12]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <set_target>:

void set_target(ControllerTypeDef* con, float des_val)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	ed87 0a00 	vstr	s0, [r7]
	con->des_val = des_val;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <get_output>:

float get_output(ControllerTypeDef* con, float curr_val)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	ed87 0a00 	vstr	s0, [r7]
	float prop_err, der_err;
	float diff_time;
	uint32_t curr_time = HAL_GetTick();
 8002990:	f002 ffce 	bl	8005930 <HAL_GetTick>
 8002994:	4603      	mov	r3, r0
 8002996:	61fb      	str	r3, [r7, #28]
	if (con->first_time){
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7f1b      	ldrb	r3, [r3, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <get_output+0x44>
		prop_err = (con->des_val)-curr_val;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	edd7 7a00 	vldr	s15, [r7]
 80029aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		der_err = 0;
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
		con->int_err = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
		con->first_time = 0;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	771a      	strb	r2, [r3, #28]
 80029c6:	e031      	b.n	8002a2c <get_output+0xa8>
	}
	else{
		diff_time = (float)(curr_time-(con->prev_time))/1000;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d8:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002a98 <get_output+0x114>
 80029dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e0:	edc7 7a06 	vstr	s15, [r7, #24]
		prop_err = (con->des_val)-curr_val;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	edd7 7a00 	vldr	s15, [r7]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		der_err = (prop_err-(con->prev_err))/diff_time;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80029fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a04:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a0c:	edc7 7a08 	vstr	s15, [r7, #32]
		con->int_err += prop_err*diff_time;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a16:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	float p_output = (con->kp)*prop_err;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float d_output = (con->kd)*der_err;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a44:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4c:	edc7 7a04 	vstr	s15, [r7, #16]
	float i_output = (con->ki)*(con->int_err);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a60:	edc7 7a03 	vstr	s15, [r7, #12]
	float output = p_output+d_output+i_output;
 8002a64:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a70:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a78:	edc7 7a02 	vstr	s15, [r7, #8]

	con->prev_err = prop_err;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	615a      	str	r2, [r3, #20]
	con->prev_time = curr_time;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	619a      	str	r2, [r3, #24]
	return output;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	ee07 3a90 	vmov	s15, r3
}
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	447a0000 	.word	0x447a0000

08002a9c <enable_enc>:
 */

#include <encoder_driver.h>

void enable_enc(Encoder_DriverTypeDef* enc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(enc->tim_handle, TIM_CHANNEL_ALL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	213c      	movs	r1, #60	@ 0x3c
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 ff8c 	bl	80089c8 <HAL_TIM_Encoder_Start>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <set_zero>:
{
	HAL_TIM_Encoder_Stop(enc->tim_handle, TIM_CHANNEL_ALL);
}

void set_zero(Encoder_DriverTypeDef* enc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	enc->tot_count = 0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
	enc->pos = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <read_count>:

int32_t read_count(Encoder_DriverTypeDef* enc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	enc->curr_count = __HAL_TIM_GET_COUNTER(enc->tim_handle);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
	int32_t dcount = (int32_t)((enc->curr_count)-(enc->prev_count));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	60fb      	str	r3, [r7, #12]
	if(dcount <= -((enc->AR)+1)/2){
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	0fda      	lsrs	r2, r3, #31
 8002b00:	4413      	add	r3, r2
 8002b02:	105b      	asrs	r3, r3, #1
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	dc18      	bgt.n	8002b3e <read_count+0x66>
		enc->tot_count += ((enc->AR)+1)+dcount;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	440b      	add	r3, r1
 8002b1a:	441a      	add	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	615a      	str	r2, [r3, #20]
		enc->pos += (((enc->AR)+1)+dcount)/4;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	440b      	add	r3, r1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da00      	bge.n	8002b34 <read_count+0x5c>
 8002b32:	3303      	adds	r3, #3
 8002b34:	109b      	asrs	r3, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
 8002b3c:	e032      	b.n	8002ba4 <read_count+0xcc>
	}
	else if(dcount >= ((enc->AR)+1)/2){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	0fda      	lsrs	r2, r3, #31
 8002b46:	4413      	add	r3, r2
 8002b48:	105b      	asrs	r3, r3, #1
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	db18      	blt.n	8002b84 <read_count+0xac>
		enc->tot_count += dcount-((enc->AR)+1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	1acb      	subs	r3, r1, r3
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	615a      	str	r2, [r3, #20]
		enc->pos += (dcount-((enc->AR)+1))/4;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	1acb      	subs	r3, r1, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da00      	bge.n	8002b7a <read_count+0xa2>
 8002b78:	3303      	adds	r3, #3
 8002b7a:	109b      	asrs	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	e00f      	b.n	8002ba4 <read_count+0xcc>
	}
	else{
		enc->tot_count += dcount;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]
		enc->pos += dcount/4;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da00      	bge.n	8002b9c <read_count+0xc4>
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	109b      	asrs	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
	}
	enc->prev_count = enc->curr_count;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
	return enc->tot_count;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	0000      	movs	r0, r0
	...

08002bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	f5ad 7d6e 	sub.w	sp, sp, #952	@ 0x3b8
 8002bc6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc8:	f002 fe4c 	bl	8005864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bcc:	f000 fc3a 	bl	8003444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd0:	f000 ff26 	bl	8003a20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002bd4:	f000 fc9e 	bl	8003514 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002bd8:	f000 fd0c 	bl	80035f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002bdc:	f000 fdaa 	bl	8003734 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002be0:	f000 fe7c 	bl	80038dc <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8002be4:	f000 fef2 	bl	80039cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002be8:	f000 fcd6 	bl	8003598 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002bec:	f000 fe22 	bl	8003834 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t manual_control = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 33af 	strb.w	r3, [r7, #943]	@ 0x3af
  // Driver Initializations

  // Initializing the motor driver structure and enabling the motor
  volatile int32_t duty_percent;
  volatile int32_t duty_count;
  const int32_t pulse = 4799;
 8002bf6:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8002bfa:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  Motor_DriverTypeDef mot = { .tim_handle = &htim2,
 8002bfe:	4b90      	ldr	r3, [pc, #576]	@ (8002e40 <main+0x280>)
 8002c00:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8002c10:	2308      	movs	r3, #8
 8002c12:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8002c16:	230c      	movs	r3, #12
 8002c18:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8002c1c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002c20:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  	  	 	  	  	  	  	  .tim_channel1 = TIM_CHANNEL_1,
							  .tim_channel2 = TIM_CHANNEL_2,
  	  	 	  	  	  	  	  .tim_channel3 = TIM_CHANNEL_3,	// Unused
							  .tim_channel4 = TIM_CHANNEL_4,	// Unused
							  .pulse = pulse				 };
  if (manual_control){
 8002c24:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <main+0x86>
	  enable_mot(&mot,1);
 8002c2c:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 ffb6 	bl	8003ba4 <enable_mot>
	  // Initially setting the PWM to 0 in case they had been previously been set
	  set_PWM_percent(&mot, 1, 0);
 8002c38:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 ffdf 	bl	8003c04 <set_PWM_percent>
  }

  // Initializing the servo motor driver structure and enabling the servo
  float servo_current_position;
  uint32_t CCR;
  float servo_angle = 0;
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
  Servo_DriverTypeDef servo = { .pwmHandle = &htim5,
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e44 <main+0x284>)
 8002c50:	f507 7453 	add.w	r4, r7, #844	@ 0x34c
 8002c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	  	 	 	.timer_ch = TIM_CHANNEL_4,
								.current_CCR = 0,
								.timer_ARR = 1919999       };
  if (manual_control){
 8002c5a:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <main+0xac>
	  enable_servo(&servo);
 8002c62:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f9aa 	bl	8003fc0 <enable_servo>
  }

  // Initializing the Radio Receiver structure and enabling the channel for inputs
  RadioReciever_DriverTypeDef rad = { .tim_handle = &htim1,
 8002c6c:	4b76      	ldr	r3, [pc, #472]	@ (8002e48 <main+0x288>)
 8002c6e:	f507 744b 	add.w	r4, r7, #812	@ 0x32c
 8002c72:	461d      	mov	r5, r3
 8002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									   .IC_Diff = 0,
									   .pulse_width = 0,
									   .tol = 0.1,
									   .pulse_recieve_flag = 0,
									   .rise_flag = 0					};
  if (manual_control){
 8002c80:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <main+0xd2>
  	enable_rad(&rad);
 8002c88:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 f907 	bl	8003ea0 <enable_rad>

  // Initializing the Photoresistors' structure
  uint32_t photo1, photo2, photo3, photo4;
  uint32_t photo_buff[4];

  Photoresistor_DriverTypeDef photo = { .adc_handle = &hadc1,
 8002c92:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	4b69      	ldr	r3, [pc, #420]	@ (8002e4c <main+0x28c>)
 8002ca6:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8002caa:	2306      	movs	r3, #6
 8002cac:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8002cb6:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8002cba:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318


  // Initializing the Encoder structure
  // NOTE: The purchased Encoder for this project has one non-functional output, meaning it can only read one direction and not as a quadrature
  int32_t count;
  Encoder_DriverTypeDef enc = { .tim_handle = &htim4,
 8002cbe:	4b64      	ldr	r3, [pc, #400]	@ (8002e50 <main+0x290>)
 8002cc0:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  volatile char my_message[200];


  // Initializing Gyroscope I2C structure
  // Source: https://github.com/d-mironov/Bosch-BNO055-STM32/blob/main/examples/simple/Src/main.c
  bno055_euler_t euler = {0, 0, 0};
 8002cd2:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002cd6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002ce4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002cf2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  error_bno err;
  volatile float gyro_angle_x = 0;
 8002cfc:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  volatile float gyro_angle_y = 0;
 8002d0a:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
  volatile float gyro_angle_z = 0;
 8002d18:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

  bno055_t bno = (bno055_t){ .i2c = &hi2c1,
 8002d26:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d2a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002d2e:	4618      	mov	r0, r3
 8002d30:	23ac      	movs	r3, #172	@ 0xac
 8002d32:	461a      	mov	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f007 fbd7 	bl	800a4e8 <memset>
 8002d3a:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d3e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002d42:	4a44      	ldr	r2, [pc, #272]	@ (8002e54 <main+0x294>)
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d4a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002d4e:	2208      	movs	r2, #8
 8002d50:	711a      	strb	r2, [r3, #4]
 8002d52:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002d56:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002d5a:	2228      	movs	r2, #40	@ 0x28
 8002d5c:	719a      	strb	r2, [r3, #6]
	  	  	  	  	  	  	 .addr = 0x28,
							 .mode = BNO_MODE_IMU };
  if (manual_control){
 8002d5e:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8093 	beq.w	8002e8e <main+0x2ce>
	  // EDIT: uncomment this and the next section to debug the IMU/connections

	  HAL_Delay(1000);
 8002d68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d6c:	f002 fdec 	bl	8005948 <HAL_Delay>
	  if ((err = bno055_init(&bno)) == BNO_OK) {
 8002d70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f907 	bl	8000f88 <bno055_init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 33a3 	strb.w	r3, [r7, #931]	@ 0x3a3
 8002d80:	f897 33a3 	ldrb.w	r3, [r7, #931]	@ 0x3a3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <main+0x1f6>
		  sprintf(my_message,"[+] BNO055 init success\r\n");
 8002d88:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002d8c:	4932      	ldr	r1, [pc, #200]	@ (8002e58 <main+0x298>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f007 fb8a 	bl	800a4a8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8002d94:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa21 	bl	80001e0 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8002da6:	2364      	movs	r3, #100	@ 0x64
 8002da8:	482c      	ldr	r0, [pc, #176]	@ (8002e5c <main+0x29c>)
 8002daa:	f006 ffc1 	bl	8009d30 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002dae:	2064      	movs	r0, #100	@ 0x64
 8002db0:	f002 fdca 	bl	8005948 <HAL_Delay>
 8002db4:	e01a      	b.n	8002dec <main+0x22c>
	  } else {
		  sprintf(my_message,"[!] BNO055 init failed: %s \r\n", bno055_err_str(err));
 8002db6:	f897 33a3 	ldrb.w	r3, [r7, #931]	@ 0x3a3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fd54 	bl	8002868 <bno055_err_str>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002dc6:	4926      	ldr	r1, [pc, #152]	@ (8002e60 <main+0x2a0>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f007 fb6d 	bl	800a4a8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8002dce:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fa04 	bl	80001e0 <strlen>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8002de0:	2364      	movs	r3, #100	@ 0x64
 8002de2:	481e      	ldr	r0, [pc, #120]	@ (8002e5c <main+0x29c>)
 8002de4:	f006 ffa4 	bl	8009d30 <HAL_UART_Transmit>
		  Error_Handler();
 8002de8:	f000 fed6 	bl	8003b98 <Error_Handler>
	  }

	  HAL_Delay(100);
 8002dec:	2064      	movs	r0, #100	@ 0x64
 8002dee:	f002 fdab 	bl	8005948 <HAL_Delay>
	  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8002df2:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f7ff fb8c 	bl	800251c <bno055_set_unit>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 33a3 	strb.w	r3, [r7, #931]	@ 0x3a3
							BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
	  if (err != BNO_OK) {
 8002e0a:	f897 33a3 	ldrb.w	r3, [r7, #931]	@ 0x3a3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02a      	beq.n	8002e68 <main+0x2a8>
		  sprintf(my_message,"[BNO] Failed to set units. Err: %d\r\n", err);
 8002e12:	f897 23a3 	ldrb.w	r2, [r7, #931]	@ 0x3a3
 8002e16:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002e1a:	4912      	ldr	r1, [pc, #72]	@ (8002e64 <main+0x2a4>)
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f007 fb43 	bl	800a4a8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8002e22:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd f9da 	bl	80001e0 <strlen>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8002e34:	2364      	movs	r3, #100	@ 0x64
 8002e36:	4809      	ldr	r0, [pc, #36]	@ (8002e5c <main+0x29c>)
 8002e38:	f006 ff7a 	bl	8009d30 <HAL_UART_Transmit>
 8002e3c:	e027      	b.n	8002e8e <main+0x2ce>
 8002e3e:	bf00      	nop
 8002e40:	20000170 	.word	0x20000170
 8002e44:	0800d91c 	.word	0x0800d91c
 8002e48:	0800d92c 	.word	0x0800d92c
 8002e4c:	2000008c 	.word	0x2000008c
 8002e50:	0800d94c 	.word	0x0800d94c
 8002e54:	200000d4 	.word	0x200000d4
 8002e58:	0800d74c 	.word	0x0800d74c
 8002e5c:	20000248 	.word	0x20000248
 8002e60:	0800d768 	.word	0x0800d768
 8002e64:	0800d788 	.word	0x0800d788
	  } else {
		  sprintf(my_message,"[BNO] Unit selection success\r\n");
 8002e68:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002e6c:	4962      	ldr	r1, [pc, #392]	@ (8002ff8 <main+0x438>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f007 fb1a 	bl	800a4a8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8002e74:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd f9b1 	bl	80001e0 <strlen>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8002e86:	2364      	movs	r3, #100	@ 0x64
 8002e88:	485c      	ldr	r0, [pc, #368]	@ (8002ffc <main+0x43c>)
 8002e8a:	f006 ff51 	bl	8009d30 <HAL_UART_Transmit>
	*/
  }


  // Controller Initialization
  ControllerTypeDef con = { .des_val = 0,
 8002e8e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002e92:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8002e96:	4618      	mov	r0, r3
 8002e98:	2320      	movs	r3, #32
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f007 fb23 	bl	800a4e8 <memset>
 8002ea2:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002ea6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8002eaa:	2201      	movs	r2, #1
 8002eac:	771a      	strb	r2, [r3, #28]
							.prev_time = 0,
							.first_time = 1, };

  // Task Initializations

  INTERTASK_VARS intertask_vars = { .rc_trigger_flag = 0,
 8002eae:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002eb2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002eb6:	4a52      	ldr	r2, [pc, #328]	@ (8003000 <main+0x440>)
 8002eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  	  	  	  	  	  	  	  	  	  .rad_edge_flag = &rad_edge_flag,	// EDIT: This should be an address bc its set outside of the tasks by an interrupt. The interrupt does not actually update the value in this struct, so we need to read the value at the address that it's stored in
  	  	  	  	  	  	  	  	  	  .htim_cb = &htim_cb			   };

  TASK1 task1 = { .state = 0,
 8002ebe:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002ec2:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002ece:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002ed2:	f507 7257 	add.w	r2, r7, #860	@ 0x35c
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002edc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002ee0:	f507 7253 	add.w	r2, r7, #844	@ 0x34c
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002eea:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002eee:	f507 724b 	add.w	r2, r7, #812	@ 0x32c
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002ef8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002efc:	f507 7241 	add.w	r2, r7, #772	@ 0x304
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f06:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002f0a:	f507 7239 	add.w	r2, r7, #740	@ 0x2e4
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f14:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002f18:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002f1c:	619a      	str	r2, [r3, #24]
				  .photo = &photo,
				  .enc = &enc,
  	  	  	  	  .gyro = &bno	   };

  float voltage_dif_list[2];
  TASK2 task2 = { .state = 0,
 8002f1e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f22:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f26:	4618      	mov	r0, r3
 8002f28:	2354      	movs	r3, #84	@ 0x54
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f007 fadb 	bl	800a4e8 <memset>
 8002f32:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f36:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f3a:	f507 7257 	add.w	r2, r7, #860	@ 0x35c
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f44:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f48:	f507 7253 	add.w	r2, r7, #844	@ 0x34c
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f52:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f56:	f507 724b 	add.w	r2, r7, #812	@ 0x32c
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f60:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f64:	f507 7241 	add.w	r2, r7, #772	@ 0x304
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f6e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f72:	f507 7239 	add.w	r2, r7, #740	@ 0x2e4
 8002f76:	615a      	str	r2, [r3, #20]
 8002f78:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f7c:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f80:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002f84:	619a      	str	r2, [r3, #24]
 8002f86:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f8a:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f8e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8002f92:	61da      	str	r2, [r3, #28]
 8002f94:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002f98:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]
 8002fa2:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002fa6:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002faa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fb0:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8002fb4:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002fb8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002fbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  prev_time = HAL_GetTick();
 8002fbe:	f002 fcb7 	bl	8005930 <HAL_GetTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
  while (1)
  {
	  if (!manual_control){
 8002fc8:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d119      	bne.n	8003004 <main+0x444>
		  // FSM
		  main_task1(&task1, &intertask_vars);
 8002fd0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002fd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fb6e 	bl	80046bc <main_task1>
		  main_task2(&task2, &intertask_vars);
 8002fe0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fc27 	bl	800483c <main_task2>
		  // Wait 10ms before running again
		  HAL_Delay(10);
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f002 fcaa 	bl	8005948 <HAL_Delay>
 8002ff4:	e7e8      	b.n	8002fc8 <main+0x408>
 8002ff6:	bf00      	nop
 8002ff8:	0800d7b0 	.word	0x0800d7b0
 8002ffc:	20000248 	.word	0x20000248
 8003000:	0800d96c 	.word	0x0800d96c
	  }
	  else if (manual_control){
 8003004:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0dd      	beq.n	8002fc8 <main+0x408>
		  // Testing Motor
		  int32_t duty_count = pulse_to_PWM(&rad);
 800300c:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fd53 	bl	8003abc <pulse_to_PWM>
 8003016:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
		  set_PWM(&mot, 1, duty_count);
 800301a:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 800301e:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fe09 	bl	8003c3c <set_PWM>

		  // Testing Servo
		  servo_set_position(&servo, servo_angle);
 800302a:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 800302e:	ed97 0ae9 	vldr	s0, [r7, #932]	@ 0x3a4
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f808 	bl	8004048 <servo_set_position>
		  CCR = servo.current_CCR;
 8003038:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800303c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
		  servo_current_position = servo_get_position(&servo);
 8003040:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8003044:	4618      	mov	r0, r3
 8003046:	f000 ffcb 	bl	8003fe0 <servo_get_position>
 800304a:	ed87 0ae5 	vstr	s0, [r7, #916]	@ 0x394

		  // Testing Radio Receiver
		  if (rad_edge_flag){
 800304e:	4be4      	ldr	r3, [pc, #912]	@ (80033e0 <main+0x820>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <main+0x4a8>
			  read_pulse(&rad, &htim_cb);
 8003056:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 800305a:	49e2      	ldr	r1, [pc, #904]	@ (80033e4 <main+0x824>)
 800305c:	4618      	mov	r0, r3
 800305e:	f000 ff80 	bl	8003f62 <read_pulse>
			  rad_edge_flag = 0;
 8003062:	4bdf      	ldr	r3, [pc, #892]	@ (80033e0 <main+0x820>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
		  }

		  // Testing Photoresistor ADC values

		  uint32_t photo1 = get_photo_value(&photo, 1);
 8003068:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f000 feb7 	bl	8003de2 <get_photo_value>
 8003074:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
		  uint32_t photo2 = get_photo_value(&photo, 2);
 8003078:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 800307c:	2102      	movs	r1, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f000 feaf 	bl	8003de2 <get_photo_value>
 8003084:	f8c7 038c 	str.w	r0, [r7, #908]	@ 0x38c
		  uint32_t photo3 = get_photo_value(&photo, 3);
 8003088:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fea7 	bl	8003de2 <get_photo_value>
 8003094:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388
		  uint32_t photo4 = get_photo_value(&photo, 4);
 8003098:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 800309c:	2104      	movs	r1, #4
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fe9f 	bl	8003de2 <get_photo_value>
 80030a4:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384
		  uint32_t photo_dif12 = get_photo_diff(&photo,1,2);
 80030a8:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 80030ac:	2202      	movs	r2, #2
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 feda 	bl	8003e6a <get_photo_diff>
 80030b6:	f8c7 0380 	str.w	r0, [r7, #896]	@ 0x380

		  // Testing Encoder Outputs
		  count = read_count(&enc);
 80030ba:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fd0a 	bl	8002ad8 <read_count>
 80030c4:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c

		  // Testing I2C Gyroscope
		  bno055_euler(&bno, &euler);
 80030c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ff10 	bl	8001ef8 <bno055_euler>
		  gyro_angle_x = euler.yaw;
 80030d8:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 80030dc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 80030e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030ea:	601a      	str	r2, [r3, #0]
		  gyro_angle_y = euler.pitch;
 80030ec:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 80030f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 80030fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030fe:	601a      	str	r2, [r3, #0]
		  gyro_angle_z = euler.roll;
 8003100:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8003104:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 800310e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003112:	601a      	str	r2, [r3, #0]

		  //Printing out values through UART at set times
		  curr_time = HAL_GetTick();
 8003114:	f002 fc0c 	bl	8005930 <HAL_GetTick>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
		  if (curr_time - prev_time >= 1000){
 800311e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8003122:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800312c:	f4ff af4c 	bcc.w	8002fc8 <main+0x408>
			  sprintf(my_message,"Photoresistor 1 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo1*3.3/4095), photo1);
 8003130:	f8d7 0390 	ldr.w	r0, [r7, #912]	@ 0x390
 8003134:	f7fd f9ee 	bl	8000514 <__aeabi_ui2d>
 8003138:	a3a5      	add	r3, pc, #660	@ (adr r3, 80033d0 <main+0x810>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fa63 	bl	8000608 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	a3a3      	add	r3, pc, #652	@ (adr r3, 80033d8 <main+0x818>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd fb84 	bl	800085c <__aeabi_ddiv>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fd2c 	bl	8000bb8 <__aeabi_d2uiz>
 8003160:	4602      	mov	r2, r0
 8003162:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8003166:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800316a:	499f      	ldr	r1, [pc, #636]	@ (80033e8 <main+0x828>)
 800316c:	f007 f99c 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8003170:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f833 	bl	80001e0 <strlen>
 800317a:	4603      	mov	r3, r0
 800317c:	b29a      	uxth	r2, r3
 800317e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003182:	2364      	movs	r3, #100	@ 0x64
 8003184:	4899      	ldr	r0, [pc, #612]	@ (80033ec <main+0x82c>)
 8003186:	f006 fdd3 	bl	8009d30 <HAL_UART_Transmit>
			  sprintf(my_message,"Photoresistor 2 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo2*3.3/4095), photo2);
 800318a:	f8d7 038c 	ldr.w	r0, [r7, #908]	@ 0x38c
 800318e:	f7fd f9c1 	bl	8000514 <__aeabi_ui2d>
 8003192:	a38f      	add	r3, pc, #572	@ (adr r3, 80033d0 <main+0x810>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd fa36 	bl	8000608 <__aeabi_dmul>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	a38c      	add	r3, pc, #560	@ (adr r3, 80033d8 <main+0x818>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f7fd fb57 	bl	800085c <__aeabi_ddiv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	f7fd fcff 	bl	8000bb8 <__aeabi_d2uiz>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 80031c0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80031c4:	498a      	ldr	r1, [pc, #552]	@ (80033f0 <main+0x830>)
 80031c6:	f007 f96f 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 80031ca:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f806 	bl	80001e0 <strlen>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80031dc:	2364      	movs	r3, #100	@ 0x64
 80031de:	4883      	ldr	r0, [pc, #524]	@ (80033ec <main+0x82c>)
 80031e0:	f006 fda6 	bl	8009d30 <HAL_UART_Transmit>
			  sprintf(my_message,"Photoresistor 3 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo3*3.3/4095), photo3);
 80031e4:	f8d7 0388 	ldr.w	r0, [r7, #904]	@ 0x388
 80031e8:	f7fd f994 	bl	8000514 <__aeabi_ui2d>
 80031ec:	a378      	add	r3, pc, #480	@ (adr r3, 80033d0 <main+0x810>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fa09 	bl	8000608 <__aeabi_dmul>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	a376      	add	r3, pc, #472	@ (adr r3, 80033d8 <main+0x818>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd fb2a 	bl	800085c <__aeabi_ddiv>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f7fd fcd2 	bl	8000bb8 <__aeabi_d2uiz>
 8003214:	4602      	mov	r2, r0
 8003216:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800321a:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800321e:	4975      	ldr	r1, [pc, #468]	@ (80033f4 <main+0x834>)
 8003220:	f007 f942 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8003224:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003228:	4618      	mov	r0, r3
 800322a:	f7fc ffd9 	bl	80001e0 <strlen>
 800322e:	4603      	mov	r3, r0
 8003230:	b29a      	uxth	r2, r3
 8003232:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003236:	2364      	movs	r3, #100	@ 0x64
 8003238:	486c      	ldr	r0, [pc, #432]	@ (80033ec <main+0x82c>)
 800323a:	f006 fd79 	bl	8009d30 <HAL_UART_Transmit>
			  sprintf(my_message,"Photoresistor 4 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo4*3.3/4095), photo4);
 800323e:	f8d7 0384 	ldr.w	r0, [r7, #900]	@ 0x384
 8003242:	f7fd f967 	bl	8000514 <__aeabi_ui2d>
 8003246:	a362      	add	r3, pc, #392	@ (adr r3, 80033d0 <main+0x810>)
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f7fd f9dc 	bl	8000608 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	a35f      	add	r3, pc, #380	@ (adr r3, 80033d8 <main+0x818>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f7fd fafd 	bl	800085c <__aeabi_ddiv>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	f7fd fca5 	bl	8000bb8 <__aeabi_d2uiz>
 800326e:	4602      	mov	r2, r0
 8003270:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8003274:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8003278:	495f      	ldr	r1, [pc, #380]	@ (80033f8 <main+0x838>)
 800327a:	f007 f915 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 800327e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003282:	4618      	mov	r0, r3
 8003284:	f7fc ffac 	bl	80001e0 <strlen>
 8003288:	4603      	mov	r3, r0
 800328a:	b29a      	uxth	r2, r3
 800328c:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003290:	2364      	movs	r3, #100	@ 0x64
 8003292:	4856      	ldr	r0, [pc, #344]	@ (80033ec <main+0x82c>)
 8003294:	f006 fd4c 	bl	8009d30 <HAL_UART_Transmit>

			  sprintf(my_message,"Photoresistor 1-2 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo_dif12*3.3/4095), photo_dif12);
 8003298:	f8d7 0380 	ldr.w	r0, [r7, #896]	@ 0x380
 800329c:	f7fd f93a 	bl	8000514 <__aeabi_ui2d>
 80032a0:	a34b      	add	r3, pc, #300	@ (adr r3, 80033d0 <main+0x810>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd f9af 	bl	8000608 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	a349      	add	r3, pc, #292	@ (adr r3, 80033d8 <main+0x818>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fd fad0 	bl	800085c <__aeabi_ddiv>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fc78 	bl	8000bb8 <__aeabi_d2uiz>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 80032ce:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80032d2:	494a      	ldr	r1, [pc, #296]	@ (80033fc <main+0x83c>)
 80032d4:	f007 f8e8 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 80032d8:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fc ff7f 	bl	80001e0 <strlen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80032ea:	2364      	movs	r3, #100	@ 0x64
 80032ec:	483f      	ldr	r0, [pc, #252]	@ (80033ec <main+0x82c>)
 80032ee:	f006 fd1f 	bl	8009d30 <HAL_UART_Transmit>


			  sprintf(my_message,"Encoder position is: %ld.\r\n", count);
 80032f2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80032f6:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80032fa:	4941      	ldr	r1, [pc, #260]	@ (8003400 <main+0x840>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f007 f8d3 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8003302:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003306:	4618      	mov	r0, r3
 8003308:	f7fc ff6a 	bl	80001e0 <strlen>
 800330c:	4603      	mov	r3, r0
 800330e:	b29a      	uxth	r2, r3
 8003310:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003314:	2364      	movs	r3, #100	@ 0x64
 8003316:	4835      	ldr	r0, [pc, #212]	@ (80033ec <main+0x82c>)
 8003318:	f006 fd0a 	bl	8009d30 <HAL_UART_Transmit>

			  sprintf(my_message,"Gyro X is: %d.\r\n", (int32_t)gyro_angle_x);
 800331c:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8003320:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800332c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003330:	ee17 2a90 	vmov	r2, s15
 8003334:	4933      	ldr	r1, [pc, #204]	@ (8003404 <main+0x844>)
 8003336:	4618      	mov	r0, r3
 8003338:	f007 f8b6 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 800333c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003340:	4618      	mov	r0, r3
 8003342:	f7fc ff4d 	bl	80001e0 <strlen>
 8003346:	4603      	mov	r3, r0
 8003348:	b29a      	uxth	r2, r3
 800334a:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800334e:	2364      	movs	r3, #100	@ 0x64
 8003350:	4826      	ldr	r0, [pc, #152]	@ (80033ec <main+0x82c>)
 8003352:	f006 fced 	bl	8009d30 <HAL_UART_Transmit>
			  sprintf(my_message,"Gyro Y is: %d.\r\n", (int32_t)gyro_angle_y);
 8003356:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 800335a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003366:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800336a:	ee17 2a90 	vmov	r2, s15
 800336e:	4926      	ldr	r1, [pc, #152]	@ (8003408 <main+0x848>)
 8003370:	4618      	mov	r0, r3
 8003372:	f007 f899 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8003376:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800337a:	4618      	mov	r0, r3
 800337c:	f7fc ff30 	bl	80001e0 <strlen>
 8003380:	4603      	mov	r3, r0
 8003382:	b29a      	uxth	r2, r3
 8003384:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003388:	2364      	movs	r3, #100	@ 0x64
 800338a:	4818      	ldr	r0, [pc, #96]	@ (80033ec <main+0x82c>)
 800338c:	f006 fcd0 	bl	8009d30 <HAL_UART_Transmit>
			  sprintf(my_message,"Gyro Z is: %d.\r\n", (int32_t)gyro_angle_z);
 8003390:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8003394:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a0:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80033a4:	ee17 2a90 	vmov	r2, s15
 80033a8:	4918      	ldr	r1, [pc, #96]	@ (800340c <main+0x84c>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f007 f87c 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 80033b0:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fc ff13 	bl	80001e0 <strlen>
 80033ba:	4603      	mov	r3, r0
 80033bc:	b29a      	uxth	r2, r3
 80033be:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80033c2:	2364      	movs	r3, #100	@ 0x64
 80033c4:	4809      	ldr	r0, [pc, #36]	@ (80033ec <main+0x82c>)
 80033c6:	f006 fcb3 	bl	8009d30 <HAL_UART_Transmit>

			  sprintf(my_message,"\r\n");
 80033ca:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80033ce:	e01f      	b.n	8003410 <main+0x850>
 80033d0:	66666666 	.word	0x66666666
 80033d4:	400a6666 	.word	0x400a6666
 80033d8:	00000000 	.word	0x00000000
 80033dc:	40affe00 	.word	0x40affe00
 80033e0:	200002d8 	.word	0x200002d8
 80033e4:	20000290 	.word	0x20000290
 80033e8:	0800d7d0 	.word	0x0800d7d0
 80033ec:	20000248 	.word	0x20000248
 80033f0:	0800d800 	.word	0x0800d800
 80033f4:	0800d830 	.word	0x0800d830
 80033f8:	0800d860 	.word	0x0800d860
 80033fc:	0800d890 	.word	0x0800d890
 8003400:	0800d8c0 	.word	0x0800d8c0
 8003404:	0800d8dc 	.word	0x0800d8dc
 8003408:	0800d8f0 	.word	0x0800d8f0
 800340c:	0800d904 	.word	0x0800d904
 8003410:	490a      	ldr	r1, [pc, #40]	@ (800343c <main+0x87c>)
 8003412:	4618      	mov	r0, r3
 8003414:	f007 f848 	bl	800a4a8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 10);
 8003418:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800341c:	4618      	mov	r0, r3
 800341e:	f7fc fedf 	bl	80001e0 <strlen>
 8003422:	4603      	mov	r3, r0
 8003424:	b29a      	uxth	r2, r3
 8003426:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800342a:	230a      	movs	r3, #10
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <main+0x880>)
 800342e:	f006 fc7f 	bl	8009d30 <HAL_UART_Transmit>

			  prev_time = curr_time;
 8003432:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8003436:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
	  if (!manual_control){
 800343a:	e5c5      	b.n	8002fc8 <main+0x408>
 800343c:	0800d918 	.word	0x0800d918
 8003440:	20000248 	.word	0x20000248

08003444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b094      	sub	sp, #80	@ 0x50
 8003448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800344a:	f107 0320 	add.w	r3, r7, #32
 800344e:	2230      	movs	r2, #48	@ 0x30
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f007 f848 	bl	800a4e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <SystemClock_Config+0xc8>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	4a26      	ldr	r2, [pc, #152]	@ (800350c <SystemClock_Config+0xc8>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	6413      	str	r3, [r2, #64]	@ 0x40
 8003478:	4b24      	ldr	r3, [pc, #144]	@ (800350c <SystemClock_Config+0xc8>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003484:	2300      	movs	r3, #0
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	4b21      	ldr	r3, [pc, #132]	@ (8003510 <SystemClock_Config+0xcc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <SystemClock_Config+0xcc>)
 800348e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <SystemClock_Config+0xcc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034aa:	2302      	movs	r3, #2
 80034ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034b4:	2304      	movs	r3, #4
 80034b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80034b8:	2360      	movs	r3, #96	@ 0x60
 80034ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034bc:	2302      	movs	r3, #2
 80034be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034c0:	2304      	movs	r3, #4
 80034c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c4:	f107 0320 	add.w	r3, r7, #32
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 fa73 	bl	80079b4 <HAL_RCC_OscConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034d4:	f000 fb60 	bl	8003b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034d8:	230f      	movs	r3, #15
 80034da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034dc:	2302      	movs	r3, #2
 80034de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	2103      	movs	r1, #3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fcd5 	bl	8007ea4 <HAL_RCC_ClockConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003500:	f000 fb4a 	bl	8003b98 <Error_Handler>
  }
}
 8003504:	bf00      	nop
 8003506:	3750      	adds	r7, #80	@ 0x50
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000

08003514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800351a:	463b      	mov	r3, r7
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <MX_ADC1_Init+0x78>)
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <MX_ADC1_Init+0x7c>)
 800352a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <MX_ADC1_Init+0x78>)
 800352e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003532:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <MX_ADC1_Init+0x78>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <MX_ADC1_Init+0x78>)
 800353c:	2201      	movs	r2, #1
 800353e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <MX_ADC1_Init+0x78>)
 8003542:	2201      	movs	r2, #1
 8003544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_ADC1_Init+0x78>)
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800354e:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <MX_ADC1_Init+0x78>)
 8003550:	2200      	movs	r2, #0
 8003552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003554:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <MX_ADC1_Init+0x78>)
 8003556:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <MX_ADC1_Init+0x80>)
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800355a:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_ADC1_Init+0x78>)
 800355c:	2200      	movs	r2, #0
 800355e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <MX_ADC1_Init+0x78>)
 8003562:	2204      	movs	r2, #4
 8003564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_ADC1_Init+0x78>)
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <MX_ADC1_Init+0x78>)
 8003570:	2201      	movs	r2, #1
 8003572:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_ADC1_Init+0x78>)
 8003576:	f002 fa0b 	bl	8005990 <HAL_ADC_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003580:	f000 fb0a 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	2000008c 	.word	0x2000008c
 8003590:	40012000 	.word	0x40012000
 8003594:	0f000001 	.word	0x0f000001

08003598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <MX_I2C1_Init+0x50>)
 800359e:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <MX_I2C1_Init+0x54>)
 80035a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035a2:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035a4:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <MX_I2C1_Init+0x58>)
 80035a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035d4:	4804      	ldr	r0, [pc, #16]	@ (80035e8 <MX_I2C1_Init+0x50>)
 80035d6:	f003 f863 	bl	80066a0 <HAL_I2C_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035e0:	f000 fada 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200000d4 	.word	0x200000d4
 80035ec:	40005400 	.word	0x40005400
 80035f0:	000186a0 	.word	0x000186a0

080035f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	@ 0x40
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800362e:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <MX_TIM1_Init+0x138>)
 8003630:	4a3f      	ldr	r2, [pc, #252]	@ (8003730 <MX_TIM1_Init+0x13c>)
 8003632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8003634:	4b3d      	ldr	r3, [pc, #244]	@ (800372c <MX_TIM1_Init+0x138>)
 8003636:	225f      	movs	r2, #95	@ 0x5f
 8003638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363a:	4b3c      	ldr	r3, [pc, #240]	@ (800372c <MX_TIM1_Init+0x138>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003640:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <MX_TIM1_Init+0x138>)
 8003642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003648:	4b38      	ldr	r3, [pc, #224]	@ (800372c <MX_TIM1_Init+0x138>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800364e:	4b37      	ldr	r3, [pc, #220]	@ (800372c <MX_TIM1_Init+0x138>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003654:	4b35      	ldr	r3, [pc, #212]	@ (800372c <MX_TIM1_Init+0x138>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800365a:	4834      	ldr	r0, [pc, #208]	@ (800372c <MX_TIM1_Init+0x138>)
 800365c:	f004 fe42 	bl	80082e4 <HAL_TIM_Base_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003666:	f000 fa97 	bl	8003b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003670:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003674:	4619      	mov	r1, r3
 8003676:	482d      	ldr	r0, [pc, #180]	@ (800372c <MX_TIM1_Init+0x138>)
 8003678:	f005 fc82 	bl	8008f80 <HAL_TIM_ConfigClockSource>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003682:	f000 fa89 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003686:	4829      	ldr	r0, [pc, #164]	@ (800372c <MX_TIM1_Init+0x138>)
 8003688:	f004 ff84 	bl	8008594 <HAL_TIM_IC_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003692:	f000 fa81 	bl	8003b98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003696:	2304      	movs	r3, #4
 8003698:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800369a:	2350      	movs	r3, #80	@ 0x50
 800369c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80036a2:	2300      	movs	r3, #0
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	4619      	mov	r1, r3
 80036b0:	481e      	ldr	r0, [pc, #120]	@ (800372c <MX_TIM1_Init+0x138>)
 80036b2:	f005 fd2c 	bl	800910e <HAL_TIM_SlaveConfigSynchro>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80036bc:	f000 fa6c 	bl	8003b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036c4:	2301      	movs	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4814      	ldr	r0, [pc, #80]	@ (800372c <MX_TIM1_Init+0x138>)
 80036da:	f005 faf3 	bl	8008cc4 <HAL_TIM_IC_ConfigChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80036e4:	f000 fa58 	bl	8003b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80036e8:	2302      	movs	r3, #2
 80036ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80036ec:	2302      	movs	r3, #2
 80036ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2204      	movs	r2, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <MX_TIM1_Init+0x138>)
 80036fa:	f005 fae3 	bl	8008cc4 <HAL_TIM_IC_ConfigChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003704:	f000 fa48 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	@ (800372c <MX_TIM1_Init+0x138>)
 8003716:	f006 fa31 	bl	8009b7c <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8003720:	f000 fa3a 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3740      	adds	r7, #64	@ 0x40
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000128 	.word	0x20000128
 8003730:	40010000 	.word	0x40010000

08003734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	@ 0x38
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003748:	f107 0320 	add.w	r3, r7, #32
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
 8003760:	615a      	str	r2, [r3, #20]
 8003762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003764:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800376a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800376c:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <MX_TIM2_Init+0xfc>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b2f      	ldr	r3, [pc, #188]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8003778:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <MX_TIM2_Init+0xfc>)
 800377a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800377e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003780:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003786:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800378c:	4828      	ldr	r0, [pc, #160]	@ (8003830 <MX_TIM2_Init+0xfc>)
 800378e:	f004 fda9 	bl	80082e4 <HAL_TIM_Base_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003798:	f000 f9fe 	bl	8003b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037a6:	4619      	mov	r1, r3
 80037a8:	4821      	ldr	r0, [pc, #132]	@ (8003830 <MX_TIM2_Init+0xfc>)
 80037aa:	f005 fbe9 	bl	8008f80 <HAL_TIM_ConfigClockSource>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80037b4:	f000 f9f0 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037b8:	481d      	ldr	r0, [pc, #116]	@ (8003830 <MX_TIM2_Init+0xfc>)
 80037ba:	f004 fde2 	bl	8008382 <HAL_TIM_PWM_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80037c4:	f000 f9e8 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037d0:	f107 0320 	add.w	r3, r7, #32
 80037d4:	4619      	mov	r1, r3
 80037d6:	4816      	ldr	r0, [pc, #88]	@ (8003830 <MX_TIM2_Init+0xfc>)
 80037d8:	f006 f9d0 	bl	8009b7c <HAL_TIMEx_MasterConfigSynchronization>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80037e2:	f000 f9d9 	bl	8003b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e6:	2360      	movs	r3, #96	@ 0x60
 80037e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80037ee:	2302      	movs	r3, #2
 80037f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	2200      	movs	r2, #0
 80037fa:	4619      	mov	r1, r3
 80037fc:	480c      	ldr	r0, [pc, #48]	@ (8003830 <MX_TIM2_Init+0xfc>)
 80037fe:	f005 fafd 	bl	8008dfc <HAL_TIM_PWM_ConfigChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003808:	f000 f9c6 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	2204      	movs	r2, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4807      	ldr	r0, [pc, #28]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003814:	f005 faf2 	bl	8008dfc <HAL_TIM_PWM_ConfigChannel>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800381e:	f000 f9bb 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003822:	4803      	ldr	r0, [pc, #12]	@ (8003830 <MX_TIM2_Init+0xfc>)
 8003824:	f000 fe18 	bl	8004458 <HAL_TIM_MspPostInit>

}
 8003828:	bf00      	nop
 800382a:	3738      	adds	r7, #56	@ 0x38
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000170 	.word	0x20000170

08003834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	@ 0x30
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	2224      	movs	r2, #36	@ 0x24
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f006 fe50 	bl	800a4e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 8003852:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <MX_TIM4_Init+0xa4>)
 8003854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003856:	4b1f      	ldr	r3, [pc, #124]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385c:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003862:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 8003864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003868:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386a:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003870:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 8003872:	2200      	movs	r2, #0
 8003874:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003876:	2303      	movs	r3, #3
 8003878:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800387e:	2301      	movs	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800388e:	2301      	movs	r3, #1
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003892:	2300      	movs	r3, #0
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	4619      	mov	r1, r3
 80038a0:	480c      	ldr	r0, [pc, #48]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 80038a2:	f004 ffeb 	bl	800887c <HAL_TIM_Encoder_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80038ac:	f000 f974 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4805      	ldr	r0, [pc, #20]	@ (80038d4 <MX_TIM4_Init+0xa0>)
 80038be:	f006 f95d 	bl	8009b7c <HAL_TIMEx_MasterConfigSynchronization>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80038c8:	f000 f966 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038cc:	bf00      	nop
 80038ce:	3730      	adds	r7, #48	@ 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200001b8 	.word	0x200001b8
 80038d8:	40000800 	.word	0x40000800

080038dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	@ 0x38
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	f107 0320 	add.w	r3, r7, #32
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800390c:	4b2c      	ldr	r3, [pc, #176]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800390e:	4a2d      	ldr	r2, [pc, #180]	@ (80039c4 <MX_TIM5_Init+0xe8>)
 8003910:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003912:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b29      	ldr	r3, [pc, #164]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1919999;
 800391e:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <MX_TIM5_Init+0xec>)
 8003922:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003924:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392a:	4b25      	ldr	r3, [pc, #148]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003930:	4823      	ldr	r0, [pc, #140]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 8003932:	f004 fcd7 	bl	80082e4 <HAL_TIM_Base_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800393c:	f000 f92c 	bl	8003b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003946:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800394a:	4619      	mov	r1, r3
 800394c:	481c      	ldr	r0, [pc, #112]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800394e:	f005 fb17 	bl	8008f80 <HAL_TIM_ConfigClockSource>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003958:	f000 f91e 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800395c:	4818      	ldr	r0, [pc, #96]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800395e:	f004 fd10 	bl	8008382 <HAL_TIM_PWM_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003968:	f000 f916 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003974:	f107 0320 	add.w	r3, r7, #32
 8003978:	4619      	mov	r1, r3
 800397a:	4811      	ldr	r0, [pc, #68]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 800397c:	f006 f8fe 	bl	8009b7c <HAL_TIMEx_MasterConfigSynchronization>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003986:	f000 f907 	bl	8003b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800398a:	2360      	movs	r3, #96	@ 0x60
 800398c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	220c      	movs	r2, #12
 800399e:	4619      	mov	r1, r3
 80039a0:	4807      	ldr	r0, [pc, #28]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 80039a2:	f005 fa2b 	bl	8008dfc <HAL_TIM_PWM_ConfigChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80039ac:	f000 f8f4 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80039b0:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <MX_TIM5_Init+0xe4>)
 80039b2:	f000 fd51 	bl	8004458 <HAL_TIM_MspPostInit>

}
 80039b6:	bf00      	nop
 80039b8:	3738      	adds	r7, #56	@ 0x38
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000200 	.word	0x20000200
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	001d4bff 	.word	0x001d4bff

080039cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <MX_USART2_UART_Init+0x50>)
 80039d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039de:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f2:	2208      	movs	r2, #8
 80039f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003a02:	4805      	ldr	r0, [pc, #20]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 8003a04:	f006 f93c 	bl	8009c80 <HAL_HalfDuplex_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a0e:	f000 f8c3 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000248 	.word	0x20000248
 8003a1c:	40004400 	.word	0x40004400

08003a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a62:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	4a0f      	ldr	r2, [pc, #60]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <MX_GPIO_Init+0x94>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4804      	ldr	r0, [pc, #16]	@ (8003ab8 <MX_GPIO_Init+0x98>)
 8003aa6:	f002 fc77 	bl	8006398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003aaa:	bf00      	nop
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020400 	.word	0x40020400

08003abc <pulse_to_PWM>:

/* USER CODE BEGIN 4 */

int32_t pulse_to_PWM(RadioReciever_DriverTypeDef* rad)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	  // Getting radio pulse and setting motor
	  int32_t pulse = 4799;
 8003ac4:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8003ac8:	60fb      	str	r3, [r7, #12]
	  uint32_t pulse_rad = get_pulse(rad);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa00 	bl	8003ed0 <get_pulse>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	617b      	str	r3, [r7, #20]
	  if (abs(pulse_rad) < 10){
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f113 0f09 	cmn.w	r3, #9
 8003ada:	db05      	blt.n	8003ae8 <pulse_to_PWM+0x2c>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b09      	cmp	r3, #9
 8003ae0:	dc02      	bgt.n	8003ae8 <pulse_to_PWM+0x2c>
		  pulse_rad = 1509;
 8003ae2:	f240 53e5 	movw	r3, #1509	@ 0x5e5
 8003ae6:	617b      	str	r3, [r7, #20]
	  }
	  int32_t duty_percent = (int32_t)((pulse_rad-1509)*100)/513;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2264      	movs	r2, #100	@ 0x64
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	f5a3 3313 	sub.w	r3, r3, #150528	@ 0x24c00
 8003af4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <pulse_to_PWM+0xa4>)
 8003afa:	fb82 1203 	smull	r1, r2, r2, r3
 8003afe:	1212      	asrs	r2, r2, #8
 8003b00:	17db      	asrs	r3, r3, #31
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	60bb      	str	r3, [r7, #8]
	  int32_t duty_count = (int32_t)((pulse_rad-1509)*pulse)/513;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f2a3 53e5 	subw	r3, r3, #1509	@ 0x5e5
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <pulse_to_PWM+0xa4>)
 8003b14:	fb82 1203 	smull	r1, r2, r2, r3
 8003b18:	1212      	asrs	r2, r2, #8
 8003b1a:	17db      	asrs	r3, r3, #31
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
	  if (duty_percent > 100 || duty_count > 4799){
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	dc03      	bgt.n	8003b2e <pulse_to_PWM+0x72>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8003b2c:	db05      	blt.n	8003b3a <pulse_to_PWM+0x7e>
		  duty_percent = 100;
 8003b2e:	2364      	movs	r3, #100	@ 0x64
 8003b30:	60bb      	str	r3, [r7, #8]
		  duty_count = 4799;
 8003b32:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	e00c      	b.n	8003b54 <pulse_to_PWM+0x98>
	  }
	  else if (duty_percent < -100 || duty_count < -4799){
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8003b40:	db03      	blt.n	8003b4a <pulse_to_PWM+0x8e>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 8003b48:	dc04      	bgt.n	8003b54 <pulse_to_PWM+0x98>
		  duty_percent = -100;
 8003b4a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8003b4e:	60bb      	str	r3, [r7, #8]
		  duty_count = -4799;
 8003b50:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <pulse_to_PWM+0xa8>)
 8003b52:	613b      	str	r3, [r7, #16]
	  }
	  return duty_count;
 8003b54:	693b      	ldr	r3, [r7, #16]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	7fc01ff1 	.word	0x7fc01ff1
 8003b64:	ffffed41 	.word	0xffffed41

08003b68 <HAL_TIM_IC_CaptureCallback>:
}*/

// Callback Functions

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	rad_edge_flag = 1;
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <HAL_TIM_IC_CaptureCallback+0x28>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
	htim_cb = *htim;
 8003b76:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	2348      	movs	r3, #72	@ 0x48
 8003b80:	461a      	mov	r2, r3
 8003b82:	f006 fce5 	bl	800a550 <memcpy>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200002d8 	.word	0x200002d8
 8003b94:	20000290 	.word	0x20000290

08003b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9c:	b672      	cpsid	i
}
 8003b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <Error_Handler+0x8>

08003ba4 <enable_mot>:
 */


#include "motor_driver.h"

void enable_mot(Motor_DriverTypeDef* mot, uint32_t motor_num){
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	if(motor_num == 1){
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10f      	bne.n	8003bd4 <enable_mot+0x30>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f004 fc38 	bl	8008434 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f004 fc30 	bl	8008434 <HAL_TIM_PWM_Start>
	}
	if(motor_num == 2){
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d10f      	bne.n	8003bfa <enable_mot+0x56>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel3);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f004 fc25 	bl	8008434 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel4);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f004 fc1d 	bl	8008434 <HAL_TIM_PWM_Start>
	}
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <set_PWM_percent>:
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel3);
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel4);
	}
}

void set_PWM_percent(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_cycle){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
	int32_t duty_count = (duty_cycle*(mot->pulse))/100;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	4a07      	ldr	r2, [pc, #28]	@ (8003c38 <set_PWM_percent+0x34>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	617b      	str	r3, [r7, #20]
	set_PWM(mot, motor_num, duty_count);
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f807 	bl	8003c3c <set_PWM>
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <set_PWM>:

void set_PWM(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_count){
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
	if (motor_num == 1){
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d11c      	bne.n	8003c88 <set_PWM+0x4c>
		if (duty_count <= 0){
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	dc0b      	bgt.n	8003c6c <set_PWM+0x30>
			(*(mot->tim_handle)).Instance->CCR1 = -duty_count;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	425a      	negs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = 0;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel3,0);
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel4,duty_count);
		}
	}
}
 8003c6a:	e02c      	b.n	8003cc6 <set_PWM+0x8a>
		else if (duty_count >= 0){
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db29      	blt.n	8003cc6 <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR1 = 0;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = duty_count;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c86:	e01e      	b.n	8003cc6 <set_PWM+0x8a>
	else if (motor_num == 2){
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d11b      	bne.n	8003cc6 <set_PWM+0x8a>
		if (duty_count <= 0){
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dc0b      	bgt.n	8003cac <set_PWM+0x70>
			(*(mot->tim_handle)).Instance->CCR3 = -duty_count;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	425a      	negs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = 0;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003caa:	e00c      	b.n	8003cc6 <set_PWM+0x8a>
		else if (duty_count >= 0){
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db09      	blt.n	8003cc6 <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR3 = 0;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <ADC_Select_CH1>:
 *      Author: cadre
 */

#include "photoresistor_driver.h"

void ADC_Select_CH1(Photoresistor_DriverTypeDef* photo){
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_4;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 8003cec:	2301      	movs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f107 0208 	add.w	r2, r7, #8
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 f80a 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <ADC_Select_CH1+0x3c>
    	 Error_Handler();
 8003d0a:	f7ff ff45 	bl	8003b98 <Error_Handler>
     }
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <ADC_Select_CH2>:

void ADC_Select_CH2 (Photoresistor_DriverTypeDef* photo){
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_5;
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f107 0208 	add.w	r2, r7, #8
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 ffe8 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <ADC_Select_CH2+0x3c>
    	 Error_Handler();
 8003d4e:	f7ff ff23 	bl	8003b98 <Error_Handler>
     }
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <ADC_Select_CH3>:

void ADC_Select_CH3 (Photoresistor_DriverTypeDef* photo){
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_6;
 8003d70:	2306      	movs	r3, #6
 8003d72:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f107 0208 	add.w	r2, r7, #8
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 ffc6 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <ADC_Select_CH3+0x3c>
    	 Error_Handler();
 8003d92:	f7ff ff01 	bl	8003b98 <Error_Handler>
     }
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <ADC_Select_CH4>:

void ADC_Select_CH4 (Photoresistor_DriverTypeDef* photo){
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_7;
 8003db4:	2307      	movs	r3, #7
 8003db6:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 ffa4 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <ADC_Select_CH4+0x3c>
    	 Error_Handler();
 8003dd6:	f7ff fedf 	bl	8003b98 <Error_Handler>
     }
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <get_photo_value>:

uint32_t get_photo_value(Photoresistor_DriverTypeDef* photo, uint8_t num)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	70fb      	strb	r3, [r7, #3]
	if (num == 1){
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d102      	bne.n	8003dfa <get_photo_value+0x18>
		 ADC_Select_CH1(photo);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff6c 	bl	8003cd2 <ADC_Select_CH1>
	}
	if (num == 2){
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d102      	bne.n	8003e06 <get_photo_value+0x24>
		 ADC_Select_CH2(photo);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff88 	bl	8003d16 <ADC_Select_CH2>
	}
	if (num == 3){
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d102      	bne.n	8003e12 <get_photo_value+0x30>
		 ADC_Select_CH3(photo);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffa4 	bl	8003d5a <ADC_Select_CH3>
	}
	if (num == 4){
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d102      	bne.n	8003e1e <get_photo_value+0x3c>
		 ADC_Select_CH4(photo);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ffc0 	bl	8003d9e <ADC_Select_CH4>
	}
	  HAL_ADC_Start(photo->adc_handle);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 fdf8 	bl	8005a18 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(photo->adc_handle, 1000);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fed8 	bl	8005be6 <HAL_ADC_PollForConversion>
	  uint32_t photo_result = HAL_ADC_GetValue(photo->adc_handle);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 ff5e 	bl	8005cfc <HAL_ADC_GetValue>
 8003e40:	60f8      	str	r0, [r7, #12]
	  photo->photo_results[(num-1)] = photo_result;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(photo->adc_handle);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fe90 	bl	8005b80 <HAL_ADC_Stop>
	  return photo_result;
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <get_photo_diff>:

uint32_t get_photo_diff(Photoresistor_DriverTypeDef* photo, uint8_t num1, uint8_t num2)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	70fb      	strb	r3, [r7, #3]
 8003e76:	4613      	mov	r3, r2
 8003e78:	70bb      	strb	r3, [r7, #2]
	uint32_t photo_result1 = get_photo_value(photo,num1);
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ffaf 	bl	8003de2 <get_photo_value>
 8003e84:	60f8      	str	r0, [r7, #12]
	uint32_t photo_result2 = get_photo_value(photo,num2);
 8003e86:	78bb      	ldrb	r3, [r7, #2]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ffa9 	bl	8003de2 <get_photo_value>
 8003e90:	60b8      	str	r0, [r7, #8]
	return (photo_result1-photo_result2);
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1ad3      	subs	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <enable_rad>:
 */

#include <radio_reciever_driver.h>

void enable_rad(RadioReciever_DriverTypeDef* rad)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	// Enabling the rising/falling edge interrupt
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f004 fbc8 	bl	8008648 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f004 fbc0 	bl	8008648 <HAL_TIM_IC_Start_IT>
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <get_pulse>:
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel1);
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel2);
}

uint16_t get_pulse(RadioReciever_DriverTypeDef* rad)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if (rad->pulse_recieve_flag){
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d038      	beq.n	8003f52 <get_pulse+0x82>
		// Calculate pulse width (in us) w/ overflow
		if (rad->IC_Fall < rad->IC_Rise){
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	89da      	ldrh	r2, [r3, #14]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	899b      	ldrh	r3, [r3, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d20a      	bcs.n	8003f02 <get_pulse+0x32>
			rad->IC_Diff = (0xffff - rad->IC_Rise) + rad->IC_Fall;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	89da      	ldrh	r2, [r3, #14]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	899b      	ldrh	r3, [r3, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	821a      	strh	r2, [r3, #16]
 8003f00:	e007      	b.n	8003f12 <get_pulse+0x42>
		}
		else{
			rad->IC_Diff = rad->IC_Fall - rad->IC_Rise;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	89da      	ldrh	r2, [r3, #14]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	899b      	ldrh	r3, [r3, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	821a      	strh	r2, [r3, #16]
		}
		// Manage invalid values
		if (rad->IC_Diff < (2000*(1+rad->tol)) || rad->IC_Diff > (1000*(1-rad->tol))){
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8a1b      	ldrh	r3, [r3, #16]
 8003f16:	4619      	mov	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8a9b      	ldrh	r3, [r3, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	4299      	cmp	r1, r3
 8003f28:	db0c      	blt.n	8003f44 <get_pulse+0x74>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8a1b      	ldrh	r3, [r3, #16]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8a9b      	ldrh	r3, [r3, #20]
 8003f34:	f1c3 0301 	rsb	r3, r3, #1
 8003f38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	4299      	cmp	r1, r3
 8003f42:	dd03      	ble.n	8003f4c <get_pulse+0x7c>
			rad->pulse_width = rad->IC_Diff;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8a1a      	ldrh	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	825a      	strh	r2, [r3, #18]
		}
		rad->pulse_recieve_flag = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	619a      	str	r2, [r3, #24]
	}
	return rad->pulse_width;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8a5b      	ldrh	r3, [r3, #18]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <read_pulse>:

void read_pulse(RadioReciever_DriverTypeDef* rad, TIM_HandleTypeDef* htim)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	if (htim->Instance == rad->tim_handle->Instance && !(rad->pulse_recieve_flag)){
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d11e      	bne.n	8003fb8 <read_pulse+0x56>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11a      	bne.n	8003fb8 <read_pulse+0x56>
		if (rad->rise_flag){
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <read_pulse+0x50>
			rad->IC_Rise = 0;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	819a      	strh	r2, [r3, #12]
			rad->IC_Fall = HAL_TIM_ReadCapturedValue(htim, rad->tim_channel2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4619      	mov	r1, r3
 8003f96:	6838      	ldr	r0, [r7, #0]
 8003f98:	f005 f8fc 	bl	8009194 <HAL_TIM_ReadCapturedValue>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	81da      	strh	r2, [r3, #14]
			rad->pulse_recieve_flag = 1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	619a      	str	r2, [r3, #24]
			rad->rise_flag = 0;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	61da      	str	r2, [r3, #28]
		}
		else{
			rad->rise_flag = 1;
		}
	}
}
 8003fb0:	e002      	b.n	8003fb8 <read_pulse+0x56>
			rad->rise_flag = 1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	61da      	str	r2, [r3, #28]
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <enable_servo>:
 *      Author: evananthony
 */

#include "servo_driver.h"

void enable_servo(Servo_DriverTypeDef* servo){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	// Enables servo motor PWM output channel
	HAL_TIM_PWM_Start(servo->pwmHandle, servo->timer_ch);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f004 fa2e 	bl	8008434 <HAL_TIM_PWM_Start>

}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <servo_get_position>:
	// Disables servo motor PWM output channel
	HAL_TIM_PWM_Stop(servo->pwmHandle, servo->timer_ch);

}

float servo_get_position(Servo_DriverTypeDef* servo){
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	// Gets the current position of the servo relative to the initial position
	float position;
	float PW = (((float)(servo->current_CCR)*20)/(float)(servo->timer_ARR + 1));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003ff8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800400a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400e:	edc7 7a03 	vstr	s15, [r7, #12]
	position = (90*PW) - 135;
 8004012:	edd7 7a03 	vldr	s15, [r7, #12]
 8004016:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004040 <servo_get_position+0x60>
 800401a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004044 <servo_get_position+0x64>
 8004022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004026:	edc7 7a02 	vstr	s15, [r7, #8]
	return position;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	ee07 3a90 	vmov	s15, r3
}
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	42b40000 	.word	0x42b40000
 8004044:	43070000 	.word	0x43070000

08004048 <servo_set_position>:

void servo_set_position(Servo_DriverTypeDef* servo, float angle){
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	ed87 0a00 	vstr	s0, [r7]
	// Sets the current position of the servo to an angle from -90 to 90 degrees

	if (angle > 90){
 8004054:	edd7 7a00 	vldr	s15, [r7]
 8004058:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004148 <servo_set_position+0x100>
 800405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	dd02      	ble.n	800406c <servo_set_position+0x24>
		angle = 90;
 8004066:	4b39      	ldr	r3, [pc, #228]	@ (800414c <servo_set_position+0x104>)
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	e00a      	b.n	8004082 <servo_set_position+0x3a>
	}
	else if (angle < -90){
 800406c:	edd7 7a00 	vldr	s15, [r7]
 8004070:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8004150 <servo_set_position+0x108>
 8004074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d501      	bpl.n	8004082 <servo_set_position+0x3a>
		angle = -90;
 800407e:	4b35      	ldr	r3, [pc, #212]	@ (8004154 <servo_set_position+0x10c>)
 8004080:	603b      	str	r3, [r7, #0]
	}

	float PW = (angle + 135) / 90;
 8004082:	edd7 7a00 	vldr	s15, [r7]
 8004086:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004158 <servo_set_position+0x110>
 800408a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800408e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004148 <servo_set_position+0x100>
 8004092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004096:	edc7 7a03 	vstr	s15, [r7, #12]
	float CCR = (PW * (servo->timer_ARR + 1)) / 20;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80040b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b8:	edc7 7a02 	vstr	s15, [r7, #8]
	servo->current_CCR = (uint32_t)CCR;
 80040bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c4:	ee17 2a90 	vmov	r2, s15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <servo_set_position+0xa2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	edd7 7a02 	vldr	s15, [r7, #8]
 80040de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80040e8:	e027      	b.n	800413a <servo_set_position+0xf2>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d10a      	bne.n	8004108 <servo_set_position+0xc0>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80040fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004100:	ee17 3a90 	vmov	r3, s15
 8004104:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004106:	e018      	b.n	800413a <servo_set_position+0xf2>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d10a      	bne.n	8004126 <servo_set_position+0xde>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	edd7 7a02 	vldr	s15, [r7, #8]
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 3a90 	vmov	r3, s15
 8004122:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004124:	e009      	b.n	800413a <servo_set_position+0xf2>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004134:	ee17 3a90 	vmov	r3, s15
 8004138:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	42b40000 	.word	0x42b40000
 800414c:	42b40000 	.word	0x42b40000
 8004150:	c2b40000 	.word	0xc2b40000
 8004154:	c2b40000 	.word	0xc2b40000
 8004158:	43070000 	.word	0x43070000

0800415c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	4b10      	ldr	r3, [pc, #64]	@ (80041a8 <HAL_MspInit+0x4c>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	4a0f      	ldr	r2, [pc, #60]	@ (80041a8 <HAL_MspInit+0x4c>)
 800416c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004170:	6453      	str	r3, [r2, #68]	@ 0x44
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <HAL_MspInit+0x4c>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_MspInit+0x4c>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <HAL_MspInit+0x4c>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	@ 0x40
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_MspInit+0x4c>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <HAL_ADC_MspInit+0x7c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d127      	bne.n	800421e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	4a15      	ldr	r2, [pc, #84]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041de:	4b13      	ldr	r3, [pc, #76]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	4a0e      	ldr	r2, [pc, #56]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_ADC_MspInit+0x80>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004206:	23f0      	movs	r3, #240	@ 0xf0
 8004208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800420a:	2303      	movs	r3, #3
 800420c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4619      	mov	r1, r3
 8004218:	4805      	ldr	r0, [pc, #20]	@ (8004230 <HAL_ADC_MspInit+0x84>)
 800421a:	f002 f8bd 	bl	8006398 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800421e:	bf00      	nop
 8004220:	3728      	adds	r7, #40	@ 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40012000 	.word	0x40012000
 800422c:	40023800 	.word	0x40023800
 8004230:	40020000 	.word	0x40020000

08004234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	@ 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a19      	ldr	r2, [pc, #100]	@ (80042b8 <HAL_I2C_MspInit+0x84>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d12c      	bne.n	80042b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b15      	ldr	r3, [pc, #84]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004272:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004278:	2312      	movs	r3, #18
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004284:	2304      	movs	r3, #4
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <HAL_I2C_MspInit+0x8c>)
 8004290:	f002 f882 	bl	8006398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	4a07      	ldr	r2, [pc, #28]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 800429e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_I2C_MspInit+0x88>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	@ 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40005400 	.word	0x40005400
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40020400 	.word	0x40020400

080042c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	@ 0x30
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a31      	ldr	r2, [pc, #196]	@ (80043a8 <HAL_TIM_Base_MspInit+0xe4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d135      	bne.n	8004352 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042f6:	4b2d      	ldr	r3, [pc, #180]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4b26      	ldr	r3, [pc, #152]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800431e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004330:	2301      	movs	r3, #1
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	481d      	ldr	r0, [pc, #116]	@ (80043b0 <HAL_TIM_Base_MspInit+0xec>)
 800433c:	f002 f82c 	bl	8006398 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004340:	2200      	movs	r2, #0
 8004342:	2100      	movs	r1, #0
 8004344:	201b      	movs	r0, #27
 8004346:	f001 fff0 	bl	800632a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800434a:	201b      	movs	r0, #27
 800434c:	f002 f809 	bl	8006362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004350:	e026      	b.n	80043a0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d10e      	bne.n	800437a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6413      	str	r3, [r2, #64]	@ 0x40
 800436c:	4b0f      	ldr	r3, [pc, #60]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
}
 8004378:	e012      	b.n	80043a0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM5)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <HAL_TIM_Base_MspInit+0xf0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10d      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	4a07      	ldr	r2, [pc, #28]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	6413      	str	r3, [r2, #64]	@ 0x40
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_TIM_Base_MspInit+0xe8>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3730      	adds	r7, #48	@ 0x30
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40000c00 	.word	0x40000c00

080043b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	@ 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1d      	ldr	r2, [pc, #116]	@ (800444c <HAL_TIM_Encoder_MspInit+0x94>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d133      	bne.n	8004442 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	4b1c      	ldr	r3, [pc, #112]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ea:	4b19      	ldr	r3, [pc, #100]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 8004400:	f043 0302 	orr.w	r3, r3, #2
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30
 8004406:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <HAL_TIM_Encoder_MspInit+0x98>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004412:	23c0      	movs	r3, #192	@ 0xc0
 8004414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004422:	2302      	movs	r3, #2
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	4619      	mov	r1, r3
 800442c:	4809      	ldr	r0, [pc, #36]	@ (8004454 <HAL_TIM_Encoder_MspInit+0x9c>)
 800442e:	f001 ffb3 	bl	8006398 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	201e      	movs	r0, #30
 8004438:	f001 ff77 	bl	800632a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800443c:	201e      	movs	r0, #30
 800443e:	f001 ff90 	bl	8006362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	@ 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40000800 	.word	0x40000800
 8004450:	40023800 	.word	0x40023800
 8004454:	40020400 	.word	0x40020400

08004458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d11e      	bne.n	80044b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6313      	str	r3, [r2, #48]	@ 0x30
 800448a:	4b1f      	ldr	r3, [pc, #124]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004496:	2303      	movs	r3, #3
 8004498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044a6:	2301      	movs	r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4619      	mov	r1, r3
 80044b0:	4816      	ldr	r0, [pc, #88]	@ (800450c <HAL_TIM_MspPostInit+0xb4>)
 80044b2:	f001 ff71 	bl	8006398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80044b6:	e022      	b.n	80044fe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <HAL_TIM_MspPostInit+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d11d      	bne.n	80044fe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <HAL_TIM_MspPostInit+0xb0>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044de:	2308      	movs	r3, #8
 80044e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80044ee:	2302      	movs	r3, #2
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4619      	mov	r1, r3
 80044f8:	4804      	ldr	r0, [pc, #16]	@ (800450c <HAL_TIM_MspPostInit+0xb4>)
 80044fa:	f001 ff4d 	bl	8006398 <HAL_GPIO_Init>
}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	@ 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	40000c00 	.word	0x40000c00

08004514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	@ 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <HAL_UART_MspInit+0x84>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d12b      	bne.n	800458e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	4b18      	ldr	r3, [pc, #96]	@ (800459c <HAL_UART_MspInit+0x88>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	4a17      	ldr	r2, [pc, #92]	@ (800459c <HAL_UART_MspInit+0x88>)
 8004540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004544:	6413      	str	r3, [r2, #64]	@ 0x40
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_UART_MspInit+0x88>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	4b11      	ldr	r3, [pc, #68]	@ (800459c <HAL_UART_MspInit+0x88>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4a10      	ldr	r2, [pc, #64]	@ (800459c <HAL_UART_MspInit+0x88>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6313      	str	r3, [r2, #48]	@ 0x30
 8004562:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <HAL_UART_MspInit+0x88>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800456e:	2304      	movs	r3, #4
 8004570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004572:	2312      	movs	r3, #18
 8004574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800457e:	2307      	movs	r3, #7
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	4619      	mov	r1, r3
 8004588:	4805      	ldr	r0, [pc, #20]	@ (80045a0 <HAL_UART_MspInit+0x8c>)
 800458a:	f001 ff05 	bl	8006398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800458e:	bf00      	nop
 8004590:	3728      	adds	r7, #40	@ 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40004400 	.word	0x40004400
 800459c:	40023800 	.word	0x40023800
 80045a0:	40020000 	.word	0x40020000

080045a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <NMI_Handler+0x4>

080045ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <HardFault_Handler+0x4>

080045b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <MemManage_Handler+0x4>

080045bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <BusFault_Handler+0x4>

080045c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <UsageFault_Handler+0x4>

080045cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045fa:	f001 f985 	bl	8005908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004608:	4802      	ldr	r0, [pc, #8]	@ (8004614 <TIM1_CC_IRQHandler+0x10>)
 800460a:	f004 fa6b 	bl	8008ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000128 	.word	0x20000128

08004618 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800461c:	4802      	ldr	r0, [pc, #8]	@ (8004628 <TIM4_IRQHandler+0x10>)
 800461e:	f004 fa61 	bl	8008ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200001b8 	.word	0x200001b8

0800462c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <_sbrk+0x5c>)
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <_sbrk+0x60>)
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004640:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <_sbrk+0x64>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004648:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <_sbrk+0x64>)
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <_sbrk+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800464e:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <_sbrk+0x64>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d207      	bcs.n	800466c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800465c:	f005 ff4c 	bl	800a4f8 <__errno>
 8004660:	4603      	mov	r3, r0
 8004662:	220c      	movs	r2, #12
 8004664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	e009      	b.n	8004680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <_sbrk+0x64>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <_sbrk+0x64>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	4a05      	ldr	r2, [pc, #20]	@ (8004690 <_sbrk+0x64>)
 800467c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20020000 	.word	0x20020000
 800468c:	00000400 	.word	0x00000400
 8004690:	200002dc 	.word	0x200002dc
 8004694:	20000430 	.word	0x20000430

08004698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800469c:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <SystemInit+0x20>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	4a05      	ldr	r2, [pc, #20]	@ (80046b8 <SystemInit+0x20>)
 80046a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <main_task1>:
 */

#include <task1.h>

void main_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
	if(task->state == 0){
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <main_task1+0x1c>
		state0_task1(task, intertask_vars);
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f816 	bl	8004702 <state0_task1>
		state1_task1(task, intertask_vars);
	}
	else if(task->state == 2){
		state2_task1(task, intertask_vars);
	}
}
 80046d6:	e010      	b.n	80046fa <main_task1+0x3e>
	else if(task->state == 1){
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d104      	bne.n	80046ea <main_task1+0x2e>
		state1_task1(task, intertask_vars);
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f81e 	bl	8004724 <state1_task1>
}
 80046e8:	e007      	b.n	80046fa <main_task1+0x3e>
	else if(task->state == 2){
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d103      	bne.n	80046fa <main_task1+0x3e>
		state2_task1(task, intertask_vars);
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f840 	bl	800477a <state2_task1>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <state0_task1>:

void state0_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
	// Initializing the radio receiver
	enable_rad(task->rad);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbc5 	bl	8003ea0 <enable_rad>
	task->state = 1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <state1_task1>:

void state1_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	// Reading the value of the Radio Receiver after each period
	if (*(intertask_vars->rad_edge_flag)){
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <state1_task1+0x2c>
		read_pulse(task->rad, intertask_vars->htim_cb); // EDIT: This should work bc the address is stored in htim_cb within the interstae_vars struct, not the value. So when the value is changed in the interrupt in main, it should read the value at the register
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7ff fc0d 	bl	8003f62 <read_pulse>
		*(intertask_vars->rad_edge_flag) = 0;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
	}
	// Checking if the value is greater than 50% of its max (1750)
	if (abs(get_pulse_percent(task->rad)) > 50){
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f83b 	bl	80047d0 <get_pulse_percent>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	bfb8      	it	lt
 8004760:	425b      	neglt	r3, r3
 8004762:	2b32      	cmp	r3, #50	@ 0x32
 8004764:	dd05      	ble.n	8004772 <state1_task1+0x4e>
		intertask_vars->rc_trigger_flag = 1;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
		task->state = 2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
	}
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <state2_task1>:

void state2_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
	// Reading the value of the Radio Receiver after each period
	if (*(intertask_vars->rad_edge_flag)){
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <state2_task1+0x2c>
		read_pulse(task->rad, intertask_vars->htim_cb); // EDIT: This should work bc the address is stored in htim_cb within the interstae_vars struct, not the value. So when the value is changed in the interrupt in main, it should read the value at the register
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7ff fbe2 	bl	8003f62 <read_pulse>
		*(intertask_vars->rad_edge_flag) = 0;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
	}
	// Checking if the value is less than 50% of its max (1750)
	if (abs(get_pulse_percent(task->rad)) < 50){
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f810 	bl	80047d0 <get_pulse_percent>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	425b      	neglt	r3, r3
 80047b8:	2b31      	cmp	r3, #49	@ 0x31
 80047ba:	dc05      	bgt.n	80047c8 <state2_task1+0x4e>
		intertask_vars->rc_trigger_flag = 0;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
		task->state = 1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
	}
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <get_pulse_percent>:

int32_t get_pulse_percent(RadioReciever_DriverTypeDef* rad)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	  // Calculates the radio pulse as a percent
	  uint32_t pulse_rad = get_pulse(rad);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fb79 	bl	8003ed0 <get_pulse>
 80047de:	4603      	mov	r3, r0
 80047e0:	60fb      	str	r3, [r7, #12]
	  if (abs(pulse_rad) < 10){
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f113 0f09 	cmn.w	r3, #9
 80047e8:	db05      	blt.n	80047f6 <get_pulse_percent+0x26>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	dc02      	bgt.n	80047f6 <get_pulse_percent+0x26>
		  pulse_rad = 1509;
 80047f0:	f240 53e5 	movw	r3, #1509	@ 0x5e5
 80047f4:	60fb      	str	r3, [r7, #12]
	  }
	  int32_t duty_percent = (int32_t)((pulse_rad-1509)*100)/513;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2264      	movs	r2, #100	@ 0x64
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	f5a3 3313 	sub.w	r3, r3, #150528	@ 0x24c00
 8004802:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004806:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <get_pulse_percent+0x68>)
 8004808:	fb82 1203 	smull	r1, r2, r2, r3
 800480c:	1212      	asrs	r2, r2, #8
 800480e:	17db      	asrs	r3, r3, #31
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	60bb      	str	r3, [r7, #8]
	  if (duty_percent > 100){
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	dd02      	ble.n	8004820 <get_pulse_percent+0x50>
		  duty_percent = 100;
 800481a:	2364      	movs	r3, #100	@ 0x64
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	e006      	b.n	800482e <get_pulse_percent+0x5e>
	  }
	  else if (duty_percent < -100){
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8004826:	da02      	bge.n	800482e <get_pulse_percent+0x5e>
		  duty_percent = -100;
 8004828:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800482c:	60bb      	str	r3, [r7, #8]
	  }
	  return duty_percent;
 800482e:	68bb      	ldr	r3, [r7, #8]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	7fc01ff1 	.word	0x7fc01ff1

0800483c <main_task2>:
 */

#include <task2.h>

void main_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	if(task->state == 0){
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <main_task2+0x1c>
		state0_task2(task, intertask_vars);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f855 	bl	8004900 <state0_task2>
		state8_task2(task, intertask_vars);
	}
	else if(task->state == 9){
		state9_task2(task, intertask_vars);
	}
}
 8004856:	e04f      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 1){
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d104      	bne.n	800486a <main_task2+0x2e>
		state1_task2(task, intertask_vars);
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f89a 	bl	800499c <state1_task2>
}
 8004868:	e046      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 2){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d104      	bne.n	800487c <main_task2+0x40>
		state2_task2(task, intertask_vars);
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8a3 	bl	80049c0 <state2_task2>
}
 800487a:	e03d      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 3){
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d104      	bne.n	800488e <main_task2+0x52>
		state3_task2(task, intertask_vars);
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f962 	bl	8004b50 <state3_task2>
}
 800488c:	e034      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 4){
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d104      	bne.n	80048a0 <main_task2+0x64>
		state4_task2(task, intertask_vars);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f9e3 	bl	8004c64 <state4_task2>
}
 800489e:	e02b      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 5){
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d104      	bne.n	80048b2 <main_task2+0x76>
		state5_task2(task, intertask_vars);
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 face 	bl	8004e4c <state5_task2>
}
 80048b0:	e022      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 6){
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d104      	bne.n	80048c4 <main_task2+0x88>
		state6_task2(task, intertask_vars);
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb7f 	bl	8004fc0 <state6_task2>
}
 80048c2:	e019      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 7){
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b07      	cmp	r3, #7
 80048ca:	d104      	bne.n	80048d6 <main_task2+0x9a>
		state7_task2(task, intertask_vars);
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fc4a 	bl	8005168 <state7_task2>
}
 80048d4:	e010      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 8){
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d104      	bne.n	80048e8 <main_task2+0xac>
		state8_task2(task, intertask_vars);
 80048de:	6839      	ldr	r1, [r7, #0]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fcfd 	bl	80052e0 <state8_task2>
}
 80048e6:	e007      	b.n	80048f8 <main_task2+0xbc>
	else if(task->state == 9){
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	d103      	bne.n	80048f8 <main_task2+0xbc>
		state9_task2(task, intertask_vars);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd18 	bl	8005328 <state9_task2>
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <state0_task2>:

void state0_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af02      	add	r7, sp, #8
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	// Initializing the motor
	enable_mot(task->mot,1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff f947 	bl	8003ba4 <enable_mot>
	set_PWM_percent(task->mot, 1, 0);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f970 	bl	8003c04 <set_PWM_percent>

	// Initializng the servo
	enable_servo(task->servo);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fb49 	bl	8003fc0 <enable_servo>
	// Setting the servo position to vertical
	servo_set_position(task->servo, 0);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004998 <state0_task2+0x98>
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fb86 	bl	8004048 <servo_set_position>

	// Initializing the photoresistors

	// Initializing the encoder
	enable_enc(task->enc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f8ab 	bl	8002a9c <enable_enc>
	set_zero(task->enc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f8b4 	bl	8002ab8 <set_zero>

	// Initializing the IMU gyroscope
	//bno055_init(task->gyro);

	if (bno055_init(task->gyro) == BNO_OK) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fc fb17 	bl	8000f88 <bno055_init>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <state0_task2+0x68>

		HAL_Delay(100);
 8004960:	2064      	movs	r0, #100	@ 0x64
 8004962:	f000 fff1 	bl	8005948 <HAL_Delay>
 8004966:	e001      	b.n	800496c <state0_task2+0x6c>
	}
	else {
	    Error_Handler(); // NOTE: A common reason for this running is a short internally in the IMU. Unplug and replug the Vin or Gnd to reset.
 8004968:	f7ff f916 	bl	8003b98 <Error_Handler>
	}
	bno055_set_unit(task->gyro, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6998      	ldr	r0, [r3, #24]
 8004970:	2300      	movs	r3, #0
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	2200      	movs	r2, #0
 8004978:	2100      	movs	r1, #0
 800497a:	f7fd fdcf 	bl	800251c <bno055_set_unit>

	// Initializing the controller
	reset_controller(task->con);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd ffae 	bl	80028e4 <reset_controller>

	task->state = 1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	00000000 	.word	0x00000000

0800499c <state1_task2>:

void state1_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	if (intertask_vars->rc_trigger_flag){
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <state1_task2+0x18>
		task->state = 2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	701a      	strb	r2, [r3, #0]
	}
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <state2_task2>:

void state2_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <state2_task2+0x1a>
		task->state = 8;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2208      	movs	r2, #8
 80049d6:	701a      	strb	r2, [r3, #0]
				task->high_light = curr_light;
				task->high_angle = pitch_angle;
			}
		}
	}
}
 80049d8:	e0b0      	b.n	8004b3c <state2_task2+0x17c>
		if (task->init_controller){
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <state2_task2+0x5c>
			reset_controller(task->con);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd ff7b 	bl	80028e4 <reset_controller>
			set_gains(task->con, 25, 15, 0.75);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 80049f6:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80049fa:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd ff98 	bl	8002934 <set_gains>
			set_target(task->con, 355);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8004b44 <state2_task2+0x184>
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd ffaa 	bl	8002966 <set_target>
			task->init_controller = 0;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004a1a:	e08f      	b.n	8004b3c <state2_task2+0x17c>
			servo_set_position(task->servo, 60);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8004b48 <state2_task2+0x188>
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fb0f 	bl	8004048 <servo_set_position>
			bno055_euler(task->gyro, task->euler);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fd fa5f 	bl	8001ef8 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	617b      	str	r3, [r7, #20]
			task->output = get_output(task->con, pitch_angle);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	ed97 0a05 	vldr	s0, [r7, #20]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd ff9a 	bl	8002984 <get_output>
 8004a50:	eef0 7a40 	vmov.f32	s15, s0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			set_PWM(task->mot, 1, task->output);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6858      	ldr	r0, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a68:	ee17 2a90 	vmov	r2, s15
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	f7ff f8e5 	bl	8003c3c <set_PWM>
			if (abs((int32_t)(pitch_angle - 350)) < 15){
 8004a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a76:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8004b4c <state2_task2+0x18c>
 8004a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a82:	ee17 3a90 	vmov	r3, s15
 8004a86:	f113 0f0e 	cmn.w	r3, #14
 8004a8a:	db3f      	blt.n	8004b0c <state2_task2+0x14c>
 8004a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a90:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004b4c <state2_task2+0x18c>
 8004a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a9c:	ee17 3a90 	vmov	r3, s15
 8004aa0:	2b0e      	cmp	r3, #14
 8004aa2:	dc33      	bgt.n	8004b0c <state2_task2+0x14c>
				uint32_t curr_time = HAL_GetTick();
 8004aa4:	f000 ff44 	bl	8005930 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]
				if (!task->within_range){
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <state2_task2+0x108>
					task->end_time = curr_time + 2500;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f603 12c4 	addw	r2, r3, #2500	@ 0x9c4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			if (abs((int32_t)(pitch_angle - 350)) < 15){
 8004ac6:	e026      	b.n	8004b16 <state2_task2+0x156>
				else if (curr_time > task->end_time && task->within_range){
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d921      	bls.n	8004b16 <state2_task2+0x156>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <state2_task2+0x156>
					task->within_range = 0;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2101      	movs	r1, #1
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f8a5 	bl	8003c3c <set_PWM>
					reset_controller(task->con);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd fef4 	bl	80028e4 <reset_controller>
					task->init_controller = 1;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 3;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2203      	movs	r2, #3
 8004b08:	701a      	strb	r2, [r3, #0]
			if (abs((int32_t)(pitch_angle - 350)) < 15){
 8004b0a:	e004      	b.n	8004b16 <state2_task2+0x156>
				task->within_range = 0;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004b14:	e000      	b.n	8004b18 <state2_task2+0x158>
			if (abs((int32_t)(pitch_angle - 350)) < 15){
 8004b16:	bf00      	nop
			uint32_t curr_light = get_photo_value(task->photo, 2); // NOTE: Use the photoresistor on the top when vertical?
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff f95f 	bl	8003de2 <get_photo_value>
 8004b24:	60f8      	str	r0, [r7, #12]
			if (curr_light > task->high_light){
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d905      	bls.n	8004b3c <state2_task2+0x17c>
				task->high_light = curr_light;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	631a      	str	r2, [r3, #48]	@ 0x30
				task->high_angle = pitch_angle;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	43b18000 	.word	0x43b18000
 8004b48:	42700000 	.word	0x42700000
 8004b4c:	43af0000 	.word	0x43af0000

08004b50 <state3_task2>:

void state3_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <state3_task2+0x1a>
		task->state = 8;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	701a      	strb	r2, [r3, #0]
				task->init_controller = 1;
				task->state = 4;
			}
		}
	}
}
 8004b68:	e075      	b.n	8004c56 <state3_task2+0x106>
		if (task->init_controller){
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01e      	beq.n	8004bb2 <state3_task2+0x62>
			reset_controller(task->con);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd feb3 	bl	80028e4 <reset_controller>
			set_gains(task->con, 40, 15, 0.75);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 8004b86:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8004b8a:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8004c60 <state3_task2+0x110>
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fed0 	bl	8002934 <set_gains>
			set_target(task->con, task->high_angle);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fd fedf 	bl	8002966 <set_target>
			task->init_controller = 0;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004bb0:	e051      	b.n	8004c56 <state3_task2+0x106>
			bno055_euler(task->gyro, task->euler);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fd f99b 	bl	8001ef8 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	60fb      	str	r3, [r7, #12]
			task->output = get_output(task->con, pitch_angle);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	ed97 0a03 	vldr	s0, [r7, #12]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd fed6 	bl	8002984 <get_output>
 8004bd8:	eef0 7a40 	vmov.f32	s15, s0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			set_PWM(task->mot, 1, task->output);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6858      	ldr	r0, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bf0:	ee17 2a90 	vmov	r2, s15
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	f7ff f821 	bl	8003c3c <set_PWM>
			if (abs((int32_t)(pitch_angle - task->high_angle)) < 15){
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0c:	ee17 3a90 	vmov	r3, s15
 8004c10:	f113 0f0e 	cmn.w	r3, #14
 8004c14:	db1f      	blt.n	8004c56 <state3_task2+0x106>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c28:	ee17 3a90 	vmov	r3, s15
 8004c2c:	2b0e      	cmp	r3, #14
 8004c2e:	dc12      	bgt.n	8004c56 <state3_task2+0x106>
				set_PWM(task->mot, 1, 0);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2101      	movs	r1, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe ffff 	bl	8003c3c <set_PWM>
				reset_controller(task->con);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd fe4e 	bl	80028e4 <reset_controller>
				task->init_controller = 1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2020 	strb.w	r2, [r3, #32]
				task->state = 4;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2204      	movs	r2, #4
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	42200000 	.word	0x42200000

08004c64 <state4_task2>:

void state4_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <state4_task2+0x1a>
		task->state = 8;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 8004c7c:	e0df      	b.n	8004e3e <state4_task2+0x1da>
		if (task->init_controller){
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <state4_task2+0x5c>
			reset_controller(task->con);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fd fe29 	bl	80028e4 <reset_controller>
			set_gains(task->con, 16, 0, 0);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	ed9f 1a6c 	vldr	s2, [pc, #432]	@ 8004e48 <state4_task2+0x1e4>
 8004c9a:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8004e48 <state4_task2+0x1e4>
 8004c9e:	eeb3 0a00 	vmov.f32	s0, #48	@ 0x41800000  16.0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fe46 	bl	8002934 <set_gains>
			set_target(task->con, 0); // 50 offset from photoresistor imperfections
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8004e48 <state4_task2+0x1e4>
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd fe58 	bl	8002966 <set_target>
			task->init_controller = 0;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004cbe:	e0be      	b.n	8004e3e <state4_task2+0x1da>
			uint32_t voltage1 = get_photo_value(task->photo,1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff f88b 	bl	8003de2 <get_photo_value>
 8004ccc:	6178      	str	r0, [r7, #20]
			uint32_t voltage2 = get_photo_value(task->photo,2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff f884 	bl	8003de2 <get_photo_value>
 8004cda:	6138      	str	r0, [r7, #16]
			float voltage_dif = ((float)voltage2-(float)voltage1);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (task->voltage_dif_count < 2){
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d811      	bhi.n	8004d26 <state4_task2+0xc2>
				task->voltage_dif_list[task->voltage_dif_count] = voltage_dif;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]
				task->voltage_dif_count++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004d24:	e029      	b.n	8004d7a <state4_task2+0x116>
			else if (task->voltage_dif_count == 2){
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d124      	bne.n	8004d7a <state4_task2+0x116>
				task->voltage_dif_avg = (task->voltage_dif_list[0]+task->voltage_dif_list[1])/2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d34:	ed93 7a00 	vldr	s14, [r3]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d46:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				task->output = get_output(task->con, task->voltage_dif_avg);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fd fe0e 	bl	8002984 <get_output>
 8004d68:	eef0 7a40 	vmov.f32	s15, s0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				task->voltage_dif_count = 0;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			set_PWM(task->mot, 1, task->output);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6858      	ldr	r0, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d88:	ee17 2a90 	vmov	r2, s15
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	f7fe ff55 	bl	8003c3c <set_PWM>
			if (abs((int32_t)(0-task->voltage_dif_avg)) < 75){
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004d98:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004e48 <state4_task2+0x1e4>
 8004d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004da4:	ee17 3a90 	vmov	r3, s15
 8004da8:	f113 0f4a 	cmn.w	r3, #74	@ 0x4a
 8004dac:	db41      	blt.n	8004e32 <state4_task2+0x1ce>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004db4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004e48 <state4_task2+0x1e4>
 8004db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc0:	ee17 3a90 	vmov	r3, s15
 8004dc4:	2b4a      	cmp	r3, #74	@ 0x4a
 8004dc6:	dc34      	bgt.n	8004e32 <state4_task2+0x1ce>
				uint32_t curr_time = HAL_GetTick();
 8004dc8:	f000 fdb2 	bl	8005930 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]
				if (!task->within_range){
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <state4_task2+0x18a>
					task->end_time = curr_time + 5000;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004dde:	3308      	adds	r3, #8
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
					task->within_range = 1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			if (abs((int32_t)(0-task->voltage_dif_avg)) < 75){
 8004dec:	e026      	b.n	8004e3c <state4_task2+0x1d8>
				else if (curr_time > task->end_time && task->within_range){
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d921      	bls.n	8004e3c <state4_task2+0x1d8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01c      	beq.n	8004e3c <state4_task2+0x1d8>
					task->within_range = 0;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe ff12 	bl	8003c3c <set_PWM>
					reset_controller(task->con);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fd61 	bl	80028e4 <reset_controller>
					task->init_controller = 1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 5;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2205      	movs	r2, #5
 8004e2e:	701a      	strb	r2, [r3, #0]
			if (abs((int32_t)(0-task->voltage_dif_avg)) < 75){
 8004e30:	e004      	b.n	8004e3c <state4_task2+0x1d8>
				task->within_range = 0;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8004e3a:	e000      	b.n	8004e3e <state4_task2+0x1da>
			if (abs((int32_t)(0-task->voltage_dif_avg)) < 75){
 8004e3c:	bf00      	nop
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	00000000 	.word	0x00000000

08004e4c <state5_task2>:

void state5_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <state5_task2+0x1a>
		task->state = 8;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 8004e64:	e0a2      	b.n	8004fac <state5_task2+0x160>
		if (task->init_controller){
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <state5_task2+0x5c>
			reset_controller(task->con);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fd fd35 	bl	80028e4 <reset_controller>
			set_gains(task->con, 0.0005, 0, 0);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8004fb4 <state5_task2+0x168>
 8004e82:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8004fb4 <state5_task2+0x168>
 8004e86:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8004fb8 <state5_task2+0x16c>
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fd52 	bl	8002934 <set_gains>
			set_target(task->con, 0);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8004fb4 <state5_task2+0x168>
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fd64 	bl	8002966 <set_target>
			task->init_controller = 0;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004ea6:	e081      	b.n	8004fac <state5_task2+0x160>
			uint32_t voltage1 = get_photo_value(task->photo,2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2102      	movs	r1, #2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe ff97 	bl	8003de2 <get_photo_value>
 8004eb4:	61f8      	str	r0, [r7, #28]
			uint32_t voltage2 = get_photo_value(task->photo,4);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2104      	movs	r1, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe ff90 	bl	8003de2 <get_photo_value>
 8004ec2:	61b8      	str	r0, [r7, #24]
			float voltage_dif = ((float)voltage2-(float)voltage1);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004edc:	edc7 7a05 	vstr	s15, [r7, #20]
			task->output = get_output(task->con, voltage_dif);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	ed97 0a05 	vldr	s0, [r7, #20]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd fd4b 	bl	8002984 <get_output>
 8004eee:	eef0 7a40 	vmov.f32	s15, s0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			float servo_current_position = servo_get_position(task->servo);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f86f 	bl	8003fe0 <servo_get_position>
 8004f02:	ed87 0a04 	vstr	s0, [r7, #16]
			servo_set_position(task->servo, servo_current_position+task->output);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8004f10:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f18:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f7ff f893 	bl	8004048 <servo_set_position>
			if (abs((int32_t)voltage_dif) < 100){
 8004f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f2a:	ee17 3a90 	vmov	r3, s15
 8004f2e:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8004f32:	db35      	blt.n	8004fa0 <state5_task2+0x154>
 8004f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3c:	ee17 3a90 	vmov	r3, s15
 8004f40:	2b63      	cmp	r3, #99	@ 0x63
 8004f42:	dc2d      	bgt.n	8004fa0 <state5_task2+0x154>
				uint32_t curr_time = HAL_GetTick();
 8004f44:	f000 fcf4 	bl	8005930 <HAL_GetTick>
 8004f48:	60f8      	str	r0, [r7, #12]
				if (!task->within_range){
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <state5_task2+0x11e>
					task->end_time = curr_time + 5000;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
					task->within_range = 1;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			if (abs((int32_t)voltage_dif) < 100){
 8004f68:	e01f      	b.n	8004faa <state5_task2+0x15e>
				else if (curr_time > task->end_time && task->within_range){
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d91a      	bls.n	8004faa <state5_task2+0x15e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d015      	beq.n	8004faa <state5_task2+0x15e>
					task->within_range = 0;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					reset_controller(task->con);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fcaa 	bl	80028e4 <reset_controller>
					task->init_controller = 1;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 6;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	701a      	strb	r2, [r3, #0]
			if (abs((int32_t)voltage_dif) < 100){
 8004f9e:	e004      	b.n	8004faa <state5_task2+0x15e>
				task->within_range = 0;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8004fa8:	e000      	b.n	8004fac <state5_task2+0x160>
			if (abs((int32_t)voltage_dif) < 100){
 8004faa:	bf00      	nop
}
 8004fac:	bf00      	nop
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	3a03126f 	.word	0x3a03126f
 8004fbc:	00000000 	.word	0x00000000

08004fc0 <state6_task2>:

void state6_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b08d      	sub	sp, #52	@ 0x34
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <state6_task2+0x1a>
		task->state = 8;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	701a      	strb	r2, [r3, #0]
		task->reflect_angle.x = task->reflect_angle.x*180/M_PI;
		task->reflect_angle.y = task->reflect_angle.y*180/M_PI;
		task->reflect_angle.z = task->reflect_angle.z*180/M_PI;
		task->state = 7;
	}
}
 8004fd8:	e0b4      	b.n	8005144 <state6_task2+0x184>
		bno055_euler(task->gyro, task->euler);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fc ff87 	bl	8001ef8 <bno055_euler>
		VectorTypeDef light_source_angle = { .x = task->euler->pitch*M_PI/180,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fb fab1 	bl	8000558 <__aeabi_f2d>
 8004ff6:	a356      	add	r3, pc, #344	@ (adr r3, 8005150 <state6_task2+0x190>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb fb04 	bl	8000608 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	4b52      	ldr	r3, [pc, #328]	@ (8005158 <state6_task2+0x198>)
 800500e:	f7fb fc25 	bl	800085c <__aeabi_ddiv>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	f7fb fded 	bl	8000bf8 <__aeabi_d2f>
 800501e:	4603      	mov	r3, r0
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	62bb      	str	r3, [r7, #40]	@ 0x28
											 .z = task->euler->roll*M_PI/180 };
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fb fa92 	bl	8000558 <__aeabi_f2d>
 8005034:	a346      	add	r3, pc, #280	@ (adr r3, 8005150 <state6_task2+0x190>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb fae5 	bl	8000608 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <state6_task2+0x198>)
 800504c:	f7fb fc06 	bl	800085c <__aeabi_ddiv>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	f7fb fdce 	bl	8000bf8 <__aeabi_d2f>
 800505c:	4603      	mov	r3, r0
		VectorTypeDef light_source_angle = { .x = task->euler->pitch*M_PI/180,
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VectorTypeDef target_position = { .x = -10,
 8005060:	4a3e      	ldr	r2, [pc, #248]	@ (800515c <state6_task2+0x19c>)
 8005062:	f107 0318 	add.w	r3, r7, #24
 8005066:	ca07      	ldmia	r2, {r0, r1, r2}
 8005068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		VectorTypeDef heliostat_position = { .x = 0,
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <state6_task2+0x1a0>)
 800507a:	617b      	str	r3, [r7, #20]
		task->reflect_angle = get_reflect_angle(&light_source_angle, &target_position, &heliostat_position);
 800507c:	687c      	ldr	r4, [r7, #4]
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	f107 0118 	add.w	r1, r7, #24
 8005086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa00 	bl	8005490 <get_reflect_angle>
 8005090:	eef0 6a40 	vmov.f32	s13, s0
 8005094:	eeb0 7a60 	vmov.f32	s14, s1
 8005098:	eef0 7a41 	vmov.f32	s15, s2
 800509c:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
 80050a0:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
 80050a4:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
		task->reflect_angle.x = task->reflect_angle.x*180/M_PI;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80050ae:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8005164 <state6_task2+0x1a4>
 80050b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b6:	ee17 0a90 	vmov	r0, s15
 80050ba:	f7fb fa4d 	bl	8000558 <__aeabi_f2d>
 80050be:	a324      	add	r3, pc, #144	@ (adr r3, 8005150 <state6_task2+0x190>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb fbca 	bl	800085c <__aeabi_ddiv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7fb fd92 	bl	8000bf8 <__aeabi_d2f>
 80050d4:	4602      	mov	r2, r0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38
		task->reflect_angle.y = task->reflect_angle.y*180/M_PI;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80050e0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005164 <state6_task2+0x1a4>
 80050e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e8:	ee17 0a90 	vmov	r0, s15
 80050ec:	f7fb fa34 	bl	8000558 <__aeabi_f2d>
 80050f0:	a317      	add	r3, pc, #92	@ (adr r3, 8005150 <state6_task2+0x190>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb fbb1 	bl	800085c <__aeabi_ddiv>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	f7fb fd79 	bl	8000bf8 <__aeabi_d2f>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	63da      	str	r2, [r3, #60]	@ 0x3c
		task->reflect_angle.z = task->reflect_angle.z*180/M_PI;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005112:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005164 <state6_task2+0x1a4>
 8005116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800511a:	ee17 0a90 	vmov	r0, s15
 800511e:	f7fb fa1b 	bl	8000558 <__aeabi_f2d>
 8005122:	a30b      	add	r3, pc, #44	@ (adr r3, 8005150 <state6_task2+0x190>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb fb98 	bl	800085c <__aeabi_ddiv>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	f7fb fd60 	bl	8000bf8 <__aeabi_d2f>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	@ 0x40
		task->state = 7;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2207      	movs	r2, #7
 8005142:	701a      	strb	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3734      	adds	r7, #52	@ 0x34
 8005148:	46bd      	mov	sp, r7
 800514a:	bd90      	pop	{r4, r7, pc}
 800514c:	f3af 8000 	nop.w
 8005150:	54442d18 	.word	0x54442d18
 8005154:	400921fb 	.word	0x400921fb
 8005158:	40668000 	.word	0x40668000
 800515c:	0800d978 	.word	0x0800d978
 8005160:	c1200000 	.word	0xc1200000
 8005164:	43340000 	.word	0x43340000

08005168 <state7_task2>:

void state7_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <state7_task2+0x1a>
		task->state = 8;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2208      	movs	r2, #8
 800517e:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 8005180:	e0a7      	b.n	80052d2 <state7_task2+0x16a>
		if (task->init_controller){
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01e      	beq.n	80051ca <state7_task2+0x62>
			reset_controller(task->con);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4618      	mov	r0, r3
 8005192:	f7fd fba7 	bl	80028e4 <reset_controller>
			set_gains(task->con, 25, 15, 0.65);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 80052dc <state7_task2+0x174>
 800519e:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80051a2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fbc4 	bl	8002934 <set_gains>
			set_target(task->con, task->reflect_angle.z);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80051b6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ba:	4610      	mov	r0, r2
 80051bc:	f7fd fbd3 	bl	8002966 <set_target>
			task->init_controller = 0;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80051c8:	e083      	b.n	80052d2 <state7_task2+0x16a>
			servo_set_position(task->servo, task->reflect_angle.x);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80051d4:	eeb0 0a67 	vmov.f32	s0, s15
 80051d8:	4610      	mov	r0, r2
 80051da:	f7fe ff35 	bl	8004048 <servo_set_position>
			bno055_euler(task->gyro, task->euler);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f7fc fe85 	bl	8001ef8 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60fb      	str	r3, [r7, #12]
			task->output = get_output(task->con, pitch_angle);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd fbc0 	bl	8002984 <get_output>
 8005204:	eef0 7a40 	vmov.f32	s15, s0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			set_PWM(task->mot, 1, task->output);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6858      	ldr	r0, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800521c:	ee17 2a90 	vmov	r2, s15
 8005220:	2101      	movs	r1, #1
 8005222:	f7fe fd0b 	bl	8003c3c <set_PWM>
			if (abs((int32_t)(pitch_angle - task->reflect_angle.z)) < 2.5){
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800522c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005238:	ee17 3a90 	vmov	r3, s15
 800523c:	f113 0f02 	cmn.w	r3, #2
 8005240:	db41      	blt.n	80052c6 <state7_task2+0x15e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005248:	ed97 7a03 	vldr	s14, [r7, #12]
 800524c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005254:	ee17 3a90 	vmov	r3, s15
 8005258:	2b02      	cmp	r3, #2
 800525a:	dc34      	bgt.n	80052c6 <state7_task2+0x15e>
				uint32_t curr_time = HAL_GetTick();
 800525c:	f000 fb68 	bl	8005930 <HAL_GetTick>
 8005260:	60b8      	str	r0, [r7, #8]
				if (!task->within_range){
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <state7_task2+0x11a>
					task->end_time = curr_time + 5000;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8005272:	3308      	adds	r3, #8
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	62d3      	str	r3, [r2, #44]	@ 0x2c
					task->within_range = 1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			if (abs((int32_t)(pitch_angle - task->reflect_angle.z)) < 2.5){
 8005280:	e026      	b.n	80052d0 <state7_task2+0x168>
				else if (curr_time > task->end_time && task->within_range){
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d921      	bls.n	80052d0 <state7_task2+0x168>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <state7_task2+0x168>
					task->within_range = 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fcc8 	bl	8003c3c <set_PWM>
					reset_controller(task->con);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fd fb17 	bl	80028e4 <reset_controller>
					task->init_controller = 1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 7;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2207      	movs	r2, #7
 80052c2:	701a      	strb	r2, [r3, #0]
			if (abs((int32_t)(pitch_angle - task->reflect_angle.z)) < 2.5){
 80052c4:	e004      	b.n	80052d0 <state7_task2+0x168>
				task->within_range = 0;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80052ce:	e000      	b.n	80052d2 <state7_task2+0x16a>
			if (abs((int32_t)(pitch_angle - task->reflect_angle.z)) < 2.5){
 80052d0:	bf00      	nop
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	3f266666 	.word	0x3f266666

080052e0 <state8_task2>:

void state8_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	if (intertask_vars->rc_trigger_flag){
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <state8_task2+0x18>
		task->state = 9;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2209      	movs	r2, #9
 80052f6:	701a      	strb	r2, [r3, #0]
	}
	task->within_range = 0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	set_PWM(task->mot, 1, 0);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	2101      	movs	r1, #1
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fc97 	bl	8003c3c <set_PWM>
	reset_controller(task->con);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd fae6 	bl	80028e4 <reset_controller>
	task->init_controller = 1;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <state9_task2>:

void state9_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <state9_task2+0x1a>
		task->state = 8;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2208      	movs	r2, #8
 800533e:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 8005340:	e09e      	b.n	8005480 <state9_task2+0x158>
		if (task->init_controller){
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <state9_task2+0x5c>
			reset_controller(task->con);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd fac7 	bl	80028e4 <reset_controller>
			set_gains(task->con, 30, 15, 0.65);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 8005488 <state9_task2+0x160>
 800535e:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8005362:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd fae4 	bl	8002934 <set_gains>
			set_target(task->con, 5);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd faf6 	bl	8002966 <set_target>
			task->init_controller = 0;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005382:	e07d      	b.n	8005480 <state9_task2+0x158>
			servo_set_position(task->servo, 60);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800548c <state9_task2+0x164>
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fe5b 	bl	8004048 <servo_set_position>
			bno055_euler(task->gyro, task->euler);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fc fdab 	bl	8001ef8 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
			task->output = get_output(task->con, pitch_angle);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd fae6 	bl	8002984 <get_output>
 80053b8:	eef0 7a40 	vmov.f32	s15, s0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			set_PWM(task->mot, 1, task->output);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6858      	ldr	r0, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80053cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053d0:	ee17 2a90 	vmov	r2, s15
 80053d4:	2101      	movs	r1, #1
 80053d6:	f7fe fc31 	bl	8003c3c <set_PWM>
			if (abs((int32_t)(pitch_angle - 10)) < 20){
 80053da:	edd7 7a03 	vldr	s15, [r7, #12]
 80053de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80053e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ea:	ee17 3a90 	vmov	r3, s15
 80053ee:	f113 0f13 	cmn.w	r3, #19
 80053f2:	db3f      	blt.n	8005474 <state9_task2+0x14c>
 80053f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80053fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005404:	ee17 3a90 	vmov	r3, s15
 8005408:	2b13      	cmp	r3, #19
 800540a:	dc33      	bgt.n	8005474 <state9_task2+0x14c>
				uint32_t curr_time = HAL_GetTick();
 800540c:	f000 fa90 	bl	8005930 <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]
				if (!task->within_range){
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <state9_task2+0x108>
					task->end_time = curr_time + 2500;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f603 12c4 	addw	r2, r3, #2500	@ 0x9c4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			if (abs((int32_t)(pitch_angle - 10)) < 20){
 800542e:	e026      	b.n	800547e <state9_task2+0x156>
				else if (curr_time > task->end_time && task->within_range){
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d921      	bls.n	800547e <state9_task2+0x156>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01c      	beq.n	800547e <state9_task2+0x156>
					task->within_range = 0;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fbf1 	bl	8003c3c <set_PWM>
					reset_controller(task->con);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd fa40 	bl	80028e4 <reset_controller>
					task->init_controller = 1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
			if (abs((int32_t)(pitch_angle - 10)) < 20){
 8005472:	e004      	b.n	800547e <state9_task2+0x156>
				task->within_range = 0;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800547c:	e000      	b.n	8005480 <state9_task2+0x158>
			if (abs((int32_t)(pitch_angle - 10)) < 20){
 800547e:	bf00      	nop
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	3f266666 	.word	0x3f266666
 800548c:	42700000 	.word	0x42700000

08005490 <get_reflect_angle>:

VectorTypeDef get_reflect_angle(VectorTypeDef* light_source_angle, VectorTypeDef* target_position, VectorTypeDef* heliostat_position)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b0a2      	sub	sp, #136	@ 0x88
 8005494:	af00      	add	r7, sp, #0
 8005496:	61f8      	str	r0, [r7, #28]
 8005498:	61b9      	str	r1, [r7, #24]
 800549a:	617a      	str	r2, [r7, #20]
    // Generating a unit vector from the light source angles
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fb f859 	bl	8000558 <__aeabi_f2d>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	ec43 2b10 	vmov	d0, r2, r3
 80054ae:	f005 fd9f 	bl	800aff0 <cos>
 80054b2:	ec55 4b10 	vmov	r4, r5, d0
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fb f84c 	bl	8000558 <__aeabi_f2d>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	ec43 2b10 	vmov	d0, r2, r3
 80054c8:	f005 fdee 	bl	800b0a8 <sin>
 80054cc:	ec53 2b10 	vmov	r2, r3, d0
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fb f898 	bl	8000608 <__aeabi_dmul>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4610      	mov	r0, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	f7fb fb8a 	bl	8000bf8 <__aeabi_d2f>
 80054e4:	4603      	mov	r3, r0
 80054e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                         .y = sin(light_source_angle->z)*sin(light_source_angle->x),
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fb f833 	bl	8000558 <__aeabi_f2d>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	ec43 2b10 	vmov	d0, r2, r3
 80054fa:	f005 fdd5 	bl	800b0a8 <sin>
 80054fe:	ec55 4b10 	vmov	r4, r5, d0
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fb f826 	bl	8000558 <__aeabi_f2d>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	ec43 2b10 	vmov	d0, r2, r3
 8005514:	f005 fdc8 	bl	800b0a8 <sin>
 8005518:	ec53 2b10 	vmov	r2, r3, d0
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb f872 	bl	8000608 <__aeabi_dmul>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb fb64 	bl	8000bf8 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 8005532:	663b      	str	r3, [r7, #96]	@ 0x60
                                         .z = -cos(light_source_angle->x)                                   };
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f7fb f80d 	bl	8000558 <__aeabi_f2d>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	ec43 2b10 	vmov	d0, r2, r3
 8005546:	f005 fd53 	bl	800aff0 <cos>
 800554a:	ec53 2b10 	vmov	r2, r3, d0
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	f7fb fb51 	bl	8000bf8 <__aeabi_d2f>
 8005556:	4603      	mov	r3, r0
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef1 7a67 	vneg.f32	s15, s15
 8005560:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    // Generating a unit vector from the target-to-heliostat positions
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	ed93 7a00 	vldr	s14, [r3]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005574:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
                                .y = (target_position->y)-(heliostat_position->y),
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	ed93 7a01 	vldr	s14, [r3, #4]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	edd3 7a01 	vldr	s15, [r3, #4]
 8005584:	ee77 7a67 	vsub.f32	s15, s14, s15
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 8005588:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
                                .z = (target_position->z)-(heliostat_position->z) };
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	edd3 7a02 	vldr	s15, [r3, #8]
 8005598:	ee77 7a67 	vsub.f32	s15, s14, s15
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 800559c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float target_vector_mag = get_mag(&target_dif);
 80055a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f8d7 	bl	8005758 <get_mag>
 80055aa:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 80055ae:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80055b2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80055b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ba:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
                                   .y = target_dif.y/target_vector_mag,
 80055be:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80055c2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80055c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 80055ca:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
                                   .z = target_dif.z/target_vector_mag };
 80055ce:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80055d2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80055d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 80055da:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Calculating the normal vector of the mirror to reflect the light source to the target
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 80055de:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80055e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80055e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                                        .y = light_source_vector.y+target_vector.y,
 80055ee:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80055f2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80055f6:	ee77 7a27 	vadd.f32	s15, s14, s15
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 80055fa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
                                        .z = light_source_vector.z+target_vector.z };
 80055fe:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8005602:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005606:	ee77 7a27 	vadd.f32	s15, s14, s15
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 800560a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float reflect_vector_dir_mag = get_mag(&reflect_vector_dir);
 800560e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f8a0 	bl	8005758 <get_mag>
 8005618:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 800561c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8005620:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8005624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005628:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                                    .y = reflect_vector_dir.y/reflect_vector_dir_mag,
 800562c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8005630:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8005634:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 8005638:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                                    .z = reflect_vector_dir.z/reflect_vector_dir_mag };
 800563c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8005640:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8005644:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 8005648:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calculating the pitch and yaw angles to produce the mirror normal vector
    float theta = acos(-reflect_vector.z);
 800564c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005650:	eef1 7a67 	vneg.f32	s15, s15
 8005654:	ee17 3a90 	vmov	r3, s15
 8005658:	4618      	mov	r0, r3
 800565a:	f7fa ff7d 	bl	8000558 <__aeabi_f2d>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	ec43 2b10 	vmov	d0, r2, r3
 8005666:	f005 fbbf 	bl	800ade8 <acos>
 800566a:	ec53 2b10 	vmov	r2, r3, d0
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	f7fb fac1 	bl	8000bf8 <__aeabi_d2f>
 8005676:	4603      	mov	r3, r0
 8005678:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float phi1 = acos(reflect_vector.x/sin(theta));
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	4618      	mov	r0, r3
 800567e:	f7fa ff6b 	bl	8000558 <__aeabi_f2d>
 8005682:	4604      	mov	r4, r0
 8005684:	460d      	mov	r5, r1
 8005686:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005688:	f7fa ff66 	bl	8000558 <__aeabi_f2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	ec43 2b10 	vmov	d0, r2, r3
 8005694:	f005 fd08 	bl	800b0a8 <sin>
 8005698:	ec53 2b10 	vmov	r2, r3, d0
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fb f8dc 	bl	800085c <__aeabi_ddiv>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	ec43 2b17 	vmov	d7, r2, r3
 80056ac:	eeb0 0a47 	vmov.f32	s0, s14
 80056b0:	eef0 0a67 	vmov.f32	s1, s15
 80056b4:	f005 fb98 	bl	800ade8 <acos>
 80056b8:	ec53 2b10 	vmov	r2, r3, d0
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	f7fb fa9a 	bl	8000bf8 <__aeabi_d2f>
 80056c4:	4603      	mov	r3, r0
 80056c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    float phi2 = asin(reflect_vector.y/sin(theta));
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fa ff44 	bl	8000558 <__aeabi_f2d>
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80056d6:	f7fa ff3f 	bl	8000558 <__aeabi_f2d>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	ec43 2b10 	vmov	d0, r2, r3
 80056e2:	f005 fce1 	bl	800b0a8 <sin>
 80056e6:	ec53 2b10 	vmov	r2, r3, d0
 80056ea:	4620      	mov	r0, r4
 80056ec:	4629      	mov	r1, r5
 80056ee:	f7fb f8b5 	bl	800085c <__aeabi_ddiv>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	ec43 2b17 	vmov	d7, r2, r3
 80056fa:	eeb0 0a47 	vmov.f32	s0, s14
 80056fe:	eef0 0a67 	vmov.f32	s1, s15
 8005702:	f005 fba5 	bl	800ae50 <asin>
 8005706:	ec53 2b10 	vmov	r2, r3, d0
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	f7fb fa73 	bl	8000bf8 <__aeabi_d2f>
 8005712:	4603      	mov	r3, r0
 8005714:	677b      	str	r3, [r7, #116]	@ 0x74

    // Generating an angle vector to store phi and theta (phi1 and phi2, with no rounding error, should be the same)
    VectorTypeDef reflect_angle = {.x = theta,
 8005716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005720:	62bb      	str	r3, [r7, #40]	@ 0x28
                                   .y = phi1,
                                   .z = phi2  };

    return reflect_angle;
 8005722:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005726:	f107 0220 	add.w	r2, r7, #32
 800572a:	ca07      	ldmia	r2, {r0, r1, r2}
 800572c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005730:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005732:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005736:	ee06 1a90 	vmov	s13, r1
 800573a:	ee07 2a10 	vmov	s14, r2
 800573e:	ee07 3a90 	vmov	s15, r3
}
 8005742:	eeb0 0a66 	vmov.f32	s0, s13
 8005746:	eef0 0a47 	vmov.f32	s1, s14
 800574a:	eeb0 1a67 	vmov.f32	s2, s15
 800574e:	3788      	adds	r7, #136	@ 0x88
 8005750:	46bd      	mov	sp, r7
 8005752:	bdb0      	pop	{r4, r5, r7, pc}
 8005754:	0000      	movs	r0, r0
	...

08005758 <get_mag>:

#include <math.h>
#include "vector.h"

float get_mag(VectorTypeDef* vect)
{
 8005758:	b5b0      	push	{r4, r5, r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
    float mag = sqrt(pow(vect->x,2)+pow(vect->y,2)+pow(vect->z,2));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7fa fef7 	bl	8000558 <__aeabi_f2d>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8005808 <get_mag+0xb0>
 8005772:	ec43 2b10 	vmov	d0, r2, r3
 8005776:	f005 fb9f 	bl	800aeb8 <pow>
 800577a:	ec55 4b10 	vmov	r4, r5, d0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fee8 	bl	8000558 <__aeabi_f2d>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8005808 <get_mag+0xb0>
 8005790:	ec43 2b10 	vmov	d0, r2, r3
 8005794:	f005 fb90 	bl	800aeb8 <pow>
 8005798:	ec53 2b10 	vmov	r2, r3, d0
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa fd7c 	bl	800029c <__adddf3>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	461d      	mov	r5, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa fed1 	bl	8000558 <__aeabi_f2d>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8005808 <get_mag+0xb0>
 80057be:	ec43 2b10 	vmov	d0, r2, r3
 80057c2:	f005 fb79 	bl	800aeb8 <pow>
 80057c6:	ec53 2b10 	vmov	r2, r3, d0
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa fd65 	bl	800029c <__adddf3>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	ec43 2b17 	vmov	d7, r2, r3
 80057da:	eeb0 0a47 	vmov.f32	s0, s14
 80057de:	eef0 0a67 	vmov.f32	s1, s15
 80057e2:	f005 fbd9 	bl	800af98 <sqrt>
 80057e6:	ec53 2b10 	vmov	r2, r3, d0
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7fb fa03 	bl	8000bf8 <__aeabi_d2f>
 80057f2:	4603      	mov	r3, r0
 80057f4:	60fb      	str	r3, [r7, #12]
    return mag;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	ee07 3a90 	vmov	s15, r3
}
 80057fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bdb0      	pop	{r4, r5, r7, pc}
 8005806:	bf00      	nop
 8005808:	00000000 	.word	0x00000000
 800580c:	40000000 	.word	0x40000000

08005810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005814:	f7fe ff40 	bl	8004698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005818:	480c      	ldr	r0, [pc, #48]	@ (800584c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800581a:	490d      	ldr	r1, [pc, #52]	@ (8005850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800581c:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800581e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005820:	e002      	b.n	8005828 <LoopCopyDataInit>

08005822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005826:	3304      	adds	r3, #4

08005828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800582a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800582c:	d3f9      	bcc.n	8005822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800582e:	4a0a      	ldr	r2, [pc, #40]	@ (8005858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005830:	4c0a      	ldr	r4, [pc, #40]	@ (800585c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005834:	e001      	b.n	800583a <LoopFillZerobss>

08005836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005838:	3204      	adds	r2, #4

0800583a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800583a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800583c:	d3fb      	bcc.n	8005836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800583e:	f004 fe61 	bl	800a504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005842:	f7fd f9bd 	bl	8002bc0 <main>
  bx  lr    
 8005846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800584c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005850:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005854:	0800dbe8 	.word	0x0800dbe8
  ldr r2, =_sbss
 8005858:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800585c:	2000042c 	.word	0x2000042c

08005860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005860:	e7fe      	b.n	8005860 <ADC_IRQHandler>
	...

08005864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <HAL_Init+0x40>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0d      	ldr	r2, [pc, #52]	@ (80058a4 <HAL_Init+0x40>)
 800586e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <HAL_Init+0x40>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <HAL_Init+0x40>)
 800587a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800587e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005880:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <HAL_Init+0x40>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a07      	ldr	r2, [pc, #28]	@ (80058a4 <HAL_Init+0x40>)
 8005886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800588a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800588c:	2003      	movs	r0, #3
 800588e:	f000 fd41 	bl	8006314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005892:	200f      	movs	r0, #15
 8005894:	f000 f808 	bl	80058a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005898:	f7fe fc60 	bl	800415c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023c00 	.word	0x40023c00

080058a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058b0:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <HAL_InitTick+0x54>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <HAL_InitTick+0x58>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058be:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fd59 	bl	800637e <HAL_SYSTICK_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00e      	b.n	80058f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d80a      	bhi.n	80058f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058dc:	2200      	movs	r2, #0
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	f000 fd21 	bl	800632a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058e8:	4a06      	ldr	r2, [pc, #24]	@ (8005904 <HAL_InitTick+0x5c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000000 	.word	0x20000000
 8005900:	20000008 	.word	0x20000008
 8005904:	20000004 	.word	0x20000004

08005908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800590c:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_IncTick+0x20>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	4b06      	ldr	r3, [pc, #24]	@ (800592c <HAL_IncTick+0x24>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4413      	add	r3, r2
 8005918:	4a04      	ldr	r2, [pc, #16]	@ (800592c <HAL_IncTick+0x24>)
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000008 	.word	0x20000008
 800592c:	200002e0 	.word	0x200002e0

08005930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return uwTick;
 8005934:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <HAL_GetTick+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	200002e0 	.word	0x200002e0

08005948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005950:	f7ff ffee 	bl	8005930 <HAL_GetTick>
 8005954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d005      	beq.n	800596e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <HAL_Delay+0x44>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800596e:	bf00      	nop
 8005970:	f7ff ffde 	bl	8005930 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d8f7      	bhi.n	8005970 <HAL_Delay+0x28>
  {
  }
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000008 	.word	0x20000008

08005990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e033      	b.n	8005a0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fe fbfc 	bl	80041ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d118      	bne.n	8005a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80059d6:	f023 0302 	bic.w	r3, r3, #2
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 faca 	bl	8005f7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80059fe:	e001      	b.n	8005a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_Start+0x1a>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e097      	b.n	8005b62 <HAL_ADC_Start+0x14a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d018      	beq.n	8005a7a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a58:	4b45      	ldr	r3, [pc, #276]	@ (8005b70 <HAL_ADC_Start+0x158>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a45      	ldr	r2, [pc, #276]	@ (8005b74 <HAL_ADC_Start+0x15c>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	0c9a      	lsrs	r2, r3, #18
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a6c:	e002      	b.n	8005a74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f9      	bne.n	8005a6e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d15f      	bne.n	8005b48 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ab2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac6:	d106      	bne.n	8005ad6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005acc:	f023 0206 	bic.w	r2, r3, #6
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ad4:	e002      	b.n	8005adc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ae4:	4b24      	ldr	r3, [pc, #144]	@ (8005b78 <HAL_ADC_Start+0x160>)
 8005ae6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005af0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10f      	bne.n	8005b1e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d129      	bne.n	8005b60 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	e020      	b.n	8005b60 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <HAL_ADC_Start+0x164>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d11b      	bne.n	8005b60 <HAL_ADC_Start+0x148>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d114      	bne.n	8005b60 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	e00b      	b.n	8005b60 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	f043 0210 	orr.w	r2, r3, #16
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b58:	f043 0201 	orr.w	r2, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000000 	.word	0x20000000
 8005b74:	431bde83 	.word	0x431bde83
 8005b78:	40012300 	.word	0x40012300
 8005b7c:	40012000 	.word	0x40012000

08005b80 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_ADC_Stop+0x16>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e021      	b.n	8005bda <HAL_ADC_Stop+0x5a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c02:	d113      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c12:	d10b      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	f043 0220 	orr.w	r2, r3, #32
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e063      	b.n	8005cf4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c2c:	f7ff fe80 	bl	8005930 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c32:	e021      	b.n	8005c78 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d01d      	beq.n	8005c78 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_ADC_PollForConversion+0x6c>
 8005c42:	f7ff fe75 	bl	8005930 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d212      	bcs.n	8005c78 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d00b      	beq.n	8005c78 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	f043 0204 	orr.w	r2, r3, #4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e03d      	b.n	8005cf4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d1d6      	bne.n	8005c34 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0212 	mvn.w	r2, #18
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d123      	bne.n	8005cf2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11f      	bne.n	8005cf2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d111      	bne.n	8005cf2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f043 0201 	orr.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e113      	b.n	8005f5c <HAL_ADC_ConfigChannel+0x244>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d925      	bls.n	8005d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	3b1e      	subs	r3, #30
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43da      	mvns	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	400a      	ands	r2, r1
 8005d68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4403      	add	r3, r0
 8005d82:	3b1e      	subs	r3, #30
 8005d84:	409a      	lsls	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	e022      	b.n	8005dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6919      	ldr	r1, [r3, #16]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	2207      	movs	r2, #7
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43da      	mvns	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	400a      	ands	r2, r1
 8005db2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4403      	add	r3, r0
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d824      	bhi.n	8005e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	3b05      	subs	r3, #5
 8005df0:	221f      	movs	r2, #31
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	400a      	ands	r2, r1
 8005dfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	3b05      	subs	r3, #5
 8005e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e26:	e04c      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	d824      	bhi.n	8005e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	3b23      	subs	r3, #35	@ 0x23
 8005e42:	221f      	movs	r2, #31
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43da      	mvns	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	400a      	ands	r2, r1
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4618      	mov	r0, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	3b23      	subs	r3, #35	@ 0x23
 8005e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e78:	e023      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	3b41      	subs	r3, #65	@ 0x41
 8005e8c:	221f      	movs	r2, #31
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43da      	mvns	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	400a      	ands	r2, r1
 8005e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3b41      	subs	r3, #65	@ 0x41
 8005eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ec2:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <HAL_ADC_ConfigChannel+0x250>)
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <HAL_ADC_ConfigChannel+0x254>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10f      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1d8>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b12      	cmp	r3, #18
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f6c <HAL_ADC_ConfigChannel+0x254>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d12b      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <HAL_ADC_ConfigChannel+0x258>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <HAL_ADC_ConfigChannel+0x1f4>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b11      	cmp	r3, #17
 8005f0a:	d122      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a11      	ldr	r2, [pc, #68]	@ (8005f70 <HAL_ADC_ConfigChannel+0x258>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d111      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f2e:	4b11      	ldr	r3, [pc, #68]	@ (8005f74 <HAL_ADC_ConfigChannel+0x25c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <HAL_ADC_ConfigChannel+0x260>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	0c9a      	lsrs	r2, r3, #18
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f44:	e002      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f9      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40012300 	.word	0x40012300
 8005f6c:	40012000 	.word	0x40012000
 8005f70:	10000012 	.word	0x10000012
 8005f74:	20000000 	.word	0x20000000
 8005f78:	431bde83 	.word	0x431bde83

08005f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f84:	4b79      	ldr	r3, [pc, #484]	@ (800616c <ADC_Init+0x1f0>)
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	4a58      	ldr	r2, [pc, #352]	@ (8006170 <ADC_Init+0x1f4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	e00f      	b.n	800607a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006078:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0202 	bic.w	r2, r2, #2
 8006088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7e1b      	ldrb	r3, [r3, #24]
 8006094:	005a      	lsls	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80060c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	3b01      	subs	r3, #1
 80060d4:	035a      	lsls	r2, r3, #13
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	e007      	b.n	80060f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80060fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	3b01      	subs	r3, #1
 800610c:	051a      	lsls	r2, r3, #20
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006132:	025a      	lsls	r2, r3, #9
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800614a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	029a      	lsls	r2, r3, #10
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40012300 	.word	0x40012300
 8006170:	0f000001 	.word	0x0f000001

08006174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006184:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006190:	4013      	ands	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800619c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c0:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <__NVIC_GetPriorityGrouping+0x18>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 0307 	and.w	r3, r3, #7
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db0b      	blt.n	8006202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 021f 	and.w	r2, r3, #31
 80061f0:	4907      	ldr	r1, [pc, #28]	@ (8006210 <__NVIC_EnableIRQ+0x38>)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2001      	movs	r0, #1
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e100 	.word	0xe000e100

08006214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db0a      	blt.n	800623e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	490c      	ldr	r1, [pc, #48]	@ (8006260 <__NVIC_SetPriority+0x4c>)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	0112      	lsls	r2, r2, #4
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	440b      	add	r3, r1
 8006238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800623c:	e00a      	b.n	8006254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	4908      	ldr	r1, [pc, #32]	@ (8006264 <__NVIC_SetPriority+0x50>)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	3b04      	subs	r3, #4
 800624c:	0112      	lsls	r2, r2, #4
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	440b      	add	r3, r1
 8006252:	761a      	strb	r2, [r3, #24]
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	e000e100 	.word	0xe000e100
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	@ 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f1c3 0307 	rsb	r3, r3, #7
 8006282:	2b04      	cmp	r3, #4
 8006284:	bf28      	it	cs
 8006286:	2304      	movcs	r3, #4
 8006288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3304      	adds	r3, #4
 800628e:	2b06      	cmp	r3, #6
 8006290:	d902      	bls.n	8006298 <NVIC_EncodePriority+0x30>
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3b03      	subs	r3, #3
 8006296:	e000      	b.n	800629a <NVIC_EncodePriority+0x32>
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	f04f 32ff 	mov.w	r2, #4294967295
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43da      	mvns	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	401a      	ands	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b0:	f04f 31ff 	mov.w	r1, #4294967295
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ba:	43d9      	mvns	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c0:	4313      	orrs	r3, r2
         );
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	@ 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3b01      	subs	r3, #1
 80062dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062e0:	d301      	bcc.n	80062e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062e2:	2301      	movs	r3, #1
 80062e4:	e00f      	b.n	8006306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <SysTick_Config+0x40>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062ee:	210f      	movs	r1, #15
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	f7ff ff8e 	bl	8006214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <SysTick_Config+0x40>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062fe:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <SysTick_Config+0x40>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010

08006314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff29 	bl	8006174 <__NVIC_SetPriorityGrouping>
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	4603      	mov	r3, r0
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800633c:	f7ff ff3e 	bl	80061bc <__NVIC_GetPriorityGrouping>
 8006340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff8e 	bl	8006268 <NVIC_EncodePriority>
 800634c:	4602      	mov	r2, r0
 800634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ff5d 	bl	8006214 <__NVIC_SetPriority>
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	4603      	mov	r3, r0
 800636a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800636c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ff31 	bl	80061d8 <__NVIC_EnableIRQ>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ffa2 	bl	80062d0 <SysTick_Config>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	@ 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e159      	b.n	8006668 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063b4:	2201      	movs	r2, #1
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	f040 8148 	bne.w	8006662 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d005      	beq.n	80063ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d130      	bne.n	800644c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	2203      	movs	r2, #3
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006420:	2201      	movs	r2, #1
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 0201 	and.w	r2, r3, #1
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4313      	orrs	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	2b03      	cmp	r3, #3
 8006456:	d017      	beq.n	8006488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	2203      	movs	r2, #3
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43db      	mvns	r3, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4313      	orrs	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d123      	bne.n	80064dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	08da      	lsrs	r2, r3, #3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3208      	adds	r2, #8
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	220f      	movs	r2, #15
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4013      	ands	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	08da      	lsrs	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3208      	adds	r2, #8
 80064d6:	69b9      	ldr	r1, [r7, #24]
 80064d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	2203      	movs	r2, #3
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 0203 	and.w	r2, r3, #3
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a2 	beq.w	8006662 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	4b57      	ldr	r3, [pc, #348]	@ (8006680 <HAL_GPIO_Init+0x2e8>)
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	4a56      	ldr	r2, [pc, #344]	@ (8006680 <HAL_GPIO_Init+0x2e8>)
 8006528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800652c:	6453      	str	r3, [r2, #68]	@ 0x44
 800652e:	4b54      	ldr	r3, [pc, #336]	@ (8006680 <HAL_GPIO_Init+0x2e8>)
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800653a:	4a52      	ldr	r2, [pc, #328]	@ (8006684 <HAL_GPIO_Init+0x2ec>)
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	3302      	adds	r3, #2
 8006542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	220f      	movs	r2, #15
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a49      	ldr	r2, [pc, #292]	@ (8006688 <HAL_GPIO_Init+0x2f0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d019      	beq.n	800659a <HAL_GPIO_Init+0x202>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a48      	ldr	r2, [pc, #288]	@ (800668c <HAL_GPIO_Init+0x2f4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_GPIO_Init+0x1fe>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a47      	ldr	r2, [pc, #284]	@ (8006690 <HAL_GPIO_Init+0x2f8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00d      	beq.n	8006592 <HAL_GPIO_Init+0x1fa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a46      	ldr	r2, [pc, #280]	@ (8006694 <HAL_GPIO_Init+0x2fc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <HAL_GPIO_Init+0x1f6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a45      	ldr	r2, [pc, #276]	@ (8006698 <HAL_GPIO_Init+0x300>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_GPIO_Init+0x1f2>
 8006586:	2304      	movs	r3, #4
 8006588:	e008      	b.n	800659c <HAL_GPIO_Init+0x204>
 800658a:	2307      	movs	r3, #7
 800658c:	e006      	b.n	800659c <HAL_GPIO_Init+0x204>
 800658e:	2303      	movs	r3, #3
 8006590:	e004      	b.n	800659c <HAL_GPIO_Init+0x204>
 8006592:	2302      	movs	r3, #2
 8006594:	e002      	b.n	800659c <HAL_GPIO_Init+0x204>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <HAL_GPIO_Init+0x204>
 800659a:	2300      	movs	r3, #0
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	f002 0203 	and.w	r2, r2, #3
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	4093      	lsls	r3, r2
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065ac:	4935      	ldr	r1, [pc, #212]	@ (8006684 <HAL_GPIO_Init+0x2ec>)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	089b      	lsrs	r3, r3, #2
 80065b2:	3302      	adds	r3, #2
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065ba:	4b38      	ldr	r3, [pc, #224]	@ (800669c <HAL_GPIO_Init+0x304>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	43db      	mvns	r3, r3
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	4013      	ands	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065de:	4a2f      	ldr	r2, [pc, #188]	@ (800669c <HAL_GPIO_Init+0x304>)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065e4:	4b2d      	ldr	r3, [pc, #180]	@ (800669c <HAL_GPIO_Init+0x304>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	43db      	mvns	r3, r3
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4013      	ands	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006608:	4a24      	ldr	r2, [pc, #144]	@ (800669c <HAL_GPIO_Init+0x304>)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800660e:	4b23      	ldr	r3, [pc, #140]	@ (800669c <HAL_GPIO_Init+0x304>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	43db      	mvns	r3, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4013      	ands	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006632:	4a1a      	ldr	r2, [pc, #104]	@ (800669c <HAL_GPIO_Init+0x304>)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006638:	4b18      	ldr	r3, [pc, #96]	@ (800669c <HAL_GPIO_Init+0x304>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	43db      	mvns	r3, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4013      	ands	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800665c:	4a0f      	ldr	r2, [pc, #60]	@ (800669c <HAL_GPIO_Init+0x304>)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	f67f aea2 	bls.w	80063b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	3724      	adds	r7, #36	@ 0x24
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40023800 	.word	0x40023800
 8006684:	40013800 	.word	0x40013800
 8006688:	40020000 	.word	0x40020000
 800668c:	40020400 	.word	0x40020400
 8006690:	40020800 	.word	0x40020800
 8006694:	40020c00 	.word	0x40020c00
 8006698:	40021000 	.word	0x40021000
 800669c:	40013c00 	.word	0x40013c00

080066a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e12b      	b.n	800690a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fd fdb4 	bl	8004234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	@ 0x24
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006704:	f001 fdc6 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4a81      	ldr	r2, [pc, #516]	@ (8006914 <HAL_I2C_Init+0x274>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d807      	bhi.n	8006724 <HAL_I2C_Init+0x84>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a80      	ldr	r2, [pc, #512]	@ (8006918 <HAL_I2C_Init+0x278>)
 8006718:	4293      	cmp	r3, r2
 800671a:	bf94      	ite	ls
 800671c:	2301      	movls	r3, #1
 800671e:	2300      	movhi	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e006      	b.n	8006732 <HAL_I2C_Init+0x92>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a7d      	ldr	r2, [pc, #500]	@ (800691c <HAL_I2C_Init+0x27c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	bf94      	ite	ls
 800672c:	2301      	movls	r3, #1
 800672e:	2300      	movhi	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0e7      	b.n	800690a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a78      	ldr	r2, [pc, #480]	@ (8006920 <HAL_I2C_Init+0x280>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	0c9b      	lsrs	r3, r3, #18
 8006744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a6a      	ldr	r2, [pc, #424]	@ (8006914 <HAL_I2C_Init+0x274>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d802      	bhi.n	8006774 <HAL_I2C_Init+0xd4>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	3301      	adds	r3, #1
 8006772:	e009      	b.n	8006788 <HAL_I2C_Init+0xe8>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	4a69      	ldr	r2, [pc, #420]	@ (8006924 <HAL_I2C_Init+0x284>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	099b      	lsrs	r3, r3, #6
 8006786:	3301      	adds	r3, #1
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800679a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	495c      	ldr	r1, [pc, #368]	@ (8006914 <HAL_I2C_Init+0x274>)
 80067a4:	428b      	cmp	r3, r1
 80067a6:	d819      	bhi.n	80067dc <HAL_I2C_Init+0x13c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1e59      	subs	r1, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067bc:	400b      	ands	r3, r1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_I2C_Init+0x138>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1e59      	subs	r1, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80067d0:	3301      	adds	r3, #1
 80067d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d6:	e051      	b.n	800687c <HAL_I2C_Init+0x1dc>
 80067d8:	2304      	movs	r3, #4
 80067da:	e04f      	b.n	800687c <HAL_I2C_Init+0x1dc>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d111      	bne.n	8006808 <HAL_I2C_Init+0x168>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1e58      	subs	r0, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6859      	ldr	r1, [r3, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	440b      	add	r3, r1
 80067f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067f6:	3301      	adds	r3, #1
 80067f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e012      	b.n	800682e <HAL_I2C_Init+0x18e>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1e58      	subs	r0, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	0099      	lsls	r1, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	fbb0 f3f3 	udiv	r3, r0, r3
 800681e:	3301      	adds	r3, #1
 8006820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Init+0x196>
 8006832:	2301      	movs	r3, #1
 8006834:	e022      	b.n	800687c <HAL_I2C_Init+0x1dc>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10e      	bne.n	800685c <HAL_I2C_Init+0x1bc>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1e58      	subs	r0, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	440b      	add	r3, r1
 800684c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006850:	3301      	adds	r3, #1
 8006852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685a:	e00f      	b.n	800687c <HAL_I2C_Init+0x1dc>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1e58      	subs	r0, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	0099      	lsls	r1, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006872:	3301      	adds	r3, #1
 8006874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	6809      	ldr	r1, [r1, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69da      	ldr	r2, [r3, #28]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80068aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6911      	ldr	r1, [r2, #16]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68d2      	ldr	r2, [r2, #12]
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	430b      	orrs	r3, r1
 80068be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	000186a0 	.word	0x000186a0
 8006918:	001e847f 	.word	0x001e847f
 800691c:	003d08ff 	.word	0x003d08ff
 8006920:	431bde83 	.word	0x431bde83
 8006924:	10624dd3 	.word	0x10624dd3

08006928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	461a      	mov	r2, r3
 8006934:	460b      	mov	r3, r1
 8006936:	817b      	strh	r3, [r7, #10]
 8006938:	4613      	mov	r3, r2
 800693a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800693c:	f7fe fff8 	bl	8005930 <HAL_GetTick>
 8006940:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b20      	cmp	r3, #32
 800694c:	f040 80e0 	bne.w	8006b10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2319      	movs	r3, #25
 8006956:	2201      	movs	r2, #1
 8006958:	4970      	ldr	r1, [pc, #448]	@ (8006b1c <HAL_I2C_Master_Transmit+0x1f4>)
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fdf4 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
 8006968:	e0d3      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_I2C_Master_Transmit+0x50>
 8006974:	2302      	movs	r3, #2
 8006976:	e0cc      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d007      	beq.n	800699e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	@ 0x21
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2210      	movs	r2, #16
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	893a      	ldrh	r2, [r7, #8]
 80069ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a50      	ldr	r2, [pc, #320]	@ (8006b20 <HAL_I2C_Master_Transmit+0x1f8>)
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069e0:	8979      	ldrh	r1, [r7, #10]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fbc8 	bl	800717c <I2C_MasterRequestWrite>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e08d      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a0c:	e066      	b.n	8006adc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	6a39      	ldr	r1, [r7, #32]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 feb2 	bl	800777c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d107      	bne.n	8006a36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e06b      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d11b      	bne.n	8006ab0 <HAL_I2C_Master_Transmit+0x188>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d017      	beq.n	8006ab0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	6a39      	ldr	r1, [r7, #32]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fea9 	bl	800780c <I2C_WaitOnBTFFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00d      	beq.n	8006adc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d107      	bne.n	8006ad8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ad6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01a      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d194      	bne.n	8006a0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	00100002 	.word	0x00100002
 8006b20:	ffff0000 	.word	0xffff0000

08006b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08c      	sub	sp, #48	@ 0x30
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	460b      	mov	r3, r1
 8006b32:	817b      	strh	r3, [r7, #10]
 8006b34:	4613      	mov	r3, r2
 8006b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b38:	f7fe fefa 	bl	8005930 <HAL_GetTick>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	f040 8217 	bne.w	8006f7a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	2319      	movs	r3, #25
 8006b52:	2201      	movs	r2, #1
 8006b54:	497c      	ldr	r1, [pc, #496]	@ (8006d48 <HAL_I2C_Master_Receive+0x224>)
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fcf6 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006b62:	2302      	movs	r3, #2
 8006b64:	e20a      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_I2C_Master_Receive+0x50>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e203      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d007      	beq.n	8006b9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2222      	movs	r2, #34	@ 0x22
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	893a      	ldrh	r2, [r7, #8]
 8006bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8006d4c <HAL_I2C_Master_Receive+0x228>)
 8006bda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bdc:	8979      	ldrh	r1, [r7, #10]
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fb4c 	bl	8007280 <I2C_MasterRequestRead>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e1c4      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e198      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d11b      	bne.n	8006c62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e178      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d11b      	bne.n	8006ca2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	e158      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cc8:	e144      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f200 80f1 	bhi.w	8006eb6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d123      	bne.n	8006d24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fddb 	bl	800789c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e145      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d22:	e117      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d14e      	bne.n	8006dca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2200      	movs	r2, #0
 8006d34:	4906      	ldr	r1, [pc, #24]	@ (8006d50 <HAL_I2C_Master_Receive+0x22c>)
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fc06 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e11a      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
 8006d46:	bf00      	nop
 8006d48:	00100002 	.word	0x00100002
 8006d4c:	ffff0000 	.word	0xffff0000
 8006d50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dc8:	e0c4      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	496c      	ldr	r1, [pc, #432]	@ (8006f84 <HAL_I2C_Master_Receive+0x460>)
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fbb7 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cb      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691a      	ldr	r2, [r3, #16]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4955      	ldr	r1, [pc, #340]	@ (8006f84 <HAL_I2C_Master_Receive+0x460>)
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fb89 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e09d      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eb4:	e04e      	b.n	8006f54 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fcee 	bl	800789c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e058      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d124      	bne.n	8006f54 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d107      	bne.n	8006f22 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f47f aeb6 	bne.w	8006cca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f7a:	2302      	movs	r3, #2
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3728      	adds	r7, #40	@ 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	00010004 	.word	0x00010004

08006f88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	4608      	mov	r0, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	461a      	mov	r2, r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	813b      	strh	r3, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fa2:	f7fe fcc5 	bl	8005930 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	f040 80d9 	bne.w	8007168 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	2319      	movs	r3, #25
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	496d      	ldr	r1, [pc, #436]	@ (8007174 <HAL_I2C_Mem_Write+0x1ec>)
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fac1 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0cc      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_I2C_Mem_Write+0x56>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e0c5      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d007      	beq.n	8007004 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2221      	movs	r2, #33	@ 0x21
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2240      	movs	r2, #64	@ 0x40
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a3a      	ldr	r2, [r7, #32]
 800702e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a4d      	ldr	r2, [pc, #308]	@ (8007178 <HAL_I2C_Mem_Write+0x1f0>)
 8007044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007046:	88f8      	ldrh	r0, [r7, #6]
 8007048:	893a      	ldrh	r2, [r7, #8]
 800704a:	8979      	ldrh	r1, [r7, #10]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4603      	mov	r3, r0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f9e0 	bl	800741c <I2C_RequestMemoryWrite>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d052      	beq.n	8007108 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e081      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fb86 	bl	800777c <I2C_WaitOnTXEFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00d      	beq.n	8007092 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	2b04      	cmp	r3, #4
 800707c:	d107      	bne.n	800708e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e06b      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d11b      	bne.n	8007108 <HAL_I2C_Mem_Write+0x180>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1aa      	bne.n	8007066 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fb79 	bl	800780c <I2C_WaitOnBTFFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	2b04      	cmp	r3, #4
 8007126:	d107      	bne.n	8007138 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007136:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e016      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	00100002 	.word	0x00100002
 8007178:	ffff0000 	.word	0xffff0000

0800717c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	460b      	mov	r3, r1
 800718a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d006      	beq.n	80071a6 <I2C_MasterRequestWrite+0x2a>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d003      	beq.n	80071a6 <I2C_MasterRequestWrite+0x2a>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071a4:	d108      	bne.n	80071b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	e00b      	b.n	80071d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071bc:	2b12      	cmp	r3, #18
 80071be:	d107      	bne.n	80071d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f9b3 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f6:	d103      	bne.n	8007200 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e035      	b.n	8007270 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720c:	d108      	bne.n	8007220 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800720e:	897b      	ldrh	r3, [r7, #10]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800721c:	611a      	str	r2, [r3, #16]
 800721e:	e01b      	b.n	8007258 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007220:	897b      	ldrh	r3, [r7, #10]
 8007222:	11db      	asrs	r3, r3, #7
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0306 	and.w	r3, r3, #6
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f063 030f 	orn	r3, r3, #15
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	490e      	ldr	r1, [pc, #56]	@ (8007278 <I2C_MasterRequestWrite+0xfc>)
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f9fc 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e010      	b.n	8007270 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800724e:	897b      	ldrh	r3, [r7, #10]
 8007250:	b2da      	uxtb	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	4907      	ldr	r1, [pc, #28]	@ (800727c <I2C_MasterRequestWrite+0x100>)
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f9ec 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	00010008 	.word	0x00010008
 800727c:	00010002 	.word	0x00010002

08007280 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	460b      	mov	r3, r1
 800728e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d006      	beq.n	80072ba <I2C_MasterRequestRead+0x3a>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d003      	beq.n	80072ba <I2C_MasterRequestRead+0x3a>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072b8:	d108      	bne.n	80072cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e00b      	b.n	80072e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d0:	2b11      	cmp	r3, #17
 80072d2:	d107      	bne.n	80072e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f929 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730a:	d103      	bne.n	8007314 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007312:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e079      	b.n	800740c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007320:	d108      	bne.n	8007334 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007322:	897b      	ldrh	r3, [r7, #10]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	611a      	str	r2, [r3, #16]
 8007332:	e05f      	b.n	80073f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007334:	897b      	ldrh	r3, [r7, #10]
 8007336:	11db      	asrs	r3, r3, #7
 8007338:	b2db      	uxtb	r3, r3
 800733a:	f003 0306 	and.w	r3, r3, #6
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f063 030f 	orn	r3, r3, #15
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4930      	ldr	r1, [pc, #192]	@ (8007414 <I2C_MasterRequestRead+0x194>)
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f972 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e054      	b.n	800740c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007362:	897b      	ldrh	r3, [r7, #10]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4929      	ldr	r1, [pc, #164]	@ (8007418 <I2C_MasterRequestRead+0x198>)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f962 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e044      	b.n	800740c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f8c7 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00d      	beq.n	80073dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ce:	d103      	bne.n	80073d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e017      	b.n	800740c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80073dc:	897b      	ldrh	r3, [r7, #10]
 80073de:	11db      	asrs	r3, r3, #7
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0306 	and.w	r3, r3, #6
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f063 030e 	orn	r3, r3, #14
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	4907      	ldr	r1, [pc, #28]	@ (8007418 <I2C_MasterRequestRead+0x198>)
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f91e 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	00010008 	.word	0x00010008
 8007418:	00010002 	.word	0x00010002

0800741c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	461a      	mov	r2, r3
 800742a:	4603      	mov	r3, r0
 800742c:	817b      	strh	r3, [r7, #10]
 800742e:	460b      	mov	r3, r1
 8007430:	813b      	strh	r3, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	2200      	movs	r2, #0
 800744e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f878 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746c:	d103      	bne.n	8007476 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007474:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e05f      	b.n	800753a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800747a:	897b      	ldrh	r3, [r7, #10]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	461a      	mov	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	492d      	ldr	r1, [pc, #180]	@ (8007544 <I2C_RequestMemoryWrite+0x128>)
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f8d3 	bl	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e04c      	b.n	800753a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b8:	6a39      	ldr	r1, [r7, #32]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f95e 	bl	800777c <I2C_WaitOnTXEFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d107      	bne.n	80074de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e02b      	b.n	800753a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d105      	bne.n	80074f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074e8:	893b      	ldrh	r3, [r7, #8]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	611a      	str	r2, [r3, #16]
 80074f2:	e021      	b.n	8007538 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074f4:	893b      	ldrh	r3, [r7, #8]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007504:	6a39      	ldr	r1, [r7, #32]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f938 	bl	800777c <I2C_WaitOnTXEFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007516:	2b04      	cmp	r3, #4
 8007518:	d107      	bne.n	800752a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e005      	b.n	800753a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800752e:	893b      	ldrh	r3, [r7, #8]
 8007530:	b2da      	uxtb	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	00010002 	.word	0x00010002

08007548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007558:	e048      	b.n	80075ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d044      	beq.n	80075ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fe f9e5 	bl	8005930 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d139      	bne.n	80075ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	0c1b      	lsrs	r3, r3, #16
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10d      	bne.n	800759e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	43da      	mvns	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4013      	ands	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	e00c      	b.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	43da      	mvns	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d116      	bne.n	80075ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e023      	b.n	8007634 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d10d      	bne.n	8007612 <I2C_WaitOnFlagUntilTimeout+0xca>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	43da      	mvns	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4013      	ands	r3, r2
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	bf0c      	ite	eq
 8007608:	2301      	moveq	r3, #1
 800760a:	2300      	movne	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	e00c      	b.n	800762c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	43da      	mvns	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4013      	ands	r3, r2
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	429a      	cmp	r2, r3
 8007630:	d093      	beq.n	800755a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800764a:	e071      	b.n	8007730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765a:	d123      	bne.n	80076a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800766a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007690:	f043 0204 	orr.w	r2, r3, #4
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e067      	b.n	8007774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d041      	beq.n	8007730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ac:	f7fe f940 	bl	8005930 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d136      	bne.n	8007730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	0c1b      	lsrs	r3, r3, #16
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10c      	bne.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	43da      	mvns	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e00b      	b.n	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	43da      	mvns	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf14      	ite	ne
 80076f8:	2301      	movne	r3, #1
 80076fa:	2300      	moveq	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d016      	beq.n	8007730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e021      	b.n	8007774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	0c1b      	lsrs	r3, r3, #16
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10c      	bne.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	43da      	mvns	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4013      	ands	r3, r2
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e00b      	b.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	43da      	mvns	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4013      	ands	r3, r2
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	f47f af6d 	bne.w	800764c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007788:	e034      	b.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f8e3 	bl	8007956 <I2C_IsAcknowledgeFailed>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e034      	b.n	8007804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d028      	beq.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a2:	f7fe f8c5 	bl	8005930 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d302      	bcc.n	80077b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11d      	bne.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c2:	2b80      	cmp	r3, #128	@ 0x80
 80077c4:	d016      	beq.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e007      	b.n	8007804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fe:	2b80      	cmp	r3, #128	@ 0x80
 8007800:	d1c3      	bne.n	800778a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007818:	e034      	b.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f89b 	bl	8007956 <I2C_IsAcknowledgeFailed>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e034      	b.n	8007894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d028      	beq.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007832:	f7fe f87d 	bl	8005930 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11d      	bne.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b04      	cmp	r3, #4
 8007854:	d016      	beq.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	f043 0220 	orr.w	r2, r3, #32
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e007      	b.n	8007894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b04      	cmp	r3, #4
 8007890:	d1c3      	bne.n	800781a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078a8:	e049      	b.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d119      	bne.n	80078ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0210 	mvn.w	r2, #16
 80078c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e030      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ec:	f7fe f820 	bl	8005930 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d302      	bcc.n	8007902 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11d      	bne.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790c:	2b40      	cmp	r3, #64	@ 0x40
 800790e:	d016      	beq.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792a:	f043 0220 	orr.w	r2, r3, #32
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e007      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007948:	2b40      	cmp	r3, #64	@ 0x40
 800794a:	d1ae      	bne.n	80078aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800796c:	d11b      	bne.n	80079a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007976:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007992:	f043 0204 	orr.w	r2, r3, #4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e267      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d075      	beq.n	8007abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079d2:	4b88      	ldr	r3, [pc, #544]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d00c      	beq.n	80079f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079de:	4b85      	ldr	r3, [pc, #532]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d112      	bne.n	8007a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ea:	4b82      	ldr	r3, [pc, #520]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f6:	d10b      	bne.n	8007a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05b      	beq.n	8007abc <HAL_RCC_OscConfig+0x108>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d157      	bne.n	8007abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e242      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d106      	bne.n	8007a28 <HAL_RCC_OscConfig+0x74>
 8007a1a:	4b76      	ldr	r3, [pc, #472]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a75      	ldr	r2, [pc, #468]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e01d      	b.n	8007a64 <HAL_RCC_OscConfig+0xb0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCC_OscConfig+0x98>
 8007a32:	4b70      	ldr	r3, [pc, #448]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6f      	ldr	r2, [pc, #444]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a6c      	ldr	r2, [pc, #432]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e00b      	b.n	8007a64 <HAL_RCC_OscConfig+0xb0>
 8007a4c:	4b69      	ldr	r3, [pc, #420]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a68      	ldr	r2, [pc, #416]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	4b66      	ldr	r3, [pc, #408]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a65      	ldr	r2, [pc, #404]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d013      	beq.n	8007a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6c:	f7fd ff60 	bl	8005930 <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a74:	f7fd ff5c 	bl	8005930 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b64      	cmp	r3, #100	@ 0x64
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e207      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a86:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <HAL_RCC_OscConfig+0xc0>
 8007a92:	e014      	b.n	8007abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a94:	f7fd ff4c 	bl	8005930 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a9c:	f7fd ff48 	bl	8005930 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b64      	cmp	r3, #100	@ 0x64
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e1f3      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aae:	4b51      	ldr	r3, [pc, #324]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0xe8>
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d063      	beq.n	8007b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aca:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 030c 	and.w	r3, r3, #12
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ad6:	4b47      	ldr	r3, [pc, #284]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d11c      	bne.n	8007b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ae2:	4b44      	ldr	r3, [pc, #272]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d116      	bne.n	8007b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aee:	4b41      	ldr	r3, [pc, #260]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_RCC_OscConfig+0x152>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d001      	beq.n	8007b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e1c7      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b06:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4937      	ldr	r1, [pc, #220]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b1a:	e03a      	b.n	8007b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d020      	beq.n	8007b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b24:	4b34      	ldr	r3, [pc, #208]	@ (8007bf8 <HAL_RCC_OscConfig+0x244>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2a:	f7fd ff01 	bl	8005930 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b32:	f7fd fefd 	bl	8005930 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e1a8      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b44:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b50:	4b28      	ldr	r3, [pc, #160]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4925      	ldr	r1, [pc, #148]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	600b      	str	r3, [r1, #0]
 8007b64:	e015      	b.n	8007b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b66:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <HAL_RCC_OscConfig+0x244>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7fd fee0 	bl	8005930 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b74:	f7fd fedc 	bl	8005930 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e187      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b86:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d036      	beq.n	8007c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d016      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ba6:	4b15      	ldr	r3, [pc, #84]	@ (8007bfc <HAL_RCC_OscConfig+0x248>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bac:	f7fd fec0 	bl	8005930 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bb4:	f7fd febc 	bl	8005930 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e167      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0f0      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x200>
 8007bd2:	e01b      	b.n	8007c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bd4:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <HAL_RCC_OscConfig+0x248>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bda:	f7fd fea9 	bl	8005930 <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be0:	e00e      	b.n	8007c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007be2:	f7fd fea5 	bl	8005930 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d907      	bls.n	8007c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e150      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	42470000 	.word	0x42470000
 8007bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c00:	4b88      	ldr	r3, [pc, #544]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1ea      	bne.n	8007be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8097 	beq.w	8007d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c1e:	4b81      	ldr	r3, [pc, #516]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10f      	bne.n	8007c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	4a7c      	ldr	r2, [pc, #496]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c42:	60bb      	str	r3, [r7, #8]
 8007c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c4a:	4b77      	ldr	r3, [pc, #476]	@ (8007e28 <HAL_RCC_OscConfig+0x474>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d118      	bne.n	8007c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c56:	4b74      	ldr	r3, [pc, #464]	@ (8007e28 <HAL_RCC_OscConfig+0x474>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a73      	ldr	r2, [pc, #460]	@ (8007e28 <HAL_RCC_OscConfig+0x474>)
 8007c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c62:	f7fd fe65 	bl	8005930 <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c6a:	f7fd fe61 	bl	8005930 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e10c      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <HAL_RCC_OscConfig+0x474>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCC_OscConfig+0x2ea>
 8007c90:	4b64      	ldr	r3, [pc, #400]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c94:	4a63      	ldr	r2, [pc, #396]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c9c:	e01c      	b.n	8007cd8 <HAL_RCC_OscConfig+0x324>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d10c      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x30c>
 8007ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	4a5e      	ldr	r2, [pc, #376]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cac:	f043 0304 	orr.w	r3, r3, #4
 8007cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cbe:	e00b      	b.n	8007cd8 <HAL_RCC_OscConfig+0x324>
 8007cc0:	4b58      	ldr	r3, [pc, #352]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc4:	4a57      	ldr	r2, [pc, #348]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cc6:	f023 0301 	bic.w	r3, r3, #1
 8007cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ccc:	4b55      	ldr	r3, [pc, #340]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd0:	4a54      	ldr	r2, [pc, #336]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007cd2:	f023 0304 	bic.w	r3, r3, #4
 8007cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d015      	beq.n	8007d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce0:	f7fd fe26 	bl	8005930 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce6:	e00a      	b.n	8007cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce8:	f7fd fe22 	bl	8005930 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e0cb      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfe:	4b49      	ldr	r3, [pc, #292]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0ee      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x334>
 8007d0a:	e014      	b.n	8007d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d0c:	f7fd fe10 	bl	8005930 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d12:	e00a      	b.n	8007d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d14:	f7fd fe0c 	bl	8005930 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e0b5      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1ee      	bne.n	8007d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d3c:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	4a38      	ldr	r2, [pc, #224]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80a1 	beq.w	8007e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d52:	4b34      	ldr	r3, [pc, #208]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d05c      	beq.n	8007e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d141      	bne.n	8007dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d66:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <HAL_RCC_OscConfig+0x478>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fd fde0 	bl	8005930 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d74:	f7fd fddc 	bl	8005930 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e087      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d86:	4b27      	ldr	r3, [pc, #156]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69da      	ldr	r2, [r3, #28]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da0:	019b      	lsls	r3, r3, #6
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	3b01      	subs	r3, #1
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	491b      	ldr	r1, [pc, #108]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <HAL_RCC_OscConfig+0x478>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc2:	f7fd fdb5 	bl	8005930 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dca:	f7fd fdb1 	bl	8005930 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e05c      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ddc:	4b11      	ldr	r3, [pc, #68]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0f0      	beq.n	8007dca <HAL_RCC_OscConfig+0x416>
 8007de8:	e054      	b.n	8007e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b10      	ldr	r3, [pc, #64]	@ (8007e2c <HAL_RCC_OscConfig+0x478>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fd fd9e 	bl	8005930 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df8:	f7fd fd9a 	bl	8005930 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e045      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e0a:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <HAL_RCC_OscConfig+0x470>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x444>
 8007e16:	e03d      	b.n	8007e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e038      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40007000 	.word	0x40007000
 8007e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea0 <HAL_RCC_OscConfig+0x4ec>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d028      	beq.n	8007e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d121      	bne.n	8007e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d11a      	bne.n	8007e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e60:	4013      	ands	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d111      	bne.n	8007e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d107      	bne.n	8007e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d001      	beq.n	8007e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40023800 	.word	0x40023800

08007ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e0cc      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eb8:	4b68      	ldr	r3, [pc, #416]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d90c      	bls.n	8007ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec6:	4b65      	ldr	r3, [pc, #404]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ece:	4b63      	ldr	r3, [pc, #396]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0b8      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d020      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ef8:	4b59      	ldr	r3, [pc, #356]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	4a58      	ldr	r2, [pc, #352]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f10:	4b53      	ldr	r3, [pc, #332]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a52      	ldr	r2, [pc, #328]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f1c:	4b50      	ldr	r3, [pc, #320]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	494d      	ldr	r1, [pc, #308]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d044      	beq.n	8007fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f42:	4b47      	ldr	r3, [pc, #284]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d119      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e07f      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d003      	beq.n	8007f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d107      	bne.n	8007f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f62:	4b3f      	ldr	r3, [pc, #252]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e06f      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f72:	4b3b      	ldr	r3, [pc, #236]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e067      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f82:	4b37      	ldr	r3, [pc, #220]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f023 0203 	bic.w	r2, r3, #3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	4934      	ldr	r1, [pc, #208]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f94:	f7fd fccc 	bl	8005930 <HAL_GetTick>
 8007f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f9a:	e00a      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f9c:	f7fd fcc8 	bl	8005930 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e04f      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 020c 	and.w	r2, r3, #12
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d1eb      	bne.n	8007f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fc4:	4b25      	ldr	r3, [pc, #148]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d20c      	bcs.n	8007fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fd2:	4b22      	ldr	r3, [pc, #136]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fda:	4b20      	ldr	r3, [pc, #128]	@ (800805c <HAL_RCC_ClockConfig+0x1b8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d001      	beq.n	8007fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e032      	b.n	8008052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d008      	beq.n	800800a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ff8:	4b19      	ldr	r3, [pc, #100]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	4916      	ldr	r1, [pc, #88]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	4313      	orrs	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008016:	4b12      	ldr	r3, [pc, #72]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	490e      	ldr	r1, [pc, #56]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8008026:	4313      	orrs	r3, r2
 8008028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800802a:	f000 f821 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 800802e:	4602      	mov	r2, r0
 8008030:	4b0b      	ldr	r3, [pc, #44]	@ (8008060 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	091b      	lsrs	r3, r3, #4
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	490a      	ldr	r1, [pc, #40]	@ (8008064 <HAL_RCC_ClockConfig+0x1c0>)
 800803c:	5ccb      	ldrb	r3, [r1, r3]
 800803e:	fa22 f303 	lsr.w	r3, r2, r3
 8008042:	4a09      	ldr	r2, [pc, #36]	@ (8008068 <HAL_RCC_ClockConfig+0x1c4>)
 8008044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008046:	4b09      	ldr	r3, [pc, #36]	@ (800806c <HAL_RCC_ClockConfig+0x1c8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd fc2c 	bl	80058a8 <HAL_InitTick>

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40023c00 	.word	0x40023c00
 8008060:	40023800 	.word	0x40023800
 8008064:	0800d984 	.word	0x0800d984
 8008068:	20000000 	.word	0x20000000
 800806c:	20000004 	.word	0x20000004

08008070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008074:	b094      	sub	sp, #80	@ 0x50
 8008076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	647b      	str	r3, [r7, #68]	@ 0x44
 800807c:	2300      	movs	r3, #0
 800807e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008080:	2300      	movs	r3, #0
 8008082:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008088:	4b79      	ldr	r3, [pc, #484]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 030c 	and.w	r3, r3, #12
 8008090:	2b08      	cmp	r3, #8
 8008092:	d00d      	beq.n	80080b0 <HAL_RCC_GetSysClockFreq+0x40>
 8008094:	2b08      	cmp	r3, #8
 8008096:	f200 80e1 	bhi.w	800825c <HAL_RCC_GetSysClockFreq+0x1ec>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x34>
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d003      	beq.n	80080aa <HAL_RCC_GetSysClockFreq+0x3a>
 80080a2:	e0db      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080a4:	4b73      	ldr	r3, [pc, #460]	@ (8008274 <HAL_RCC_GetSysClockFreq+0x204>)
 80080a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80080a8:	e0db      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080aa:	4b73      	ldr	r3, [pc, #460]	@ (8008278 <HAL_RCC_GetSysClockFreq+0x208>)
 80080ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080ae:	e0d8      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d063      	beq.n	800818e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	099b      	lsrs	r3, r3, #6
 80080cc:	2200      	movs	r2, #0
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080da:	2300      	movs	r3, #0
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80080e2:	4622      	mov	r2, r4
 80080e4:	462b      	mov	r3, r5
 80080e6:	f04f 0000 	mov.w	r0, #0
 80080ea:	f04f 0100 	mov.w	r1, #0
 80080ee:	0159      	lsls	r1, r3, #5
 80080f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080f4:	0150      	lsls	r0, r2, #5
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4621      	mov	r1, r4
 80080fc:	1a51      	subs	r1, r2, r1
 80080fe:	6139      	str	r1, [r7, #16]
 8008100:	4629      	mov	r1, r5
 8008102:	eb63 0301 	sbc.w	r3, r3, r1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008114:	4659      	mov	r1, fp
 8008116:	018b      	lsls	r3, r1, #6
 8008118:	4651      	mov	r1, sl
 800811a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800811e:	4651      	mov	r1, sl
 8008120:	018a      	lsls	r2, r1, #6
 8008122:	4651      	mov	r1, sl
 8008124:	ebb2 0801 	subs.w	r8, r2, r1
 8008128:	4659      	mov	r1, fp
 800812a:	eb63 0901 	sbc.w	r9, r3, r1
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800813a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800813e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008142:	4690      	mov	r8, r2
 8008144:	4699      	mov	r9, r3
 8008146:	4623      	mov	r3, r4
 8008148:	eb18 0303 	adds.w	r3, r8, r3
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	462b      	mov	r3, r5
 8008150:	eb49 0303 	adc.w	r3, r9, r3
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008162:	4629      	mov	r1, r5
 8008164:	024b      	lsls	r3, r1, #9
 8008166:	4621      	mov	r1, r4
 8008168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800816c:	4621      	mov	r1, r4
 800816e:	024a      	lsls	r2, r1, #9
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008176:	2200      	movs	r2, #0
 8008178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800817a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800817c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008180:	f7f8 fd8a 	bl	8000c98 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4613      	mov	r3, r2
 800818a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800818c:	e058      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800818e:	4b38      	ldr	r3, [pc, #224]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	099b      	lsrs	r3, r3, #6
 8008194:	2200      	movs	r2, #0
 8008196:	4618      	mov	r0, r3
 8008198:	4611      	mov	r1, r2
 800819a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800819e:	623b      	str	r3, [r7, #32]
 80081a0:	2300      	movs	r3, #0
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081a8:	4642      	mov	r2, r8
 80081aa:	464b      	mov	r3, r9
 80081ac:	f04f 0000 	mov.w	r0, #0
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	0159      	lsls	r1, r3, #5
 80081b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ba:	0150      	lsls	r0, r2, #5
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4641      	mov	r1, r8
 80081c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80081c6:	4649      	mov	r1, r9
 80081c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081e0:	ebb2 040a 	subs.w	r4, r2, sl
 80081e4:	eb63 050b 	sbc.w	r5, r3, fp
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	00eb      	lsls	r3, r5, #3
 80081f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081f6:	00e2      	lsls	r2, r4, #3
 80081f8:	4614      	mov	r4, r2
 80081fa:	461d      	mov	r5, r3
 80081fc:	4643      	mov	r3, r8
 80081fe:	18e3      	adds	r3, r4, r3
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	464b      	mov	r3, r9
 8008204:	eb45 0303 	adc.w	r3, r5, r3
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008216:	4629      	mov	r1, r5
 8008218:	028b      	lsls	r3, r1, #10
 800821a:	4621      	mov	r1, r4
 800821c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008220:	4621      	mov	r1, r4
 8008222:	028a      	lsls	r2, r1, #10
 8008224:	4610      	mov	r0, r2
 8008226:	4619      	mov	r1, r3
 8008228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800822a:	2200      	movs	r2, #0
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	61fa      	str	r2, [r7, #28]
 8008230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008234:	f7f8 fd30 	bl	8000c98 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4613      	mov	r3, r2
 800823e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008240:	4b0b      	ldr	r3, [pc, #44]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x200>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	3301      	adds	r3, #1
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800825a:	e002      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <HAL_RCC_GetSysClockFreq+0x204>)
 800825e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008264:	4618      	mov	r0, r3
 8008266:	3750      	adds	r7, #80	@ 0x50
 8008268:	46bd      	mov	sp, r7
 800826a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800826e:	bf00      	nop
 8008270:	40023800 	.word	0x40023800
 8008274:	00f42400 	.word	0x00f42400
 8008278:	007a1200 	.word	0x007a1200

0800827c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008280:	4b03      	ldr	r3, [pc, #12]	@ (8008290 <HAL_RCC_GetHCLKFreq+0x14>)
 8008282:	681b      	ldr	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000000 	.word	0x20000000

08008294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008298:	f7ff fff0 	bl	800827c <HAL_RCC_GetHCLKFreq>
 800829c:	4602      	mov	r2, r0
 800829e:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	0a9b      	lsrs	r3, r3, #10
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	4903      	ldr	r1, [pc, #12]	@ (80082b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082aa:	5ccb      	ldrb	r3, [r1, r3]
 80082ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40023800 	.word	0x40023800
 80082b8:	0800d994 	.word	0x0800d994

080082bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082c0:	f7ff ffdc 	bl	800827c <HAL_RCC_GetHCLKFreq>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	0b5b      	lsrs	r3, r3, #13
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	4903      	ldr	r1, [pc, #12]	@ (80082e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082d2:	5ccb      	ldrb	r3, [r1, r3]
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d8:	4618      	mov	r0, r3
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	40023800 	.word	0x40023800
 80082e0:	0800d994 	.word	0x0800d994

080082e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e041      	b.n	800837a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fb ffda 	bl	80042c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f000 ffa2 	bl	800926c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e041      	b.n	8008418 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f839 	bl	8008420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f000 ff53 	bl	800926c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start+0x24>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e022      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d109      	bne.n	8008472 <HAL_TIM_PWM_Start+0x3e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	e015      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b08      	cmp	r3, #8
 8008476:	d109      	bne.n	800848c <HAL_TIM_PWM_Start+0x58>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e008      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	bf14      	ite	ne
 8008498:	2301      	movne	r3, #1
 800849a:	2300      	moveq	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e068      	b.n	8008578 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0x82>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084b4:	e013      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start+0x92>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084c4:	e00b      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_PWM_Start+0xa2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084d4:	e003      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2201      	movs	r2, #1
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fb22 	bl	8009b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a23      	ldr	r2, [pc, #140]	@ (8008580 <HAL_TIM_PWM_Start+0x14c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d107      	bne.n	8008506 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008504:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <HAL_TIM_PWM_Start+0x14c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008518:	d013      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a19      	ldr	r2, [pc, #100]	@ (8008584 <HAL_TIM_PWM_Start+0x150>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a17      	ldr	r2, [pc, #92]	@ (8008588 <HAL_TIM_PWM_Start+0x154>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a16      	ldr	r2, [pc, #88]	@ (800858c <HAL_TIM_PWM_Start+0x158>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a14      	ldr	r2, [pc, #80]	@ (8008590 <HAL_TIM_PWM_Start+0x15c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d111      	bne.n	8008566 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b06      	cmp	r3, #6
 8008552:	d010      	beq.n	8008576 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008564:	e007      	b.n	8008576 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0201 	orr.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40014000 	.word	0x40014000

08008594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e041      	b.n	800862a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f839 	bl	8008632 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f000 fe4a 	bl	800926c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <HAL_TIM_IC_Start_IT+0x1e>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008662:	b2db      	uxtb	r3, r3
 8008664:	e013      	b.n	800868e <HAL_TIM_IC_Start_IT+0x46>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b04      	cmp	r3, #4
 800866a:	d104      	bne.n	8008676 <HAL_TIM_IC_Start_IT+0x2e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008672:	b2db      	uxtb	r3, r3
 8008674:	e00b      	b.n	800868e <HAL_TIM_IC_Start_IT+0x46>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d104      	bne.n	8008686 <HAL_TIM_IC_Start_IT+0x3e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008682:	b2db      	uxtb	r3, r3
 8008684:	e003      	b.n	800868e <HAL_TIM_IC_Start_IT+0x46>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800868c:	b2db      	uxtb	r3, r3
 800868e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <HAL_TIM_IC_Start_IT+0x58>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800869c:	b2db      	uxtb	r3, r3
 800869e:	e013      	b.n	80086c8 <HAL_TIM_IC_Start_IT+0x80>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d104      	bne.n	80086b0 <HAL_TIM_IC_Start_IT+0x68>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e00b      	b.n	80086c8 <HAL_TIM_IC_Start_IT+0x80>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d104      	bne.n	80086c0 <HAL_TIM_IC_Start_IT+0x78>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	e003      	b.n	80086c8 <HAL_TIM_IC_Start_IT+0x80>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d102      	bne.n	80086d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80086d0:	7b7b      	ldrb	r3, [r7, #13]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d001      	beq.n	80086da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e0c2      	b.n	8008860 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <HAL_TIM_IC_Start_IT+0xa2>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086e8:	e013      	b.n	8008712 <HAL_TIM_IC_Start_IT+0xca>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_IC_Start_IT+0xb2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086f8:	e00b      	b.n	8008712 <HAL_TIM_IC_Start_IT+0xca>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d104      	bne.n	800870a <HAL_TIM_IC_Start_IT+0xc2>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008708:	e003      	b.n	8008712 <HAL_TIM_IC_Start_IT+0xca>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <HAL_TIM_IC_Start_IT+0xda>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008720:	e013      	b.n	800874a <HAL_TIM_IC_Start_IT+0x102>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d104      	bne.n	8008732 <HAL_TIM_IC_Start_IT+0xea>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008730:	e00b      	b.n	800874a <HAL_TIM_IC_Start_IT+0x102>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b08      	cmp	r3, #8
 8008736:	d104      	bne.n	8008742 <HAL_TIM_IC_Start_IT+0xfa>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008740:	e003      	b.n	800874a <HAL_TIM_IC_Start_IT+0x102>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b0c      	cmp	r3, #12
 800874e:	d841      	bhi.n	80087d4 <HAL_TIM_IC_Start_IT+0x18c>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <HAL_TIM_IC_Start_IT+0x110>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	0800878d 	.word	0x0800878d
 800875c:	080087d5 	.word	0x080087d5
 8008760:	080087d5 	.word	0x080087d5
 8008764:	080087d5 	.word	0x080087d5
 8008768:	0800879f 	.word	0x0800879f
 800876c:	080087d5 	.word	0x080087d5
 8008770:	080087d5 	.word	0x080087d5
 8008774:	080087d5 	.word	0x080087d5
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087d5 	.word	0x080087d5
 8008784:	080087d5 	.word	0x080087d5
 8008788:	080087c3 	.word	0x080087c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0202 	orr.w	r2, r2, #2
 800879a:	60da      	str	r2, [r3, #12]
      break;
 800879c:	e01d      	b.n	80087da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0204 	orr.w	r2, r2, #4
 80087ac:	60da      	str	r2, [r3, #12]
      break;
 80087ae:	e014      	b.n	80087da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0208 	orr.w	r2, r2, #8
 80087be:	60da      	str	r2, [r3, #12]
      break;
 80087c0:	e00b      	b.n	80087da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0210 	orr.w	r2, r2, #16
 80087d0:	60da      	str	r2, [r3, #12]
      break;
 80087d2:	e002      	b.n	80087da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
      break;
 80087d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d13e      	bne.n	800885e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 f9a1 	bl	8009b30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <HAL_TIM_IC_Start_IT+0x220>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d018      	beq.n	800882a <HAL_TIM_IC_Start_IT+0x1e2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008800:	d013      	beq.n	800882a <HAL_TIM_IC_Start_IT+0x1e2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a19      	ldr	r2, [pc, #100]	@ (800886c <HAL_TIM_IC_Start_IT+0x224>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00e      	beq.n	800882a <HAL_TIM_IC_Start_IT+0x1e2>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <HAL_TIM_IC_Start_IT+0x228>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d009      	beq.n	800882a <HAL_TIM_IC_Start_IT+0x1e2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a16      	ldr	r2, [pc, #88]	@ (8008874 <HAL_TIM_IC_Start_IT+0x22c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d004      	beq.n	800882a <HAL_TIM_IC_Start_IT+0x1e2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a14      	ldr	r2, [pc, #80]	@ (8008878 <HAL_TIM_IC_Start_IT+0x230>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d111      	bne.n	800884e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2b06      	cmp	r3, #6
 800883a:	d010      	beq.n	800885e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884c:	e007      	b.n	800885e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0201 	orr.w	r2, r2, #1
 800885c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40014000 	.word	0x40014000

0800887c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e097      	b.n	80089c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7fb fd87 	bl	80043b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088c0:	f023 0307 	bic.w	r3, r3, #7
 80088c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f000 fccb 	bl	800926c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	4313      	orrs	r3, r2
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800891c:	f023 030c 	bic.w	r3, r3, #12
 8008920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800892c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	4313      	orrs	r3, r2
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	011a      	lsls	r2, r3, #4
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	031b      	lsls	r3, r3, #12
 800894c:	4313      	orrs	r3, r2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800895a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	4313      	orrs	r3, r2
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d110      	bne.n	8008a1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d102      	bne.n	8008a04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089fe:	7b7b      	ldrb	r3, [r7, #13]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d001      	beq.n	8008a08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e069      	b.n	8008adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a18:	e031      	b.n	8008a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d110      	bne.n	8008a42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d102      	bne.n	8008a2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a26:	7b3b      	ldrb	r3, [r7, #12]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d001      	beq.n	8008a30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e055      	b.n	8008adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a40:	e01d      	b.n	8008a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d108      	bne.n	8008a5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d105      	bne.n	8008a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a4e:	7b7b      	ldrb	r3, [r7, #13]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d102      	bne.n	8008a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a54:	7b3b      	ldrb	r3, [r7, #12]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d001      	beq.n	8008a5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e03e      	b.n	8008adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_TIM_Encoder_Start+0xc4>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d008      	beq.n	8008a9c <HAL_TIM_Encoder_Start+0xd4>
 8008a8a:	e00f      	b.n	8008aac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2201      	movs	r2, #1
 8008a92:	2100      	movs	r1, #0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f84b 	bl	8009b30 <TIM_CCxChannelCmd>
      break;
 8008a9a:	e016      	b.n	8008aca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 f843 	bl	8009b30 <TIM_CCxChannelCmd>
      break;
 8008aaa:	e00e      	b.n	8008aca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 f83b 	bl	8009b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	2104      	movs	r1, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f834 	bl	8009b30 <TIM_CCxChannelCmd>
      break;
 8008ac8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0201 	orr.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d020      	beq.n	8008b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01b      	beq.n	8008b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0202 	mvn.w	r2, #2
 8008b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7fb f81a 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb7a 	bl	8009230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb81 	bl	8009244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d020      	beq.n	8008b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01b      	beq.n	8008b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f06f 0204 	mvn.w	r2, #4
 8008b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fa fff4 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8008b80:	e005      	b.n	8008b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb54 	bl	8009230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fb5b 	bl	8009244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d020      	beq.n	8008be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01b      	beq.n	8008be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0208 	mvn.w	r2, #8
 8008bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7fa ffce 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8008bcc:	e005      	b.n	8008bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fb2e 	bl	8009230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fb35 	bl	8009244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d020      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f003 0310 	and.w	r3, r3, #16
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01b      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0210 	mvn.w	r2, #16
 8008bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2208      	movs	r2, #8
 8008c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fa ffa8 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8008c18:	e005      	b.n	8008c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fb08 	bl	8009230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb0f 	bl	8009244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0201 	mvn.w	r2, #1
 8008c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fae6 	bl	800921c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00c      	beq.n	8008c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fffc 	bl	8009c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00c      	beq.n	8008c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fae0 	bl	8009258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00c      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0220 	mvn.w	r2, #32
 8008cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 ffce 	bl	8009c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e088      	b.n	8008df4 <HAL_TIM_IC_ConfigChannel+0x130>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11b      	bne.n	8008d28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008d00:	f000 fd5e 	bl	80097c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 020c 	bic.w	r2, r2, #12
 8008d12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6999      	ldr	r1, [r3, #24]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	619a      	str	r2, [r3, #24]
 8008d26:	e060      	b.n	8008dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d11c      	bne.n	8008d68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008d3e:	f000 fdd6 	bl	80098ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6999      	ldr	r1, [r3, #24]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	021a      	lsls	r2, r3, #8
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	619a      	str	r2, [r3, #24]
 8008d66:	e040      	b.n	8008dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d11b      	bne.n	8008da6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008d7e:	f000 fe23 	bl	80099c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 020c 	bic.w	r2, r2, #12
 8008d90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69d9      	ldr	r1, [r3, #28]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	61da      	str	r2, [r3, #28]
 8008da4:	e021      	b.n	8008dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b0c      	cmp	r3, #12
 8008daa:	d11c      	bne.n	8008de6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008dbc:	f000 fe40 	bl	8009a40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69da      	ldr	r2, [r3, #28]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008dce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69d9      	ldr	r1, [r3, #28]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	021a      	lsls	r2, r3, #8
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	61da      	str	r2, [r3, #28]
 8008de4:	e001      	b.n	8008dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e0ae      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	f200 809f 	bhi.w	8008f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008f69 	.word	0x08008f69
 8008e38:	08008f69 	.word	0x08008f69
 8008e3c:	08008f69 	.word	0x08008f69
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008f69 	.word	0x08008f69
 8008e48:	08008f69 	.word	0x08008f69
 8008e4c:	08008f69 	.word	0x08008f69
 8008e50:	08008ee7 	.word	0x08008ee7
 8008e54:	08008f69 	.word	0x08008f69
 8008e58:	08008f69 	.word	0x08008f69
 8008e5c:	08008f69 	.word	0x08008f69
 8008e60:	08008f27 	.word	0x08008f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fa8a 	bl	8009384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0208 	orr.w	r2, r2, #8
 8008e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0204 	bic.w	r2, r2, #4
 8008e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6999      	ldr	r1, [r3, #24]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	619a      	str	r2, [r3, #24]
      break;
 8008ea2:	e064      	b.n	8008f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fad0 	bl	8009450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6999      	ldr	r1, [r3, #24]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	021a      	lsls	r2, r3, #8
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	619a      	str	r2, [r3, #24]
      break;
 8008ee4:	e043      	b.n	8008f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fb1b 	bl	8009528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0208 	orr.w	r2, r2, #8
 8008f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69da      	ldr	r2, [r3, #28]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0204 	bic.w	r2, r2, #4
 8008f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69d9      	ldr	r1, [r3, #28]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	61da      	str	r2, [r3, #28]
      break;
 8008f24:	e023      	b.n	8008f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fb65 	bl	80095fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69da      	ldr	r2, [r3, #28]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69d9      	ldr	r1, [r3, #28]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	021a      	lsls	r2, r3, #8
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	61da      	str	r2, [r3, #28]
      break;
 8008f66:	e002      	b.n	8008f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_TIM_ConfigClockSource+0x1c>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e0b4      	b.n	8009106 <HAL_TIM_ConfigClockSource+0x186>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd4:	d03e      	beq.n	8009054 <HAL_TIM_ConfigClockSource+0xd4>
 8008fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fda:	f200 8087 	bhi.w	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8008fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fe2:	f000 8086 	beq.w	80090f2 <HAL_TIM_ConfigClockSource+0x172>
 8008fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fea:	d87f      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8008fec:	2b70      	cmp	r3, #112	@ 0x70
 8008fee:	d01a      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0xa6>
 8008ff0:	2b70      	cmp	r3, #112	@ 0x70
 8008ff2:	d87b      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8008ff4:	2b60      	cmp	r3, #96	@ 0x60
 8008ff6:	d050      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x11a>
 8008ff8:	2b60      	cmp	r3, #96	@ 0x60
 8008ffa:	d877      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8008ffc:	2b50      	cmp	r3, #80	@ 0x50
 8008ffe:	d03c      	beq.n	800907a <HAL_TIM_ConfigClockSource+0xfa>
 8009000:	2b50      	cmp	r3, #80	@ 0x50
 8009002:	d873      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8009004:	2b40      	cmp	r3, #64	@ 0x40
 8009006:	d058      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x13a>
 8009008:	2b40      	cmp	r3, #64	@ 0x40
 800900a:	d86f      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 800900c:	2b30      	cmp	r3, #48	@ 0x30
 800900e:	d064      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x15a>
 8009010:	2b30      	cmp	r3, #48	@ 0x30
 8009012:	d86b      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 8009014:	2b20      	cmp	r3, #32
 8009016:	d060      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x15a>
 8009018:	2b20      	cmp	r3, #32
 800901a:	d867      	bhi.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d05c      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x15a>
 8009020:	2b10      	cmp	r3, #16
 8009022:	d05a      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x15a>
 8009024:	e062      	b.n	80090ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009036:	f000 fd5b 	bl	8009af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	609a      	str	r2, [r3, #8]
      break;
 8009052:	e04f      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009064:	f000 fd44 	bl	8009af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009076:	609a      	str	r2, [r3, #8]
      break;
 8009078:	e03c      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	461a      	mov	r2, r3
 8009088:	f000 fc02 	bl	8009890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2150      	movs	r1, #80	@ 0x50
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fd11 	bl	8009aba <TIM_ITRx_SetConfig>
      break;
 8009098:	e02c      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090a6:	461a      	mov	r2, r3
 80090a8:	f000 fc5e 	bl	8009968 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2160      	movs	r1, #96	@ 0x60
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fd01 	bl	8009aba <TIM_ITRx_SetConfig>
      break;
 80090b8:	e01c      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	461a      	mov	r2, r3
 80090c8:	f000 fbe2 	bl	8009890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2140      	movs	r1, #64	@ 0x40
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fcf1 	bl	8009aba <TIM_ITRx_SetConfig>
      break;
 80090d8:	e00c      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f000 fce8 	bl	8009aba <TIM_ITRx_SetConfig>
      break;
 80090ea:	e003      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	73fb      	strb	r3, [r7, #15]
      break;
 80090f0:	e000      	b.n	80090f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009122:	2302      	movs	r3, #2
 8009124:	e031      	b.n	800918a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 faaf 	bl	800969c <TIM_SlaveTimer_SetConfig>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e018      	b.n	800918a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009166:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009176:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b0c      	cmp	r3, #12
 80091a6:	d831      	bhi.n	800920c <HAL_TIM_ReadCapturedValue+0x78>
 80091a8:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091e5 	.word	0x080091e5
 80091b4:	0800920d 	.word	0x0800920d
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	0800920d 	.word	0x0800920d
 80091c0:	080091ef 	.word	0x080091ef
 80091c4:	0800920d 	.word	0x0800920d
 80091c8:	0800920d 	.word	0x0800920d
 80091cc:	0800920d 	.word	0x0800920d
 80091d0:	080091f9 	.word	0x080091f9
 80091d4:	0800920d 	.word	0x0800920d
 80091d8:	0800920d 	.word	0x0800920d
 80091dc:	0800920d 	.word	0x0800920d
 80091e0:	08009203 	.word	0x08009203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ea:	60fb      	str	r3, [r7, #12]

      break;
 80091ec:	e00f      	b.n	800920e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f4:	60fb      	str	r3, [r7, #12]

      break;
 80091f6:	e00a      	b.n	800920e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fe:	60fb      	str	r3, [r7, #12]

      break;
 8009200:	e005      	b.n	800920e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009208:	60fb      	str	r3, [r7, #12]

      break;
 800920a:	e000      	b.n	800920e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800920c:	bf00      	nop
  }

  return tmpreg;
 800920e:	68fb      	ldr	r3, [r7, #12]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a3a      	ldr	r2, [pc, #232]	@ (8009368 <TIM_Base_SetConfig+0xfc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00f      	beq.n	80092a4 <TIM_Base_SetConfig+0x38>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928a:	d00b      	beq.n	80092a4 <TIM_Base_SetConfig+0x38>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a37      	ldr	r2, [pc, #220]	@ (800936c <TIM_Base_SetConfig+0x100>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d007      	beq.n	80092a4 <TIM_Base_SetConfig+0x38>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a36      	ldr	r2, [pc, #216]	@ (8009370 <TIM_Base_SetConfig+0x104>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d003      	beq.n	80092a4 <TIM_Base_SetConfig+0x38>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a35      	ldr	r2, [pc, #212]	@ (8009374 <TIM_Base_SetConfig+0x108>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2b      	ldr	r2, [pc, #172]	@ (8009368 <TIM_Base_SetConfig+0xfc>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d01b      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c4:	d017      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a28      	ldr	r2, [pc, #160]	@ (800936c <TIM_Base_SetConfig+0x100>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d013      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a27      	ldr	r2, [pc, #156]	@ (8009370 <TIM_Base_SetConfig+0x104>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00f      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a26      	ldr	r2, [pc, #152]	@ (8009374 <TIM_Base_SetConfig+0x108>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00b      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a25      	ldr	r2, [pc, #148]	@ (8009378 <TIM_Base_SetConfig+0x10c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d007      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a24      	ldr	r2, [pc, #144]	@ (800937c <TIM_Base_SetConfig+0x110>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d003      	beq.n	80092f6 <TIM_Base_SetConfig+0x8a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a23      	ldr	r2, [pc, #140]	@ (8009380 <TIM_Base_SetConfig+0x114>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d108      	bne.n	8009308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	4313      	orrs	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a0e      	ldr	r2, [pc, #56]	@ (8009368 <TIM_Base_SetConfig+0xfc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d103      	bne.n	800933c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d105      	bne.n	800935a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f023 0201 	bic.w	r2, r3, #1
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	611a      	str	r2, [r3, #16]
  }
}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40010000 	.word	0x40010000
 800936c:	40000400 	.word	0x40000400
 8009370:	40000800 	.word	0x40000800
 8009374:	40000c00 	.word	0x40000c00
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400
 8009380:	40014800 	.word	0x40014800

08009384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	f023 0201 	bic.w	r2, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0303 	bic.w	r3, r3, #3
 80093ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f023 0302 	bic.w	r3, r3, #2
 80093cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a1c      	ldr	r2, [pc, #112]	@ (800944c <TIM_OC1_SetConfig+0xc8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d10c      	bne.n	80093fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 0308 	bic.w	r3, r3, #8
 80093e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f023 0304 	bic.w	r3, r3, #4
 80093f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a13      	ldr	r2, [pc, #76]	@ (800944c <TIM_OC1_SetConfig+0xc8>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d111      	bne.n	8009426 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4313      	orrs	r3, r2
 800941a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	621a      	str	r2, [r3, #32]
}
 8009440:	bf00      	nop
 8009442:	371c      	adds	r7, #28
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	40010000 	.word	0x40010000

08009450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	f023 0210 	bic.w	r2, r3, #16
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0320 	bic.w	r3, r3, #32
 800949a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009524 <TIM_OC2_SetConfig+0xd4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d10d      	bne.n	80094cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <TIM_OC2_SetConfig+0xd4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d113      	bne.n	80094fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000

08009528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a1d      	ldr	r2, [pc, #116]	@ (80095f8 <TIM_OC3_SetConfig+0xd0>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d10d      	bne.n	80095a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800958c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a14      	ldr	r2, [pc, #80]	@ (80095f8 <TIM_OC3_SetConfig+0xd0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d113      	bne.n	80095d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	621a      	str	r2, [r3, #32]
}
 80095ec:	bf00      	nop
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	40010000 	.word	0x40010000

080095fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a10      	ldr	r2, [pc, #64]	@ (8009698 <TIM_OC4_SetConfig+0x9c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d109      	bne.n	8009670 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	019b      	lsls	r3, r3, #6
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40010000 	.word	0x40010000

0800969c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b70      	cmp	r3, #112	@ 0x70
 80096e4:	d01a      	beq.n	800971c <TIM_SlaveTimer_SetConfig+0x80>
 80096e6:	2b70      	cmp	r3, #112	@ 0x70
 80096e8:	d860      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 80096ea:	2b60      	cmp	r3, #96	@ 0x60
 80096ec:	d054      	beq.n	8009798 <TIM_SlaveTimer_SetConfig+0xfc>
 80096ee:	2b60      	cmp	r3, #96	@ 0x60
 80096f0:	d85c      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 80096f2:	2b50      	cmp	r3, #80	@ 0x50
 80096f4:	d046      	beq.n	8009784 <TIM_SlaveTimer_SetConfig+0xe8>
 80096f6:	2b50      	cmp	r3, #80	@ 0x50
 80096f8:	d858      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 80096fa:	2b40      	cmp	r3, #64	@ 0x40
 80096fc:	d019      	beq.n	8009732 <TIM_SlaveTimer_SetConfig+0x96>
 80096fe:	2b40      	cmp	r3, #64	@ 0x40
 8009700:	d854      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 8009702:	2b30      	cmp	r3, #48	@ 0x30
 8009704:	d055      	beq.n	80097b2 <TIM_SlaveTimer_SetConfig+0x116>
 8009706:	2b30      	cmp	r3, #48	@ 0x30
 8009708:	d850      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 800970a:	2b20      	cmp	r3, #32
 800970c:	d051      	beq.n	80097b2 <TIM_SlaveTimer_SetConfig+0x116>
 800970e:	2b20      	cmp	r3, #32
 8009710:	d84c      	bhi.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d04d      	beq.n	80097b2 <TIM_SlaveTimer_SetConfig+0x116>
 8009716:	2b10      	cmp	r3, #16
 8009718:	d04b      	beq.n	80097b2 <TIM_SlaveTimer_SetConfig+0x116>
 800971a:	e047      	b.n	80097ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800972c:	f000 f9e0 	bl	8009af0 <TIM_ETR_SetConfig>
      break;
 8009730:	e040      	b.n	80097b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b05      	cmp	r3, #5
 8009738:	d101      	bne.n	800973e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e03b      	b.n	80097b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009764:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	4313      	orrs	r3, r2
 8009770:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]
      break;
 8009782:	e017      	b.n	80097b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009790:	461a      	mov	r2, r3
 8009792:	f000 f87d 	bl	8009890 <TIM_TI1_ConfigInputStage>
      break;
 8009796:	e00d      	b.n	80097b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097a4:	461a      	mov	r2, r3
 80097a6:	f000 f8df 	bl	8009968 <TIM_TI2_ConfigInputStage>
      break;
 80097aa:	e003      	b.n	80097b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	75fb      	strb	r3, [r7, #23]
      break;
 80097b0:	e000      	b.n	80097b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80097b2:	bf00      	nop
  }

  return status;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 0201 	bic.w	r2, r3, #1
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a24      	ldr	r2, [pc, #144]	@ (800987c <TIM_TI1_SetConfig+0xbc>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d013      	beq.n	8009816 <TIM_TI1_SetConfig+0x56>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f4:	d00f      	beq.n	8009816 <TIM_TI1_SetConfig+0x56>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4a21      	ldr	r2, [pc, #132]	@ (8009880 <TIM_TI1_SetConfig+0xc0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00b      	beq.n	8009816 <TIM_TI1_SetConfig+0x56>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4a20      	ldr	r2, [pc, #128]	@ (8009884 <TIM_TI1_SetConfig+0xc4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d007      	beq.n	8009816 <TIM_TI1_SetConfig+0x56>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a1f      	ldr	r2, [pc, #124]	@ (8009888 <TIM_TI1_SetConfig+0xc8>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_TI1_SetConfig+0x56>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4a1e      	ldr	r2, [pc, #120]	@ (800988c <TIM_TI1_SetConfig+0xcc>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d101      	bne.n	800981a <TIM_TI1_SetConfig+0x5a>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <TIM_TI1_SetConfig+0x5c>
 800981a:	2300      	movs	r3, #0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e003      	b.n	800983a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	011b      	lsls	r3, r3, #4
 8009846:	b2db      	uxtb	r3, r3
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f023 030a 	bic.w	r3, r3, #10
 8009854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f003 030a 	and.w	r3, r3, #10
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40014000 	.word	0x40014000

08009890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009890:	b480      	push	{r7}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	f023 0201 	bic.w	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f023 030a 	bic.w	r3, r3, #10
 80098cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	621a      	str	r2, [r3, #32]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b087      	sub	sp, #28
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f023 0210 	bic.w	r2, r3, #16
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800991a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800992c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	031b      	lsls	r3, r3, #12
 8009932:	b29b      	uxth	r3, r3
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009940:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	621a      	str	r2, [r3, #32]
}
 800995c:	bf00      	nop
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f023 0210 	bic.w	r2, r3, #16
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	031b      	lsls	r3, r3, #12
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80099a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	621a      	str	r2, [r3, #32]
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f023 0303 	bic.w	r3, r3, #3
 80099f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009a18:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	621a      	str	r2, [r3, #32]
}
 8009a34:	bf00      	nop
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	031b      	lsls	r3, r3, #12
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009a92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	031b      	lsls	r3, r3, #12
 8009a98:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b085      	sub	sp, #20
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f043 0307 	orr.w	r3, r3, #7
 8009adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	609a      	str	r2, [r3, #8]
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	021a      	lsls	r2, r3, #8
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	609a      	str	r2, [r3, #8]
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f003 031f 	and.w	r3, r3, #31
 8009b42:	2201      	movs	r2, #1
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a1a      	ldr	r2, [r3, #32]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	43db      	mvns	r3, r3
 8009b52:	401a      	ands	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a1a      	ldr	r2, [r3, #32]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	fa01 f303 	lsl.w	r3, r1, r3
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	621a      	str	r2, [r3, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
	...

08009b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e050      	b.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d018      	beq.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009be0:	d013      	beq.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a18      	ldr	r2, [pc, #96]	@ (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00e      	beq.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a16      	ldr	r2, [pc, #88]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d009      	beq.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a15      	ldr	r2, [pc, #84]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d004      	beq.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a13      	ldr	r2, [pc, #76]	@ (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d10c      	bne.n	8009c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	40010000 	.word	0x40010000
 8009c48:	40000400 	.word	0x40000400
 8009c4c:	40000800 	.word	0x40000800
 8009c50:	40000c00 	.word	0x40000c00
 8009c54:	40014000 	.word	0x40014000

08009c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e04a      	b.n	8009d28 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d106      	bne.n	8009cac <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fa fc34 	bl	8004514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2224      	movs	r2, #36	@ 0x24
 8009cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f97b 	bl	8009fc0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695a      	ldr	r2, [r3, #20]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8009ce8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 0208 	orr.w	r2, r2, #8
 8009cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d175      	bne.n	8009e3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <HAL_UART_Transmit+0x2c>
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e06e      	b.n	8009e3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2221      	movs	r2, #33	@ 0x21
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d6e:	f7fb fddf 	bl	8005930 <HAL_GetTick>
 8009d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	88fa      	ldrh	r2, [r7, #6]
 8009d78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	88fa      	ldrh	r2, [r7, #6]
 8009d7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d88:	d108      	bne.n	8009d9c <HAL_UART_Transmit+0x6c>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d104      	bne.n	8009d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	e003      	b.n	8009da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009da4:	e02e      	b.n	8009e04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2180      	movs	r1, #128	@ 0x80
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 f848 	bl	8009e46 <UART_WaitOnFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e03a      	b.n	8009e3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10b      	bne.n	8009de6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ddc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	3302      	adds	r3, #2
 8009de2:	61bb      	str	r3, [r7, #24]
 8009de4:	e007      	b.n	8009df6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	3301      	adds	r3, #1
 8009df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1cb      	bne.n	8009da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2200      	movs	r2, #0
 8009e16:	2140      	movs	r1, #64	@ 0x40
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f814 	bl	8009e46 <UART_WaitOnFlagUntilTimeout>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e006      	b.n	8009e3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e000      	b.n	8009e3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009e3c:	2302      	movs	r3, #2
  }
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b086      	sub	sp, #24
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	603b      	str	r3, [r7, #0]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e56:	e03b      	b.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d037      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e60:	f7fb fd66 	bl	8005930 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	6a3a      	ldr	r2, [r7, #32]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d302      	bcc.n	8009e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e03a      	b.n	8009ef0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d023      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b80      	cmp	r3, #128	@ 0x80
 8009e8c:	d020      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b40      	cmp	r3, #64	@ 0x40
 8009e92:	d01d      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0308 	and.w	r3, r3, #8
 8009e9e:	2b08      	cmp	r3, #8
 8009ea0:	d116      	bne.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	617b      	str	r3, [r7, #20]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f81d 	bl	8009ef8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e00f      	b.n	8009ef0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d0b4      	beq.n	8009e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b095      	sub	sp, #84	@ 0x54
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	330c      	adds	r3, #12
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f20:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e5      	bne.n	8009f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3314      	adds	r3, #20
 8009f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f023 0301 	bic.w	r3, r3, #1
 8009f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3314      	adds	r3, #20
 8009f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d119      	bne.n	8009fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 0310 	bic.w	r3, r3, #16
 8009f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f90:	61ba      	str	r2, [r7, #24]
 8009f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	e841 2300 	strex	r3, r2, [r1]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e5      	bne.n	8009f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009fb2:	bf00      	nop
 8009fb4:	3754      	adds	r7, #84	@ 0x54
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc4:	b0c0      	sub	sp, #256	@ 0x100
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fdc:	68d9      	ldr	r1, [r3, #12]
 8009fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	ea40 0301 	orr.w	r3, r0, r1
 8009fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	4313      	orrs	r3, r2
 800a008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a018:	f021 010c 	bic.w	r1, r1, #12
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a026:	430b      	orrs	r3, r1
 800a028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03a:	6999      	ldr	r1, [r3, #24]
 800a03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	ea40 0301 	orr.w	r3, r0, r1
 800a046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	4b8f      	ldr	r3, [pc, #572]	@ (800a28c <UART_SetConfig+0x2cc>)
 800a050:	429a      	cmp	r2, r3
 800a052:	d005      	beq.n	800a060 <UART_SetConfig+0xa0>
 800a054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	4b8d      	ldr	r3, [pc, #564]	@ (800a290 <UART_SetConfig+0x2d0>)
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d104      	bne.n	800a06a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a060:	f7fe f92c 	bl	80082bc <HAL_RCC_GetPCLK2Freq>
 800a064:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a068:	e003      	b.n	800a072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fe f913 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 800a06e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a07c:	f040 810c 	bne.w	800a298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a084:	2200      	movs	r2, #0
 800a086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a08a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a08e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a092:	4622      	mov	r2, r4
 800a094:	462b      	mov	r3, r5
 800a096:	1891      	adds	r1, r2, r2
 800a098:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a09a:	415b      	adcs	r3, r3
 800a09c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a09e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	eb12 0801 	adds.w	r8, r2, r1
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	eb43 0901 	adc.w	r9, r3, r1
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0c2:	4690      	mov	r8, r2
 800a0c4:	4699      	mov	r9, r3
 800a0c6:	4623      	mov	r3, r4
 800a0c8:	eb18 0303 	adds.w	r3, r8, r3
 800a0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	eb49 0303 	adc.w	r3, r9, r3
 800a0d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a0ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	18db      	adds	r3, r3, r3
 800a0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	eb42 0303 	adc.w	r3, r2, r3
 800a0fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a104:	f7f6 fdc8 	bl	8000c98 <__aeabi_uldivmod>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4b61      	ldr	r3, [pc, #388]	@ (800a294 <UART_SetConfig+0x2d4>)
 800a10e:	fba3 2302 	umull	r2, r3, r3, r2
 800a112:	095b      	lsrs	r3, r3, #5
 800a114:	011c      	lsls	r4, r3, #4
 800a116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a120:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a128:	4642      	mov	r2, r8
 800a12a:	464b      	mov	r3, r9
 800a12c:	1891      	adds	r1, r2, r2
 800a12e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a130:	415b      	adcs	r3, r3
 800a132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a138:	4641      	mov	r1, r8
 800a13a:	eb12 0a01 	adds.w	sl, r2, r1
 800a13e:	4649      	mov	r1, r9
 800a140:	eb43 0b01 	adc.w	fp, r3, r1
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a158:	4692      	mov	sl, r2
 800a15a:	469b      	mov	fp, r3
 800a15c:	4643      	mov	r3, r8
 800a15e:	eb1a 0303 	adds.w	r3, sl, r3
 800a162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a166:	464b      	mov	r3, r9
 800a168:	eb4b 0303 	adc.w	r3, fp, r3
 800a16c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a17c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a184:	460b      	mov	r3, r1
 800a186:	18db      	adds	r3, r3, r3
 800a188:	643b      	str	r3, [r7, #64]	@ 0x40
 800a18a:	4613      	mov	r3, r2
 800a18c:	eb42 0303 	adc.w	r3, r2, r3
 800a190:	647b      	str	r3, [r7, #68]	@ 0x44
 800a192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a19a:	f7f6 fd7d 	bl	8000c98 <__aeabi_uldivmod>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4b3b      	ldr	r3, [pc, #236]	@ (800a294 <UART_SetConfig+0x2d4>)
 800a1a6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	2264      	movs	r2, #100	@ 0x64
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	1acb      	subs	r3, r1, r3
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a1ba:	4b36      	ldr	r3, [pc, #216]	@ (800a294 <UART_SetConfig+0x2d4>)
 800a1bc:	fba3 2302 	umull	r2, r3, r3, r2
 800a1c0:	095b      	lsrs	r3, r3, #5
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a1c8:	441c      	add	r4, r3
 800a1ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a1d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a1dc:	4642      	mov	r2, r8
 800a1de:	464b      	mov	r3, r9
 800a1e0:	1891      	adds	r1, r2, r2
 800a1e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a1e4:	415b      	adcs	r3, r3
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	1851      	adds	r1, r2, r1
 800a1f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	414b      	adcs	r3, r1
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f8:	f04f 0200 	mov.w	r2, #0
 800a1fc:	f04f 0300 	mov.w	r3, #0
 800a200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a204:	4659      	mov	r1, fp
 800a206:	00cb      	lsls	r3, r1, #3
 800a208:	4651      	mov	r1, sl
 800a20a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a20e:	4651      	mov	r1, sl
 800a210:	00ca      	lsls	r2, r1, #3
 800a212:	4610      	mov	r0, r2
 800a214:	4619      	mov	r1, r3
 800a216:	4603      	mov	r3, r0
 800a218:	4642      	mov	r2, r8
 800a21a:	189b      	adds	r3, r3, r2
 800a21c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a220:	464b      	mov	r3, r9
 800a222:	460a      	mov	r2, r1
 800a224:	eb42 0303 	adc.w	r3, r2, r3
 800a228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a238:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a23c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a240:	460b      	mov	r3, r1
 800a242:	18db      	adds	r3, r3, r3
 800a244:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a246:	4613      	mov	r3, r2
 800a248:	eb42 0303 	adc.w	r3, r2, r3
 800a24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a24e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a256:	f7f6 fd1f 	bl	8000c98 <__aeabi_uldivmod>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <UART_SetConfig+0x2d4>)
 800a260:	fba3 1302 	umull	r1, r3, r3, r2
 800a264:	095b      	lsrs	r3, r3, #5
 800a266:	2164      	movs	r1, #100	@ 0x64
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	3332      	adds	r3, #50	@ 0x32
 800a272:	4a08      	ldr	r2, [pc, #32]	@ (800a294 <UART_SetConfig+0x2d4>)
 800a274:	fba2 2303 	umull	r2, r3, r2, r3
 800a278:	095b      	lsrs	r3, r3, #5
 800a27a:	f003 0207 	and.w	r2, r3, #7
 800a27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4422      	add	r2, r4
 800a286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a288:	e106      	b.n	800a498 <UART_SetConfig+0x4d8>
 800a28a:	bf00      	nop
 800a28c:	40011000 	.word	0x40011000
 800a290:	40011400 	.word	0x40011400
 800a294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a2a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a2aa:	4642      	mov	r2, r8
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	1891      	adds	r1, r2, r2
 800a2b0:	6239      	str	r1, [r7, #32]
 800a2b2:	415b      	adcs	r3, r3
 800a2b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	1854      	adds	r4, r2, r1
 800a2be:	4649      	mov	r1, r9
 800a2c0:	eb43 0501 	adc.w	r5, r3, r1
 800a2c4:	f04f 0200 	mov.w	r2, #0
 800a2c8:	f04f 0300 	mov.w	r3, #0
 800a2cc:	00eb      	lsls	r3, r5, #3
 800a2ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2d2:	00e2      	lsls	r2, r4, #3
 800a2d4:	4614      	mov	r4, r2
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	4643      	mov	r3, r8
 800a2da:	18e3      	adds	r3, r4, r3
 800a2dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	eb45 0303 	adc.w	r3, r5, r3
 800a2e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a2fa:	f04f 0200 	mov.w	r2, #0
 800a2fe:	f04f 0300 	mov.w	r3, #0
 800a302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a306:	4629      	mov	r1, r5
 800a308:	008b      	lsls	r3, r1, #2
 800a30a:	4621      	mov	r1, r4
 800a30c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a310:	4621      	mov	r1, r4
 800a312:	008a      	lsls	r2, r1, #2
 800a314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a318:	f7f6 fcbe 	bl	8000c98 <__aeabi_uldivmod>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4b60      	ldr	r3, [pc, #384]	@ (800a4a4 <UART_SetConfig+0x4e4>)
 800a322:	fba3 2302 	umull	r2, r3, r3, r2
 800a326:	095b      	lsrs	r3, r3, #5
 800a328:	011c      	lsls	r4, r3, #4
 800a32a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a33c:	4642      	mov	r2, r8
 800a33e:	464b      	mov	r3, r9
 800a340:	1891      	adds	r1, r2, r2
 800a342:	61b9      	str	r1, [r7, #24]
 800a344:	415b      	adcs	r3, r3
 800a346:	61fb      	str	r3, [r7, #28]
 800a348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a34c:	4641      	mov	r1, r8
 800a34e:	1851      	adds	r1, r2, r1
 800a350:	6139      	str	r1, [r7, #16]
 800a352:	4649      	mov	r1, r9
 800a354:	414b      	adcs	r3, r1
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	f04f 0200 	mov.w	r2, #0
 800a35c:	f04f 0300 	mov.w	r3, #0
 800a360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a364:	4659      	mov	r1, fp
 800a366:	00cb      	lsls	r3, r1, #3
 800a368:	4651      	mov	r1, sl
 800a36a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a36e:	4651      	mov	r1, sl
 800a370:	00ca      	lsls	r2, r1, #3
 800a372:	4610      	mov	r0, r2
 800a374:	4619      	mov	r1, r3
 800a376:	4603      	mov	r3, r0
 800a378:	4642      	mov	r2, r8
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a380:	464b      	mov	r3, r9
 800a382:	460a      	mov	r2, r1
 800a384:	eb42 0303 	adc.w	r3, r2, r3
 800a388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	f04f 0300 	mov.w	r3, #0
 800a3a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	008b      	lsls	r3, r1, #2
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	008a      	lsls	r2, r1, #2
 800a3b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a3b6:	f7f6 fc6f 	bl	8000c98 <__aeabi_uldivmod>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4b38      	ldr	r3, [pc, #224]	@ (800a4a4 <UART_SetConfig+0x4e4>)
 800a3c2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	2264      	movs	r2, #100	@ 0x64
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
 800a3ce:	1acb      	subs	r3, r1, r3
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	3332      	adds	r3, #50	@ 0x32
 800a3d4:	4a33      	ldr	r2, [pc, #204]	@ (800a4a4 <UART_SetConfig+0x4e4>)
 800a3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3e0:	441c      	add	r4, r3
 800a3e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3ea:	677a      	str	r2, [r7, #116]	@ 0x74
 800a3ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a3f0:	4642      	mov	r2, r8
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	1891      	adds	r1, r2, r2
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	415b      	adcs	r3, r3
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a400:	4641      	mov	r1, r8
 800a402:	1851      	adds	r1, r2, r1
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	4649      	mov	r1, r9
 800a408:	414b      	adcs	r3, r1
 800a40a:	607b      	str	r3, [r7, #4]
 800a40c:	f04f 0200 	mov.w	r2, #0
 800a410:	f04f 0300 	mov.w	r3, #0
 800a414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a418:	4659      	mov	r1, fp
 800a41a:	00cb      	lsls	r3, r1, #3
 800a41c:	4651      	mov	r1, sl
 800a41e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a422:	4651      	mov	r1, sl
 800a424:	00ca      	lsls	r2, r1, #3
 800a426:	4610      	mov	r0, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	4642      	mov	r2, r8
 800a42e:	189b      	adds	r3, r3, r2
 800a430:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a432:	464b      	mov	r3, r9
 800a434:	460a      	mov	r2, r1
 800a436:	eb42 0303 	adc.w	r3, r2, r3
 800a43a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	663b      	str	r3, [r7, #96]	@ 0x60
 800a446:	667a      	str	r2, [r7, #100]	@ 0x64
 800a448:	f04f 0200 	mov.w	r2, #0
 800a44c:	f04f 0300 	mov.w	r3, #0
 800a450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a454:	4649      	mov	r1, r9
 800a456:	008b      	lsls	r3, r1, #2
 800a458:	4641      	mov	r1, r8
 800a45a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a45e:	4641      	mov	r1, r8
 800a460:	008a      	lsls	r2, r1, #2
 800a462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a466:	f7f6 fc17 	bl	8000c98 <__aeabi_uldivmod>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <UART_SetConfig+0x4e4>)
 800a470:	fba3 1302 	umull	r1, r3, r3, r2
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	2164      	movs	r1, #100	@ 0x64
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	3332      	adds	r3, #50	@ 0x32
 800a482:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <UART_SetConfig+0x4e4>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	095b      	lsrs	r3, r3, #5
 800a48a:	f003 020f 	and.w	r2, r3, #15
 800a48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4422      	add	r2, r4
 800a496:	609a      	str	r2, [r3, #8]
}
 800a498:	bf00      	nop
 800a49a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4a4:	51eb851f 	.word	0x51eb851f

0800a4a8 <siprintf>:
 800a4a8:	b40e      	push	{r1, r2, r3}
 800a4aa:	b500      	push	{lr}
 800a4ac:	b09c      	sub	sp, #112	@ 0x70
 800a4ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800a4b0:	9002      	str	r0, [sp, #8]
 800a4b2:	9006      	str	r0, [sp, #24]
 800a4b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4b8:	4809      	ldr	r0, [pc, #36]	@ (800a4e0 <siprintf+0x38>)
 800a4ba:	9107      	str	r1, [sp, #28]
 800a4bc:	9104      	str	r1, [sp, #16]
 800a4be:	4909      	ldr	r1, [pc, #36]	@ (800a4e4 <siprintf+0x3c>)
 800a4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c4:	9105      	str	r1, [sp, #20]
 800a4c6:	6800      	ldr	r0, [r0, #0]
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	a902      	add	r1, sp, #8
 800a4cc:	f000 f9a2 	bl	800a814 <_svfiprintf_r>
 800a4d0:	9b02      	ldr	r3, [sp, #8]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	701a      	strb	r2, [r3, #0]
 800a4d6:	b01c      	add	sp, #112	@ 0x70
 800a4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4dc:	b003      	add	sp, #12
 800a4de:	4770      	bx	lr
 800a4e0:	2000000c 	.word	0x2000000c
 800a4e4:	ffff0208 	.word	0xffff0208

0800a4e8 <memset>:
 800a4e8:	4402      	add	r2, r0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d100      	bne.n	800a4f2 <memset+0xa>
 800a4f0:	4770      	bx	lr
 800a4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4f6:	e7f9      	b.n	800a4ec <memset+0x4>

0800a4f8 <__errno>:
 800a4f8:	4b01      	ldr	r3, [pc, #4]	@ (800a500 <__errno+0x8>)
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	2000000c 	.word	0x2000000c

0800a504 <__libc_init_array>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	4d0d      	ldr	r5, [pc, #52]	@ (800a53c <__libc_init_array+0x38>)
 800a508:	4c0d      	ldr	r4, [pc, #52]	@ (800a540 <__libc_init_array+0x3c>)
 800a50a:	1b64      	subs	r4, r4, r5
 800a50c:	10a4      	asrs	r4, r4, #2
 800a50e:	2600      	movs	r6, #0
 800a510:	42a6      	cmp	r6, r4
 800a512:	d109      	bne.n	800a528 <__libc_init_array+0x24>
 800a514:	4d0b      	ldr	r5, [pc, #44]	@ (800a544 <__libc_init_array+0x40>)
 800a516:	4c0c      	ldr	r4, [pc, #48]	@ (800a548 <__libc_init_array+0x44>)
 800a518:	f003 f8be 	bl	800d698 <_init>
 800a51c:	1b64      	subs	r4, r4, r5
 800a51e:	10a4      	asrs	r4, r4, #2
 800a520:	2600      	movs	r6, #0
 800a522:	42a6      	cmp	r6, r4
 800a524:	d105      	bne.n	800a532 <__libc_init_array+0x2e>
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	f855 3b04 	ldr.w	r3, [r5], #4
 800a52c:	4798      	blx	r3
 800a52e:	3601      	adds	r6, #1
 800a530:	e7ee      	b.n	800a510 <__libc_init_array+0xc>
 800a532:	f855 3b04 	ldr.w	r3, [r5], #4
 800a536:	4798      	blx	r3
 800a538:	3601      	adds	r6, #1
 800a53a:	e7f2      	b.n	800a522 <__libc_init_array+0x1e>
 800a53c:	0800dbe0 	.word	0x0800dbe0
 800a540:	0800dbe0 	.word	0x0800dbe0
 800a544:	0800dbe0 	.word	0x0800dbe0
 800a548:	0800dbe4 	.word	0x0800dbe4

0800a54c <__retarget_lock_acquire_recursive>:
 800a54c:	4770      	bx	lr

0800a54e <__retarget_lock_release_recursive>:
 800a54e:	4770      	bx	lr

0800a550 <memcpy>:
 800a550:	440a      	add	r2, r1
 800a552:	4291      	cmp	r1, r2
 800a554:	f100 33ff 	add.w	r3, r0, #4294967295
 800a558:	d100      	bne.n	800a55c <memcpy+0xc>
 800a55a:	4770      	bx	lr
 800a55c:	b510      	push	{r4, lr}
 800a55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a562:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a566:	4291      	cmp	r1, r2
 800a568:	d1f9      	bne.n	800a55e <memcpy+0xe>
 800a56a:	bd10      	pop	{r4, pc}

0800a56c <_free_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4605      	mov	r5, r0
 800a570:	2900      	cmp	r1, #0
 800a572:	d041      	beq.n	800a5f8 <_free_r+0x8c>
 800a574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a578:	1f0c      	subs	r4, r1, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	bfb8      	it	lt
 800a57e:	18e4      	addlt	r4, r4, r3
 800a580:	f000 f8e0 	bl	800a744 <__malloc_lock>
 800a584:	4a1d      	ldr	r2, [pc, #116]	@ (800a5fc <_free_r+0x90>)
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	b933      	cbnz	r3, 800a598 <_free_r+0x2c>
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	6014      	str	r4, [r2, #0]
 800a58e:	4628      	mov	r0, r5
 800a590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a594:	f000 b8dc 	b.w	800a750 <__malloc_unlock>
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d908      	bls.n	800a5ae <_free_r+0x42>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	1821      	adds	r1, r4, r0
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf01      	itttt	eq
 800a5a4:	6819      	ldreq	r1, [r3, #0]
 800a5a6:	685b      	ldreq	r3, [r3, #4]
 800a5a8:	1809      	addeq	r1, r1, r0
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	e7ed      	b.n	800a58a <_free_r+0x1e>
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	b10b      	cbz	r3, 800a5b8 <_free_r+0x4c>
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	d9fa      	bls.n	800a5ae <_free_r+0x42>
 800a5b8:	6811      	ldr	r1, [r2, #0]
 800a5ba:	1850      	adds	r0, r2, r1
 800a5bc:	42a0      	cmp	r0, r4
 800a5be:	d10b      	bne.n	800a5d8 <_free_r+0x6c>
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	4401      	add	r1, r0
 800a5c4:	1850      	adds	r0, r2, r1
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	6011      	str	r1, [r2, #0]
 800a5ca:	d1e0      	bne.n	800a58e <_free_r+0x22>
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	6053      	str	r3, [r2, #4]
 800a5d2:	4408      	add	r0, r1
 800a5d4:	6010      	str	r0, [r2, #0]
 800a5d6:	e7da      	b.n	800a58e <_free_r+0x22>
 800a5d8:	d902      	bls.n	800a5e0 <_free_r+0x74>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	e7d6      	b.n	800a58e <_free_r+0x22>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	1821      	adds	r1, r4, r0
 800a5e4:	428b      	cmp	r3, r1
 800a5e6:	bf04      	itt	eq
 800a5e8:	6819      	ldreq	r1, [r3, #0]
 800a5ea:	685b      	ldreq	r3, [r3, #4]
 800a5ec:	6063      	str	r3, [r4, #4]
 800a5ee:	bf04      	itt	eq
 800a5f0:	1809      	addeq	r1, r1, r0
 800a5f2:	6021      	streq	r1, [r4, #0]
 800a5f4:	6054      	str	r4, [r2, #4]
 800a5f6:	e7ca      	b.n	800a58e <_free_r+0x22>
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000428 	.word	0x20000428

0800a600 <sbrk_aligned>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	4e0f      	ldr	r6, [pc, #60]	@ (800a640 <sbrk_aligned+0x40>)
 800a604:	460c      	mov	r4, r1
 800a606:	6831      	ldr	r1, [r6, #0]
 800a608:	4605      	mov	r5, r0
 800a60a:	b911      	cbnz	r1, 800a612 <sbrk_aligned+0x12>
 800a60c:	f000 fba6 	bl	800ad5c <_sbrk_r>
 800a610:	6030      	str	r0, [r6, #0]
 800a612:	4621      	mov	r1, r4
 800a614:	4628      	mov	r0, r5
 800a616:	f000 fba1 	bl	800ad5c <_sbrk_r>
 800a61a:	1c43      	adds	r3, r0, #1
 800a61c:	d103      	bne.n	800a626 <sbrk_aligned+0x26>
 800a61e:	f04f 34ff 	mov.w	r4, #4294967295
 800a622:	4620      	mov	r0, r4
 800a624:	bd70      	pop	{r4, r5, r6, pc}
 800a626:	1cc4      	adds	r4, r0, #3
 800a628:	f024 0403 	bic.w	r4, r4, #3
 800a62c:	42a0      	cmp	r0, r4
 800a62e:	d0f8      	beq.n	800a622 <sbrk_aligned+0x22>
 800a630:	1a21      	subs	r1, r4, r0
 800a632:	4628      	mov	r0, r5
 800a634:	f000 fb92 	bl	800ad5c <_sbrk_r>
 800a638:	3001      	adds	r0, #1
 800a63a:	d1f2      	bne.n	800a622 <sbrk_aligned+0x22>
 800a63c:	e7ef      	b.n	800a61e <sbrk_aligned+0x1e>
 800a63e:	bf00      	nop
 800a640:	20000424 	.word	0x20000424

0800a644 <_malloc_r>:
 800a644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a648:	1ccd      	adds	r5, r1, #3
 800a64a:	f025 0503 	bic.w	r5, r5, #3
 800a64e:	3508      	adds	r5, #8
 800a650:	2d0c      	cmp	r5, #12
 800a652:	bf38      	it	cc
 800a654:	250c      	movcc	r5, #12
 800a656:	2d00      	cmp	r5, #0
 800a658:	4606      	mov	r6, r0
 800a65a:	db01      	blt.n	800a660 <_malloc_r+0x1c>
 800a65c:	42a9      	cmp	r1, r5
 800a65e:	d904      	bls.n	800a66a <_malloc_r+0x26>
 800a660:	230c      	movs	r3, #12
 800a662:	6033      	str	r3, [r6, #0]
 800a664:	2000      	movs	r0, #0
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a740 <_malloc_r+0xfc>
 800a66e:	f000 f869 	bl	800a744 <__malloc_lock>
 800a672:	f8d8 3000 	ldr.w	r3, [r8]
 800a676:	461c      	mov	r4, r3
 800a678:	bb44      	cbnz	r4, 800a6cc <_malloc_r+0x88>
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7ff ffbf 	bl	800a600 <sbrk_aligned>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	4604      	mov	r4, r0
 800a686:	d158      	bne.n	800a73a <_malloc_r+0xf6>
 800a688:	f8d8 4000 	ldr.w	r4, [r8]
 800a68c:	4627      	mov	r7, r4
 800a68e:	2f00      	cmp	r7, #0
 800a690:	d143      	bne.n	800a71a <_malloc_r+0xd6>
 800a692:	2c00      	cmp	r4, #0
 800a694:	d04b      	beq.n	800a72e <_malloc_r+0xea>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	4639      	mov	r1, r7
 800a69a:	4630      	mov	r0, r6
 800a69c:	eb04 0903 	add.w	r9, r4, r3
 800a6a0:	f000 fb5c 	bl	800ad5c <_sbrk_r>
 800a6a4:	4581      	cmp	r9, r0
 800a6a6:	d142      	bne.n	800a72e <_malloc_r+0xea>
 800a6a8:	6821      	ldr	r1, [r4, #0]
 800a6aa:	1a6d      	subs	r5, r5, r1
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f7ff ffa6 	bl	800a600 <sbrk_aligned>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d03a      	beq.n	800a72e <_malloc_r+0xea>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	442b      	add	r3, r5
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	f8d8 3000 	ldr.w	r3, [r8]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	bb62      	cbnz	r2, 800a720 <_malloc_r+0xdc>
 800a6c6:	f8c8 7000 	str.w	r7, [r8]
 800a6ca:	e00f      	b.n	800a6ec <_malloc_r+0xa8>
 800a6cc:	6822      	ldr	r2, [r4, #0]
 800a6ce:	1b52      	subs	r2, r2, r5
 800a6d0:	d420      	bmi.n	800a714 <_malloc_r+0xd0>
 800a6d2:	2a0b      	cmp	r2, #11
 800a6d4:	d917      	bls.n	800a706 <_malloc_r+0xc2>
 800a6d6:	1961      	adds	r1, r4, r5
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	6025      	str	r5, [r4, #0]
 800a6dc:	bf18      	it	ne
 800a6de:	6059      	strne	r1, [r3, #4]
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	bf08      	it	eq
 800a6e4:	f8c8 1000 	streq.w	r1, [r8]
 800a6e8:	5162      	str	r2, [r4, r5]
 800a6ea:	604b      	str	r3, [r1, #4]
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f000 f82f 	bl	800a750 <__malloc_unlock>
 800a6f2:	f104 000b 	add.w	r0, r4, #11
 800a6f6:	1d23      	adds	r3, r4, #4
 800a6f8:	f020 0007 	bic.w	r0, r0, #7
 800a6fc:	1ac2      	subs	r2, r0, r3
 800a6fe:	bf1c      	itt	ne
 800a700:	1a1b      	subne	r3, r3, r0
 800a702:	50a3      	strne	r3, [r4, r2]
 800a704:	e7af      	b.n	800a666 <_malloc_r+0x22>
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	bf0c      	ite	eq
 800a70c:	f8c8 2000 	streq.w	r2, [r8]
 800a710:	605a      	strne	r2, [r3, #4]
 800a712:	e7eb      	b.n	800a6ec <_malloc_r+0xa8>
 800a714:	4623      	mov	r3, r4
 800a716:	6864      	ldr	r4, [r4, #4]
 800a718:	e7ae      	b.n	800a678 <_malloc_r+0x34>
 800a71a:	463c      	mov	r4, r7
 800a71c:	687f      	ldr	r7, [r7, #4]
 800a71e:	e7b6      	b.n	800a68e <_malloc_r+0x4a>
 800a720:	461a      	mov	r2, r3
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	42a3      	cmp	r3, r4
 800a726:	d1fb      	bne.n	800a720 <_malloc_r+0xdc>
 800a728:	2300      	movs	r3, #0
 800a72a:	6053      	str	r3, [r2, #4]
 800a72c:	e7de      	b.n	800a6ec <_malloc_r+0xa8>
 800a72e:	230c      	movs	r3, #12
 800a730:	6033      	str	r3, [r6, #0]
 800a732:	4630      	mov	r0, r6
 800a734:	f000 f80c 	bl	800a750 <__malloc_unlock>
 800a738:	e794      	b.n	800a664 <_malloc_r+0x20>
 800a73a:	6005      	str	r5, [r0, #0]
 800a73c:	e7d6      	b.n	800a6ec <_malloc_r+0xa8>
 800a73e:	bf00      	nop
 800a740:	20000428 	.word	0x20000428

0800a744 <__malloc_lock>:
 800a744:	4801      	ldr	r0, [pc, #4]	@ (800a74c <__malloc_lock+0x8>)
 800a746:	f7ff bf01 	b.w	800a54c <__retarget_lock_acquire_recursive>
 800a74a:	bf00      	nop
 800a74c:	20000420 	.word	0x20000420

0800a750 <__malloc_unlock>:
 800a750:	4801      	ldr	r0, [pc, #4]	@ (800a758 <__malloc_unlock+0x8>)
 800a752:	f7ff befc 	b.w	800a54e <__retarget_lock_release_recursive>
 800a756:	bf00      	nop
 800a758:	20000420 	.word	0x20000420

0800a75c <__ssputs_r>:
 800a75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a760:	688e      	ldr	r6, [r1, #8]
 800a762:	461f      	mov	r7, r3
 800a764:	42be      	cmp	r6, r7
 800a766:	680b      	ldr	r3, [r1, #0]
 800a768:	4682      	mov	sl, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	4690      	mov	r8, r2
 800a76e:	d82d      	bhi.n	800a7cc <__ssputs_r+0x70>
 800a770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a778:	d026      	beq.n	800a7c8 <__ssputs_r+0x6c>
 800a77a:	6965      	ldr	r5, [r4, #20]
 800a77c:	6909      	ldr	r1, [r1, #16]
 800a77e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a782:	eba3 0901 	sub.w	r9, r3, r1
 800a786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a78a:	1c7b      	adds	r3, r7, #1
 800a78c:	444b      	add	r3, r9
 800a78e:	106d      	asrs	r5, r5, #1
 800a790:	429d      	cmp	r5, r3
 800a792:	bf38      	it	cc
 800a794:	461d      	movcc	r5, r3
 800a796:	0553      	lsls	r3, r2, #21
 800a798:	d527      	bpl.n	800a7ea <__ssputs_r+0x8e>
 800a79a:	4629      	mov	r1, r5
 800a79c:	f7ff ff52 	bl	800a644 <_malloc_r>
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	b360      	cbz	r0, 800a7fe <__ssputs_r+0xa2>
 800a7a4:	6921      	ldr	r1, [r4, #16]
 800a7a6:	464a      	mov	r2, r9
 800a7a8:	f7ff fed2 	bl	800a550 <memcpy>
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	6126      	str	r6, [r4, #16]
 800a7ba:	6165      	str	r5, [r4, #20]
 800a7bc:	444e      	add	r6, r9
 800a7be:	eba5 0509 	sub.w	r5, r5, r9
 800a7c2:	6026      	str	r6, [r4, #0]
 800a7c4:	60a5      	str	r5, [r4, #8]
 800a7c6:	463e      	mov	r6, r7
 800a7c8:	42be      	cmp	r6, r7
 800a7ca:	d900      	bls.n	800a7ce <__ssputs_r+0x72>
 800a7cc:	463e      	mov	r6, r7
 800a7ce:	6820      	ldr	r0, [r4, #0]
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	f000 faa8 	bl	800ad28 <memmove>
 800a7d8:	68a3      	ldr	r3, [r4, #8]
 800a7da:	1b9b      	subs	r3, r3, r6
 800a7dc:	60a3      	str	r3, [r4, #8]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	4433      	add	r3, r6
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	f000 fac6 	bl	800ad7c <_realloc_r>
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d1e0      	bne.n	800a7b8 <__ssputs_r+0x5c>
 800a7f6:	6921      	ldr	r1, [r4, #16]
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f7ff feb7 	bl	800a56c <_free_r>
 800a7fe:	230c      	movs	r3, #12
 800a800:	f8ca 3000 	str.w	r3, [sl]
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	e7e9      	b.n	800a7e6 <__ssputs_r+0x8a>
	...

0800a814 <_svfiprintf_r>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	4698      	mov	r8, r3
 800a81a:	898b      	ldrh	r3, [r1, #12]
 800a81c:	061b      	lsls	r3, r3, #24
 800a81e:	b09d      	sub	sp, #116	@ 0x74
 800a820:	4607      	mov	r7, r0
 800a822:	460d      	mov	r5, r1
 800a824:	4614      	mov	r4, r2
 800a826:	d510      	bpl.n	800a84a <_svfiprintf_r+0x36>
 800a828:	690b      	ldr	r3, [r1, #16]
 800a82a:	b973      	cbnz	r3, 800a84a <_svfiprintf_r+0x36>
 800a82c:	2140      	movs	r1, #64	@ 0x40
 800a82e:	f7ff ff09 	bl	800a644 <_malloc_r>
 800a832:	6028      	str	r0, [r5, #0]
 800a834:	6128      	str	r0, [r5, #16]
 800a836:	b930      	cbnz	r0, 800a846 <_svfiprintf_r+0x32>
 800a838:	230c      	movs	r3, #12
 800a83a:	603b      	str	r3, [r7, #0]
 800a83c:	f04f 30ff 	mov.w	r0, #4294967295
 800a840:	b01d      	add	sp, #116	@ 0x74
 800a842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a846:	2340      	movs	r3, #64	@ 0x40
 800a848:	616b      	str	r3, [r5, #20]
 800a84a:	2300      	movs	r3, #0
 800a84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84e:	2320      	movs	r3, #32
 800a850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a854:	f8cd 800c 	str.w	r8, [sp, #12]
 800a858:	2330      	movs	r3, #48	@ 0x30
 800a85a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9f8 <_svfiprintf_r+0x1e4>
 800a85e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a862:	f04f 0901 	mov.w	r9, #1
 800a866:	4623      	mov	r3, r4
 800a868:	469a      	mov	sl, r3
 800a86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a86e:	b10a      	cbz	r2, 800a874 <_svfiprintf_r+0x60>
 800a870:	2a25      	cmp	r2, #37	@ 0x25
 800a872:	d1f9      	bne.n	800a868 <_svfiprintf_r+0x54>
 800a874:	ebba 0b04 	subs.w	fp, sl, r4
 800a878:	d00b      	beq.n	800a892 <_svfiprintf_r+0x7e>
 800a87a:	465b      	mov	r3, fp
 800a87c:	4622      	mov	r2, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	4638      	mov	r0, r7
 800a882:	f7ff ff6b 	bl	800a75c <__ssputs_r>
 800a886:	3001      	adds	r0, #1
 800a888:	f000 80a7 	beq.w	800a9da <_svfiprintf_r+0x1c6>
 800a88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a88e:	445a      	add	r2, fp
 800a890:	9209      	str	r2, [sp, #36]	@ 0x24
 800a892:	f89a 3000 	ldrb.w	r3, [sl]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 809f 	beq.w	800a9da <_svfiprintf_r+0x1c6>
 800a89c:	2300      	movs	r3, #0
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a6:	f10a 0a01 	add.w	sl, sl, #1
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	9307      	str	r3, [sp, #28]
 800a8ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8b4:	4654      	mov	r4, sl
 800a8b6:	2205      	movs	r2, #5
 800a8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8bc:	484e      	ldr	r0, [pc, #312]	@ (800a9f8 <_svfiprintf_r+0x1e4>)
 800a8be:	f7f5 fc97 	bl	80001f0 <memchr>
 800a8c2:	9a04      	ldr	r2, [sp, #16]
 800a8c4:	b9d8      	cbnz	r0, 800a8fe <_svfiprintf_r+0xea>
 800a8c6:	06d0      	lsls	r0, r2, #27
 800a8c8:	bf44      	itt	mi
 800a8ca:	2320      	movmi	r3, #32
 800a8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8d0:	0711      	lsls	r1, r2, #28
 800a8d2:	bf44      	itt	mi
 800a8d4:	232b      	movmi	r3, #43	@ 0x2b
 800a8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8da:	f89a 3000 	ldrb.w	r3, [sl]
 800a8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8e0:	d015      	beq.n	800a90e <_svfiprintf_r+0xfa>
 800a8e2:	9a07      	ldr	r2, [sp, #28]
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f04f 0c0a 	mov.w	ip, #10
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8f2:	3b30      	subs	r3, #48	@ 0x30
 800a8f4:	2b09      	cmp	r3, #9
 800a8f6:	d94b      	bls.n	800a990 <_svfiprintf_r+0x17c>
 800a8f8:	b1b0      	cbz	r0, 800a928 <_svfiprintf_r+0x114>
 800a8fa:	9207      	str	r2, [sp, #28]
 800a8fc:	e014      	b.n	800a928 <_svfiprintf_r+0x114>
 800a8fe:	eba0 0308 	sub.w	r3, r0, r8
 800a902:	fa09 f303 	lsl.w	r3, r9, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	46a2      	mov	sl, r4
 800a90c:	e7d2      	b.n	800a8b4 <_svfiprintf_r+0xa0>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d19      	adds	r1, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9103      	str	r1, [sp, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfbb      	ittet	lt
 800a91a:	425b      	neglt	r3, r3
 800a91c:	f042 0202 	orrlt.w	r2, r2, #2
 800a920:	9307      	strge	r3, [sp, #28]
 800a922:	9307      	strlt	r3, [sp, #28]
 800a924:	bfb8      	it	lt
 800a926:	9204      	strlt	r2, [sp, #16]
 800a928:	7823      	ldrb	r3, [r4, #0]
 800a92a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a92c:	d10a      	bne.n	800a944 <_svfiprintf_r+0x130>
 800a92e:	7863      	ldrb	r3, [r4, #1]
 800a930:	2b2a      	cmp	r3, #42	@ 0x2a
 800a932:	d132      	bne.n	800a99a <_svfiprintf_r+0x186>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	1d1a      	adds	r2, r3, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	9203      	str	r2, [sp, #12]
 800a93c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a940:	3402      	adds	r4, #2
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa08 <_svfiprintf_r+0x1f4>
 800a948:	7821      	ldrb	r1, [r4, #0]
 800a94a:	2203      	movs	r2, #3
 800a94c:	4650      	mov	r0, sl
 800a94e:	f7f5 fc4f 	bl	80001f0 <memchr>
 800a952:	b138      	cbz	r0, 800a964 <_svfiprintf_r+0x150>
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	eba0 000a 	sub.w	r0, r0, sl
 800a95a:	2240      	movs	r2, #64	@ 0x40
 800a95c:	4082      	lsls	r2, r0
 800a95e:	4313      	orrs	r3, r2
 800a960:	3401      	adds	r4, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	4824      	ldr	r0, [pc, #144]	@ (800a9fc <_svfiprintf_r+0x1e8>)
 800a96a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a96e:	2206      	movs	r2, #6
 800a970:	f7f5 fc3e 	bl	80001f0 <memchr>
 800a974:	2800      	cmp	r0, #0
 800a976:	d036      	beq.n	800a9e6 <_svfiprintf_r+0x1d2>
 800a978:	4b21      	ldr	r3, [pc, #132]	@ (800aa00 <_svfiprintf_r+0x1ec>)
 800a97a:	bb1b      	cbnz	r3, 800a9c4 <_svfiprintf_r+0x1b0>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3307      	adds	r3, #7
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98a:	4433      	add	r3, r6
 800a98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a98e:	e76a      	b.n	800a866 <_svfiprintf_r+0x52>
 800a990:	fb0c 3202 	mla	r2, ip, r2, r3
 800a994:	460c      	mov	r4, r1
 800a996:	2001      	movs	r0, #1
 800a998:	e7a8      	b.n	800a8ec <_svfiprintf_r+0xd8>
 800a99a:	2300      	movs	r3, #0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ac:	3a30      	subs	r2, #48	@ 0x30
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d903      	bls.n	800a9ba <_svfiprintf_r+0x1a6>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c6      	beq.n	800a944 <_svfiprintf_r+0x130>
 800a9b6:	9105      	str	r1, [sp, #20]
 800a9b8:	e7c4      	b.n	800a944 <_svfiprintf_r+0x130>
 800a9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9be:	4604      	mov	r4, r0
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f0      	b.n	800a9a6 <_svfiprintf_r+0x192>
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800aa04 <_svfiprintf_r+0x1f0>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f3af 8000 	nop.w
 800a9d4:	1c42      	adds	r2, r0, #1
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	d1d6      	bne.n	800a988 <_svfiprintf_r+0x174>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	065b      	lsls	r3, r3, #25
 800a9de:	f53f af2d 	bmi.w	800a83c <_svfiprintf_r+0x28>
 800a9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9e4:	e72c      	b.n	800a840 <_svfiprintf_r+0x2c>
 800a9e6:	ab03      	add	r3, sp, #12
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4b05      	ldr	r3, [pc, #20]	@ (800aa04 <_svfiprintf_r+0x1f0>)
 800a9ee:	a904      	add	r1, sp, #16
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f000 f879 	bl	800aae8 <_printf_i>
 800a9f6:	e7ed      	b.n	800a9d4 <_svfiprintf_r+0x1c0>
 800a9f8:	0800d99c 	.word	0x0800d99c
 800a9fc:	0800d9a6 	.word	0x0800d9a6
 800aa00:	00000000 	.word	0x00000000
 800aa04:	0800a75d 	.word	0x0800a75d
 800aa08:	0800d9a2 	.word	0x0800d9a2

0800aa0c <_printf_common>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	4616      	mov	r6, r2
 800aa12:	4698      	mov	r8, r3
 800aa14:	688a      	ldr	r2, [r1, #8]
 800aa16:	690b      	ldr	r3, [r1, #16]
 800aa18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	bfb8      	it	lt
 800aa20:	4613      	movlt	r3, r2
 800aa22:	6033      	str	r3, [r6, #0]
 800aa24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa28:	4607      	mov	r7, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b10a      	cbz	r2, 800aa32 <_printf_common+0x26>
 800aa2e:	3301      	adds	r3, #1
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	0699      	lsls	r1, r3, #26
 800aa36:	bf42      	ittt	mi
 800aa38:	6833      	ldrmi	r3, [r6, #0]
 800aa3a:	3302      	addmi	r3, #2
 800aa3c:	6033      	strmi	r3, [r6, #0]
 800aa3e:	6825      	ldr	r5, [r4, #0]
 800aa40:	f015 0506 	ands.w	r5, r5, #6
 800aa44:	d106      	bne.n	800aa54 <_printf_common+0x48>
 800aa46:	f104 0a19 	add.w	sl, r4, #25
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dc26      	bgt.n	800aaa2 <_printf_common+0x96>
 800aa54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	3b00      	subs	r3, #0
 800aa5c:	bf18      	it	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	0692      	lsls	r2, r2, #26
 800aa62:	d42b      	bmi.n	800aabc <_printf_common+0xb0>
 800aa64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa68:	4641      	mov	r1, r8
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	47c8      	blx	r9
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d01e      	beq.n	800aab0 <_printf_common+0xa4>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	f003 0306 	and.w	r3, r3, #6
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	bf02      	ittt	eq
 800aa7e:	68e5      	ldreq	r5, [r4, #12]
 800aa80:	6833      	ldreq	r3, [r6, #0]
 800aa82:	1aed      	subeq	r5, r5, r3
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	bf0c      	ite	eq
 800aa88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa8c:	2500      	movne	r5, #0
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	bfc4      	itt	gt
 800aa92:	1a9b      	subgt	r3, r3, r2
 800aa94:	18ed      	addgt	r5, r5, r3
 800aa96:	2600      	movs	r6, #0
 800aa98:	341a      	adds	r4, #26
 800aa9a:	42b5      	cmp	r5, r6
 800aa9c:	d11a      	bne.n	800aad4 <_printf_common+0xc8>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e008      	b.n	800aab4 <_printf_common+0xa8>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4652      	mov	r2, sl
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	47c8      	blx	r9
 800aaac:	3001      	adds	r0, #1
 800aaae:	d103      	bne.n	800aab8 <_printf_common+0xac>
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab8:	3501      	adds	r5, #1
 800aaba:	e7c6      	b.n	800aa4a <_printf_common+0x3e>
 800aabc:	18e1      	adds	r1, r4, r3
 800aabe:	1c5a      	adds	r2, r3, #1
 800aac0:	2030      	movs	r0, #48	@ 0x30
 800aac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aac6:	4422      	add	r2, r4
 800aac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aacc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aad0:	3302      	adds	r3, #2
 800aad2:	e7c7      	b.n	800aa64 <_printf_common+0x58>
 800aad4:	2301      	movs	r3, #1
 800aad6:	4622      	mov	r2, r4
 800aad8:	4641      	mov	r1, r8
 800aada:	4638      	mov	r0, r7
 800aadc:	47c8      	blx	r9
 800aade:	3001      	adds	r0, #1
 800aae0:	d0e6      	beq.n	800aab0 <_printf_common+0xa4>
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7d9      	b.n	800aa9a <_printf_common+0x8e>
	...

0800aae8 <_printf_i>:
 800aae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	7e0f      	ldrb	r7, [r1, #24]
 800aaee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaf0:	2f78      	cmp	r7, #120	@ 0x78
 800aaf2:	4691      	mov	r9, r2
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	469a      	mov	sl, r3
 800aafa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aafe:	d807      	bhi.n	800ab10 <_printf_i+0x28>
 800ab00:	2f62      	cmp	r7, #98	@ 0x62
 800ab02:	d80a      	bhi.n	800ab1a <_printf_i+0x32>
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	f000 80d2 	beq.w	800acae <_printf_i+0x1c6>
 800ab0a:	2f58      	cmp	r7, #88	@ 0x58
 800ab0c:	f000 80b9 	beq.w	800ac82 <_printf_i+0x19a>
 800ab10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab18:	e03a      	b.n	800ab90 <_printf_i+0xa8>
 800ab1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab1e:	2b15      	cmp	r3, #21
 800ab20:	d8f6      	bhi.n	800ab10 <_printf_i+0x28>
 800ab22:	a101      	add	r1, pc, #4	@ (adr r1, 800ab28 <_printf_i+0x40>)
 800ab24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab28:	0800ab81 	.word	0x0800ab81
 800ab2c:	0800ab95 	.word	0x0800ab95
 800ab30:	0800ab11 	.word	0x0800ab11
 800ab34:	0800ab11 	.word	0x0800ab11
 800ab38:	0800ab11 	.word	0x0800ab11
 800ab3c:	0800ab11 	.word	0x0800ab11
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800ab11 	.word	0x0800ab11
 800ab48:	0800ab11 	.word	0x0800ab11
 800ab4c:	0800ab11 	.word	0x0800ab11
 800ab50:	0800ab11 	.word	0x0800ab11
 800ab54:	0800ac95 	.word	0x0800ac95
 800ab58:	0800abbf 	.word	0x0800abbf
 800ab5c:	0800ac4f 	.word	0x0800ac4f
 800ab60:	0800ab11 	.word	0x0800ab11
 800ab64:	0800ab11 	.word	0x0800ab11
 800ab68:	0800acb7 	.word	0x0800acb7
 800ab6c:	0800ab11 	.word	0x0800ab11
 800ab70:	0800abbf 	.word	0x0800abbf
 800ab74:	0800ab11 	.word	0x0800ab11
 800ab78:	0800ab11 	.word	0x0800ab11
 800ab7c:	0800ac57 	.word	0x0800ac57
 800ab80:	6833      	ldr	r3, [r6, #0]
 800ab82:	1d1a      	adds	r2, r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6032      	str	r2, [r6, #0]
 800ab88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab90:	2301      	movs	r3, #1
 800ab92:	e09d      	b.n	800acd0 <_printf_i+0x1e8>
 800ab94:	6833      	ldr	r3, [r6, #0]
 800ab96:	6820      	ldr	r0, [r4, #0]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	6031      	str	r1, [r6, #0]
 800ab9c:	0606      	lsls	r6, r0, #24
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0xbc>
 800aba0:	681d      	ldr	r5, [r3, #0]
 800aba2:	e003      	b.n	800abac <_printf_i+0xc4>
 800aba4:	0645      	lsls	r5, r0, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0xb8>
 800aba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abac:	2d00      	cmp	r5, #0
 800abae:	da03      	bge.n	800abb8 <_printf_i+0xd0>
 800abb0:	232d      	movs	r3, #45	@ 0x2d
 800abb2:	426d      	negs	r5, r5
 800abb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb8:	4859      	ldr	r0, [pc, #356]	@ (800ad20 <_printf_i+0x238>)
 800abba:	230a      	movs	r3, #10
 800abbc:	e011      	b.n	800abe2 <_printf_i+0xfa>
 800abbe:	6821      	ldr	r1, [r4, #0]
 800abc0:	6833      	ldr	r3, [r6, #0]
 800abc2:	0608      	lsls	r0, r1, #24
 800abc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800abc8:	d402      	bmi.n	800abd0 <_printf_i+0xe8>
 800abca:	0649      	lsls	r1, r1, #25
 800abcc:	bf48      	it	mi
 800abce:	b2ad      	uxthmi	r5, r5
 800abd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800abd2:	4853      	ldr	r0, [pc, #332]	@ (800ad20 <_printf_i+0x238>)
 800abd4:	6033      	str	r3, [r6, #0]
 800abd6:	bf14      	ite	ne
 800abd8:	230a      	movne	r3, #10
 800abda:	2308      	moveq	r3, #8
 800abdc:	2100      	movs	r1, #0
 800abde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abe2:	6866      	ldr	r6, [r4, #4]
 800abe4:	60a6      	str	r6, [r4, #8]
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	bfa2      	ittt	ge
 800abea:	6821      	ldrge	r1, [r4, #0]
 800abec:	f021 0104 	bicge.w	r1, r1, #4
 800abf0:	6021      	strge	r1, [r4, #0]
 800abf2:	b90d      	cbnz	r5, 800abf8 <_printf_i+0x110>
 800abf4:	2e00      	cmp	r6, #0
 800abf6:	d04b      	beq.n	800ac90 <_printf_i+0x1a8>
 800abf8:	4616      	mov	r6, r2
 800abfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800abfe:	fb03 5711 	mls	r7, r3, r1, r5
 800ac02:	5dc7      	ldrb	r7, [r0, r7]
 800ac04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac08:	462f      	mov	r7, r5
 800ac0a:	42bb      	cmp	r3, r7
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	d9f4      	bls.n	800abfa <_printf_i+0x112>
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d10b      	bne.n	800ac2c <_printf_i+0x144>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	07df      	lsls	r7, r3, #31
 800ac18:	d508      	bpl.n	800ac2c <_printf_i+0x144>
 800ac1a:	6923      	ldr	r3, [r4, #16]
 800ac1c:	6861      	ldr	r1, [r4, #4]
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	bfde      	ittt	le
 800ac22:	2330      	movle	r3, #48	@ 0x30
 800ac24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac2c:	1b92      	subs	r2, r2, r6
 800ac2e:	6122      	str	r2, [r4, #16]
 800ac30:	f8cd a000 	str.w	sl, [sp]
 800ac34:	464b      	mov	r3, r9
 800ac36:	aa03      	add	r2, sp, #12
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	f7ff fee6 	bl	800aa0c <_printf_common>
 800ac40:	3001      	adds	r0, #1
 800ac42:	d14a      	bne.n	800acda <_printf_i+0x1f2>
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	b004      	add	sp, #16
 800ac4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f043 0320 	orr.w	r3, r3, #32
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	4833      	ldr	r0, [pc, #204]	@ (800ad24 <_printf_i+0x23c>)
 800ac58:	2778      	movs	r7, #120	@ 0x78
 800ac5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	6831      	ldr	r1, [r6, #0]
 800ac62:	061f      	lsls	r7, r3, #24
 800ac64:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac68:	d402      	bmi.n	800ac70 <_printf_i+0x188>
 800ac6a:	065f      	lsls	r7, r3, #25
 800ac6c:	bf48      	it	mi
 800ac6e:	b2ad      	uxthmi	r5, r5
 800ac70:	6031      	str	r1, [r6, #0]
 800ac72:	07d9      	lsls	r1, r3, #31
 800ac74:	bf44      	itt	mi
 800ac76:	f043 0320 	orrmi.w	r3, r3, #32
 800ac7a:	6023      	strmi	r3, [r4, #0]
 800ac7c:	b11d      	cbz	r5, 800ac86 <_printf_i+0x19e>
 800ac7e:	2310      	movs	r3, #16
 800ac80:	e7ac      	b.n	800abdc <_printf_i+0xf4>
 800ac82:	4827      	ldr	r0, [pc, #156]	@ (800ad20 <_printf_i+0x238>)
 800ac84:	e7e9      	b.n	800ac5a <_printf_i+0x172>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	f023 0320 	bic.w	r3, r3, #32
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	e7f6      	b.n	800ac7e <_printf_i+0x196>
 800ac90:	4616      	mov	r6, r2
 800ac92:	e7bd      	b.n	800ac10 <_printf_i+0x128>
 800ac94:	6833      	ldr	r3, [r6, #0]
 800ac96:	6825      	ldr	r5, [r4, #0]
 800ac98:	6961      	ldr	r1, [r4, #20]
 800ac9a:	1d18      	adds	r0, r3, #4
 800ac9c:	6030      	str	r0, [r6, #0]
 800ac9e:	062e      	lsls	r6, r5, #24
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0x1c0>
 800aca4:	6019      	str	r1, [r3, #0]
 800aca6:	e002      	b.n	800acae <_printf_i+0x1c6>
 800aca8:	0668      	lsls	r0, r5, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0x1bc>
 800acac:	8019      	strh	r1, [r3, #0]
 800acae:	2300      	movs	r3, #0
 800acb0:	6123      	str	r3, [r4, #16]
 800acb2:	4616      	mov	r6, r2
 800acb4:	e7bc      	b.n	800ac30 <_printf_i+0x148>
 800acb6:	6833      	ldr	r3, [r6, #0]
 800acb8:	1d1a      	adds	r2, r3, #4
 800acba:	6032      	str	r2, [r6, #0]
 800acbc:	681e      	ldr	r6, [r3, #0]
 800acbe:	6862      	ldr	r2, [r4, #4]
 800acc0:	2100      	movs	r1, #0
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7f5 fa94 	bl	80001f0 <memchr>
 800acc8:	b108      	cbz	r0, 800acce <_printf_i+0x1e6>
 800acca:	1b80      	subs	r0, r0, r6
 800accc:	6060      	str	r0, [r4, #4]
 800acce:	6863      	ldr	r3, [r4, #4]
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	2300      	movs	r3, #0
 800acd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd8:	e7aa      	b.n	800ac30 <_printf_i+0x148>
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	4632      	mov	r2, r6
 800acde:	4649      	mov	r1, r9
 800ace0:	4640      	mov	r0, r8
 800ace2:	47d0      	blx	sl
 800ace4:	3001      	adds	r0, #1
 800ace6:	d0ad      	beq.n	800ac44 <_printf_i+0x15c>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	079b      	lsls	r3, r3, #30
 800acec:	d413      	bmi.n	800ad16 <_printf_i+0x22e>
 800acee:	68e0      	ldr	r0, [r4, #12]
 800acf0:	9b03      	ldr	r3, [sp, #12]
 800acf2:	4298      	cmp	r0, r3
 800acf4:	bfb8      	it	lt
 800acf6:	4618      	movlt	r0, r3
 800acf8:	e7a6      	b.n	800ac48 <_printf_i+0x160>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4632      	mov	r2, r6
 800acfe:	4649      	mov	r1, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	47d0      	blx	sl
 800ad04:	3001      	adds	r0, #1
 800ad06:	d09d      	beq.n	800ac44 <_printf_i+0x15c>
 800ad08:	3501      	adds	r5, #1
 800ad0a:	68e3      	ldr	r3, [r4, #12]
 800ad0c:	9903      	ldr	r1, [sp, #12]
 800ad0e:	1a5b      	subs	r3, r3, r1
 800ad10:	42ab      	cmp	r3, r5
 800ad12:	dcf2      	bgt.n	800acfa <_printf_i+0x212>
 800ad14:	e7eb      	b.n	800acee <_printf_i+0x206>
 800ad16:	2500      	movs	r5, #0
 800ad18:	f104 0619 	add.w	r6, r4, #25
 800ad1c:	e7f5      	b.n	800ad0a <_printf_i+0x222>
 800ad1e:	bf00      	nop
 800ad20:	0800d9ad 	.word	0x0800d9ad
 800ad24:	0800d9be 	.word	0x0800d9be

0800ad28 <memmove>:
 800ad28:	4288      	cmp	r0, r1
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	eb01 0402 	add.w	r4, r1, r2
 800ad30:	d902      	bls.n	800ad38 <memmove+0x10>
 800ad32:	4284      	cmp	r4, r0
 800ad34:	4623      	mov	r3, r4
 800ad36:	d807      	bhi.n	800ad48 <memmove+0x20>
 800ad38:	1e43      	subs	r3, r0, #1
 800ad3a:	42a1      	cmp	r1, r4
 800ad3c:	d008      	beq.n	800ad50 <memmove+0x28>
 800ad3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad46:	e7f8      	b.n	800ad3a <memmove+0x12>
 800ad48:	4402      	add	r2, r0
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	428a      	cmp	r2, r1
 800ad4e:	d100      	bne.n	800ad52 <memmove+0x2a>
 800ad50:	bd10      	pop	{r4, pc}
 800ad52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad5a:	e7f7      	b.n	800ad4c <memmove+0x24>

0800ad5c <_sbrk_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d06      	ldr	r5, [pc, #24]	@ (800ad78 <_sbrk_r+0x1c>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	602b      	str	r3, [r5, #0]
 800ad68:	f7f9 fc60 	bl	800462c <_sbrk>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_sbrk_r+0x1a>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_sbrk_r+0x1a>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	2000041c 	.word	0x2000041c

0800ad7c <_realloc_r>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	4680      	mov	r8, r0
 800ad82:	4615      	mov	r5, r2
 800ad84:	460c      	mov	r4, r1
 800ad86:	b921      	cbnz	r1, 800ad92 <_realloc_r+0x16>
 800ad88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	f7ff bc59 	b.w	800a644 <_malloc_r>
 800ad92:	b92a      	cbnz	r2, 800ada0 <_realloc_r+0x24>
 800ad94:	f7ff fbea 	bl	800a56c <_free_r>
 800ad98:	2400      	movs	r4, #0
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	f000 f81a 	bl	800add8 <_malloc_usable_size_r>
 800ada4:	4285      	cmp	r5, r0
 800ada6:	4606      	mov	r6, r0
 800ada8:	d802      	bhi.n	800adb0 <_realloc_r+0x34>
 800adaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800adae:	d8f4      	bhi.n	800ad9a <_realloc_r+0x1e>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7ff fc46 	bl	800a644 <_malloc_r>
 800adb8:	4607      	mov	r7, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0ec      	beq.n	800ad98 <_realloc_r+0x1c>
 800adbe:	42b5      	cmp	r5, r6
 800adc0:	462a      	mov	r2, r5
 800adc2:	4621      	mov	r1, r4
 800adc4:	bf28      	it	cs
 800adc6:	4632      	movcs	r2, r6
 800adc8:	f7ff fbc2 	bl	800a550 <memcpy>
 800adcc:	4621      	mov	r1, r4
 800adce:	4640      	mov	r0, r8
 800add0:	f7ff fbcc 	bl	800a56c <_free_r>
 800add4:	463c      	mov	r4, r7
 800add6:	e7e0      	b.n	800ad9a <_realloc_r+0x1e>

0800add8 <_malloc_usable_size_r>:
 800add8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800addc:	1f18      	subs	r0, r3, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfbc      	itt	lt
 800ade2:	580b      	ldrlt	r3, [r1, r0]
 800ade4:	18c0      	addlt	r0, r0, r3
 800ade6:	4770      	bx	lr

0800ade8 <acos>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	ed2d 8b02 	vpush	{d8}
 800adee:	ec55 4b10 	vmov	r4, r5, d0
 800adf2:	f000 fc21 	bl	800b638 <__ieee754_acos>
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ae02:	eef0 8a60 	vmov.f32	s17, s1
 800ae06:	f7f5 fe99 	bl	8000b3c <__aeabi_dcmpun>
 800ae0a:	b9a8      	cbnz	r0, 800ae38 <acos+0x50>
 800ae0c:	ec45 4b10 	vmov	d0, r4, r5
 800ae10:	f000 f942 	bl	800b098 <fabs>
 800ae14:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <acos+0x60>)
 800ae16:	ec51 0b10 	vmov	r0, r1, d0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fe84 	bl	8000b28 <__aeabi_dcmpgt>
 800ae20:	b150      	cbz	r0, 800ae38 <acos+0x50>
 800ae22:	f7ff fb69 	bl	800a4f8 <__errno>
 800ae26:	ecbd 8b02 	vpop	{d8}
 800ae2a:	2321      	movs	r3, #33	@ 0x21
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae32:	4806      	ldr	r0, [pc, #24]	@ (800ae4c <acos+0x64>)
 800ae34:	f000 b998 	b.w	800b168 <nan>
 800ae38:	eeb0 0a48 	vmov.f32	s0, s16
 800ae3c:	eef0 0a68 	vmov.f32	s1, s17
 800ae40:	ecbd 8b02 	vpop	{d8}
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop
 800ae48:	3ff00000 	.word	0x3ff00000
 800ae4c:	0800d9a1 	.word	0x0800d9a1

0800ae50 <asin>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	ed2d 8b02 	vpush	{d8}
 800ae56:	ec55 4b10 	vmov	r4, r5, d0
 800ae5a:	f000 fe49 	bl	800baf0 <__ieee754_asin>
 800ae5e:	4622      	mov	r2, r4
 800ae60:	462b      	mov	r3, r5
 800ae62:	4620      	mov	r0, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	eeb0 8a40 	vmov.f32	s16, s0
 800ae6a:	eef0 8a60 	vmov.f32	s17, s1
 800ae6e:	f7f5 fe65 	bl	8000b3c <__aeabi_dcmpun>
 800ae72:	b9a8      	cbnz	r0, 800aea0 <asin+0x50>
 800ae74:	ec45 4b10 	vmov	d0, r4, r5
 800ae78:	f000 f90e 	bl	800b098 <fabs>
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <asin+0x60>)
 800ae7e:	ec51 0b10 	vmov	r0, r1, d0
 800ae82:	2200      	movs	r2, #0
 800ae84:	f7f5 fe50 	bl	8000b28 <__aeabi_dcmpgt>
 800ae88:	b150      	cbz	r0, 800aea0 <asin+0x50>
 800ae8a:	f7ff fb35 	bl	800a4f8 <__errno>
 800ae8e:	ecbd 8b02 	vpop	{d8}
 800ae92:	2321      	movs	r3, #33	@ 0x21
 800ae94:	6003      	str	r3, [r0, #0]
 800ae96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae9a:	4806      	ldr	r0, [pc, #24]	@ (800aeb4 <asin+0x64>)
 800ae9c:	f000 b964 	b.w	800b168 <nan>
 800aea0:	eeb0 0a48 	vmov.f32	s0, s16
 800aea4:	eef0 0a68 	vmov.f32	s1, s17
 800aea8:	ecbd 8b02 	vpop	{d8}
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	bf00      	nop
 800aeb0:	3ff00000 	.word	0x3ff00000
 800aeb4:	0800d9a1 	.word	0x0800d9a1

0800aeb8 <pow>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	ed2d 8b02 	vpush	{d8}
 800aebe:	eeb0 8a40 	vmov.f32	s16, s0
 800aec2:	eef0 8a60 	vmov.f32	s17, s1
 800aec6:	ec55 4b11 	vmov	r4, r5, d1
 800aeca:	f001 f815 	bl	800bef8 <__ieee754_pow>
 800aece:	4622      	mov	r2, r4
 800aed0:	462b      	mov	r3, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	ec57 6b10 	vmov	r6, r7, d0
 800aeda:	f7f5 fe2f 	bl	8000b3c <__aeabi_dcmpun>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d13b      	bne.n	800af5a <pow+0xa2>
 800aee2:	ec51 0b18 	vmov	r0, r1, d8
 800aee6:	2200      	movs	r2, #0
 800aee8:	2300      	movs	r3, #0
 800aeea:	f7f5 fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeee:	b1b8      	cbz	r0, 800af20 <pow+0x68>
 800aef0:	2200      	movs	r2, #0
 800aef2:	2300      	movs	r3, #0
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d146      	bne.n	800af8e <pow+0xd6>
 800af00:	ec45 4b10 	vmov	d0, r4, r5
 800af04:	f000 f924 	bl	800b150 <finite>
 800af08:	b338      	cbz	r0, 800af5a <pow+0xa2>
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 fdeb 	bl	8000aec <__aeabi_dcmplt>
 800af16:	b300      	cbz	r0, 800af5a <pow+0xa2>
 800af18:	f7ff faee 	bl	800a4f8 <__errno>
 800af1c:	2322      	movs	r3, #34	@ 0x22
 800af1e:	e01b      	b.n	800af58 <pow+0xa0>
 800af20:	ec47 6b10 	vmov	d0, r6, r7
 800af24:	f000 f914 	bl	800b150 <finite>
 800af28:	b9e0      	cbnz	r0, 800af64 <pow+0xac>
 800af2a:	eeb0 0a48 	vmov.f32	s0, s16
 800af2e:	eef0 0a68 	vmov.f32	s1, s17
 800af32:	f000 f90d 	bl	800b150 <finite>
 800af36:	b1a8      	cbz	r0, 800af64 <pow+0xac>
 800af38:	ec45 4b10 	vmov	d0, r4, r5
 800af3c:	f000 f908 	bl	800b150 <finite>
 800af40:	b180      	cbz	r0, 800af64 <pow+0xac>
 800af42:	4632      	mov	r2, r6
 800af44:	463b      	mov	r3, r7
 800af46:	4630      	mov	r0, r6
 800af48:	4639      	mov	r1, r7
 800af4a:	f7f5 fdf7 	bl	8000b3c <__aeabi_dcmpun>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d0e2      	beq.n	800af18 <pow+0x60>
 800af52:	f7ff fad1 	bl	800a4f8 <__errno>
 800af56:	2321      	movs	r3, #33	@ 0x21
 800af58:	6003      	str	r3, [r0, #0]
 800af5a:	ecbd 8b02 	vpop	{d8}
 800af5e:	ec47 6b10 	vmov	d0, r6, r7
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	4630      	mov	r0, r6
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800af70:	2800      	cmp	r0, #0
 800af72:	d0f2      	beq.n	800af5a <pow+0xa2>
 800af74:	eeb0 0a48 	vmov.f32	s0, s16
 800af78:	eef0 0a68 	vmov.f32	s1, s17
 800af7c:	f000 f8e8 	bl	800b150 <finite>
 800af80:	2800      	cmp	r0, #0
 800af82:	d0ea      	beq.n	800af5a <pow+0xa2>
 800af84:	ec45 4b10 	vmov	d0, r4, r5
 800af88:	f000 f8e2 	bl	800b150 <finite>
 800af8c:	e7c3      	b.n	800af16 <pow+0x5e>
 800af8e:	4f01      	ldr	r7, [pc, #4]	@ (800af94 <pow+0xdc>)
 800af90:	2600      	movs	r6, #0
 800af92:	e7e2      	b.n	800af5a <pow+0xa2>
 800af94:	3ff00000 	.word	0x3ff00000

0800af98 <sqrt>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	ed2d 8b02 	vpush	{d8}
 800af9e:	ec55 4b10 	vmov	r4, r5, d0
 800afa2:	f000 f8e9 	bl	800b178 <__ieee754_sqrt>
 800afa6:	4622      	mov	r2, r4
 800afa8:	462b      	mov	r3, r5
 800afaa:	4620      	mov	r0, r4
 800afac:	4629      	mov	r1, r5
 800afae:	eeb0 8a40 	vmov.f32	s16, s0
 800afb2:	eef0 8a60 	vmov.f32	s17, s1
 800afb6:	f7f5 fdc1 	bl	8000b3c <__aeabi_dcmpun>
 800afba:	b990      	cbnz	r0, 800afe2 <sqrt+0x4a>
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	f7f5 fd92 	bl	8000aec <__aeabi_dcmplt>
 800afc8:	b158      	cbz	r0, 800afe2 <sqrt+0x4a>
 800afca:	f7ff fa95 	bl	800a4f8 <__errno>
 800afce:	2321      	movs	r3, #33	@ 0x21
 800afd0:	6003      	str	r3, [r0, #0]
 800afd2:	2200      	movs	r2, #0
 800afd4:	2300      	movs	r3, #0
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	f7f5 fc3f 	bl	800085c <__aeabi_ddiv>
 800afde:	ec41 0b18 	vmov	d8, r0, r1
 800afe2:	eeb0 0a48 	vmov.f32	s0, s16
 800afe6:	eef0 0a68 	vmov.f32	s1, s17
 800afea:	ecbd 8b02 	vpop	{d8}
 800afee:	bd38      	pop	{r3, r4, r5, pc}

0800aff0 <cos>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	ec53 2b10 	vmov	r2, r3, d0
 800aff6:	4826      	ldr	r0, [pc, #152]	@ (800b090 <cos+0xa0>)
 800aff8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800affc:	4281      	cmp	r1, r0
 800affe:	d806      	bhi.n	800b00e <cos+0x1e>
 800b000:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b088 <cos+0x98>
 800b004:	b005      	add	sp, #20
 800b006:	f85d eb04 	ldr.w	lr, [sp], #4
 800b00a:	f000 b991 	b.w	800b330 <__kernel_cos>
 800b00e:	4821      	ldr	r0, [pc, #132]	@ (800b094 <cos+0xa4>)
 800b010:	4281      	cmp	r1, r0
 800b012:	d908      	bls.n	800b026 <cos+0x36>
 800b014:	4610      	mov	r0, r2
 800b016:	4619      	mov	r1, r3
 800b018:	f7f5 f93e 	bl	8000298 <__aeabi_dsub>
 800b01c:	ec41 0b10 	vmov	d0, r0, r1
 800b020:	b005      	add	sp, #20
 800b022:	f85d fb04 	ldr.w	pc, [sp], #4
 800b026:	4668      	mov	r0, sp
 800b028:	f001 fcaa 	bl	800c980 <__ieee754_rem_pio2>
 800b02c:	f000 0003 	and.w	r0, r0, #3
 800b030:	2801      	cmp	r0, #1
 800b032:	d00b      	beq.n	800b04c <cos+0x5c>
 800b034:	2802      	cmp	r0, #2
 800b036:	d015      	beq.n	800b064 <cos+0x74>
 800b038:	b9d8      	cbnz	r0, 800b072 <cos+0x82>
 800b03a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b03e:	ed9d 0b00 	vldr	d0, [sp]
 800b042:	f000 f975 	bl	800b330 <__kernel_cos>
 800b046:	ec51 0b10 	vmov	r0, r1, d0
 800b04a:	e7e7      	b.n	800b01c <cos+0x2c>
 800b04c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b050:	ed9d 0b00 	vldr	d0, [sp]
 800b054:	f000 fa34 	bl	800b4c0 <__kernel_sin>
 800b058:	ec53 2b10 	vmov	r2, r3, d0
 800b05c:	4610      	mov	r0, r2
 800b05e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b062:	e7db      	b.n	800b01c <cos+0x2c>
 800b064:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b068:	ed9d 0b00 	vldr	d0, [sp]
 800b06c:	f000 f960 	bl	800b330 <__kernel_cos>
 800b070:	e7f2      	b.n	800b058 <cos+0x68>
 800b072:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b076:	ed9d 0b00 	vldr	d0, [sp]
 800b07a:	2001      	movs	r0, #1
 800b07c:	f000 fa20 	bl	800b4c0 <__kernel_sin>
 800b080:	e7e1      	b.n	800b046 <cos+0x56>
 800b082:	bf00      	nop
 800b084:	f3af 8000 	nop.w
	...
 800b090:	3fe921fb 	.word	0x3fe921fb
 800b094:	7fefffff 	.word	0x7fefffff

0800b098 <fabs>:
 800b098:	ec51 0b10 	vmov	r0, r1, d0
 800b09c:	4602      	mov	r2, r0
 800b09e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b0a2:	ec43 2b10 	vmov	d0, r2, r3
 800b0a6:	4770      	bx	lr

0800b0a8 <sin>:
 800b0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0aa:	ec53 2b10 	vmov	r2, r3, d0
 800b0ae:	4826      	ldr	r0, [pc, #152]	@ (800b148 <sin+0xa0>)
 800b0b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b0b4:	4281      	cmp	r1, r0
 800b0b6:	d807      	bhi.n	800b0c8 <sin+0x20>
 800b0b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b140 <sin+0x98>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	b005      	add	sp, #20
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	f000 b9fc 	b.w	800b4c0 <__kernel_sin>
 800b0c8:	4820      	ldr	r0, [pc, #128]	@ (800b14c <sin+0xa4>)
 800b0ca:	4281      	cmp	r1, r0
 800b0cc:	d908      	bls.n	800b0e0 <sin+0x38>
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f7f5 f8e1 	bl	8000298 <__aeabi_dsub>
 800b0d6:	ec41 0b10 	vmov	d0, r0, r1
 800b0da:	b005      	add	sp, #20
 800b0dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0e0:	4668      	mov	r0, sp
 800b0e2:	f001 fc4d 	bl	800c980 <__ieee754_rem_pio2>
 800b0e6:	f000 0003 	and.w	r0, r0, #3
 800b0ea:	2801      	cmp	r0, #1
 800b0ec:	d00c      	beq.n	800b108 <sin+0x60>
 800b0ee:	2802      	cmp	r0, #2
 800b0f0:	d011      	beq.n	800b116 <sin+0x6e>
 800b0f2:	b9e8      	cbnz	r0, 800b130 <sin+0x88>
 800b0f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0f8:	ed9d 0b00 	vldr	d0, [sp]
 800b0fc:	2001      	movs	r0, #1
 800b0fe:	f000 f9df 	bl	800b4c0 <__kernel_sin>
 800b102:	ec51 0b10 	vmov	r0, r1, d0
 800b106:	e7e6      	b.n	800b0d6 <sin+0x2e>
 800b108:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b10c:	ed9d 0b00 	vldr	d0, [sp]
 800b110:	f000 f90e 	bl	800b330 <__kernel_cos>
 800b114:	e7f5      	b.n	800b102 <sin+0x5a>
 800b116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b11a:	ed9d 0b00 	vldr	d0, [sp]
 800b11e:	2001      	movs	r0, #1
 800b120:	f000 f9ce 	bl	800b4c0 <__kernel_sin>
 800b124:	ec53 2b10 	vmov	r2, r3, d0
 800b128:	4610      	mov	r0, r2
 800b12a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b12e:	e7d2      	b.n	800b0d6 <sin+0x2e>
 800b130:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b134:	ed9d 0b00 	vldr	d0, [sp]
 800b138:	f000 f8fa 	bl	800b330 <__kernel_cos>
 800b13c:	e7f2      	b.n	800b124 <sin+0x7c>
 800b13e:	bf00      	nop
	...
 800b148:	3fe921fb 	.word	0x3fe921fb
 800b14c:	7fefffff 	.word	0x7fefffff

0800b150 <finite>:
 800b150:	b082      	sub	sp, #8
 800b152:	ed8d 0b00 	vstr	d0, [sp]
 800b156:	9801      	ldr	r0, [sp, #4]
 800b158:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b15c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b160:	0fc0      	lsrs	r0, r0, #31
 800b162:	b002      	add	sp, #8
 800b164:	4770      	bx	lr
	...

0800b168 <nan>:
 800b168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b170 <nan+0x8>
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	00000000 	.word	0x00000000
 800b174:	7ff80000 	.word	0x7ff80000

0800b178 <__ieee754_sqrt>:
 800b178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4a68      	ldr	r2, [pc, #416]	@ (800b320 <__ieee754_sqrt+0x1a8>)
 800b17e:	ec55 4b10 	vmov	r4, r5, d0
 800b182:	43aa      	bics	r2, r5
 800b184:	462b      	mov	r3, r5
 800b186:	4621      	mov	r1, r4
 800b188:	d110      	bne.n	800b1ac <__ieee754_sqrt+0x34>
 800b18a:	4622      	mov	r2, r4
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 fa3a 	bl	8000608 <__aeabi_dmul>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4620      	mov	r0, r4
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 f87e 	bl	800029c <__adddf3>
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	ec45 4b10 	vmov	d0, r4, r5
 800b1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	dc0e      	bgt.n	800b1ce <__ieee754_sqrt+0x56>
 800b1b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b1b4:	4322      	orrs	r2, r4
 800b1b6:	d0f5      	beq.n	800b1a4 <__ieee754_sqrt+0x2c>
 800b1b8:	b19d      	cbz	r5, 800b1e2 <__ieee754_sqrt+0x6a>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 f86a 	bl	8000298 <__aeabi_dsub>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	f7f5 fb48 	bl	800085c <__aeabi_ddiv>
 800b1cc:	e7e8      	b.n	800b1a0 <__ieee754_sqrt+0x28>
 800b1ce:	152a      	asrs	r2, r5, #20
 800b1d0:	d115      	bne.n	800b1fe <__ieee754_sqrt+0x86>
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	e009      	b.n	800b1ea <__ieee754_sqrt+0x72>
 800b1d6:	0acb      	lsrs	r3, r1, #11
 800b1d8:	3a15      	subs	r2, #21
 800b1da:	0549      	lsls	r1, r1, #21
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0fa      	beq.n	800b1d6 <__ieee754_sqrt+0x5e>
 800b1e0:	e7f7      	b.n	800b1d2 <__ieee754_sqrt+0x5a>
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	e7fa      	b.n	800b1dc <__ieee754_sqrt+0x64>
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	02dc      	lsls	r4, r3, #11
 800b1ec:	d5fb      	bpl.n	800b1e6 <__ieee754_sqrt+0x6e>
 800b1ee:	1e44      	subs	r4, r0, #1
 800b1f0:	1b12      	subs	r2, r2, r4
 800b1f2:	f1c0 0420 	rsb	r4, r0, #32
 800b1f6:	fa21 f404 	lsr.w	r4, r1, r4
 800b1fa:	4323      	orrs	r3, r4
 800b1fc:	4081      	lsls	r1, r0
 800b1fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b202:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b20a:	07d2      	lsls	r2, r2, #31
 800b20c:	bf5c      	itt	pl
 800b20e:	005b      	lslpl	r3, r3, #1
 800b210:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b214:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b218:	bf58      	it	pl
 800b21a:	0049      	lslpl	r1, r1, #1
 800b21c:	2600      	movs	r6, #0
 800b21e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b222:	106d      	asrs	r5, r5, #1
 800b224:	0049      	lsls	r1, r1, #1
 800b226:	2016      	movs	r0, #22
 800b228:	4632      	mov	r2, r6
 800b22a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b22e:	1917      	adds	r7, r2, r4
 800b230:	429f      	cmp	r7, r3
 800b232:	bfde      	ittt	le
 800b234:	193a      	addle	r2, r7, r4
 800b236:	1bdb      	suble	r3, r3, r7
 800b238:	1936      	addle	r6, r6, r4
 800b23a:	0fcf      	lsrs	r7, r1, #31
 800b23c:	3801      	subs	r0, #1
 800b23e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b242:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b246:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b24a:	d1f0      	bne.n	800b22e <__ieee754_sqrt+0xb6>
 800b24c:	4604      	mov	r4, r0
 800b24e:	2720      	movs	r7, #32
 800b250:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b254:	429a      	cmp	r2, r3
 800b256:	eb00 0e0c 	add.w	lr, r0, ip
 800b25a:	db02      	blt.n	800b262 <__ieee754_sqrt+0xea>
 800b25c:	d113      	bne.n	800b286 <__ieee754_sqrt+0x10e>
 800b25e:	458e      	cmp	lr, r1
 800b260:	d811      	bhi.n	800b286 <__ieee754_sqrt+0x10e>
 800b262:	f1be 0f00 	cmp.w	lr, #0
 800b266:	eb0e 000c 	add.w	r0, lr, ip
 800b26a:	da42      	bge.n	800b2f2 <__ieee754_sqrt+0x17a>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	db40      	blt.n	800b2f2 <__ieee754_sqrt+0x17a>
 800b270:	f102 0801 	add.w	r8, r2, #1
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	458e      	cmp	lr, r1
 800b278:	bf88      	it	hi
 800b27a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b27e:	eba1 010e 	sub.w	r1, r1, lr
 800b282:	4464      	add	r4, ip
 800b284:	4642      	mov	r2, r8
 800b286:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b28a:	3f01      	subs	r7, #1
 800b28c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b290:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b294:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b298:	d1dc      	bne.n	800b254 <__ieee754_sqrt+0xdc>
 800b29a:	4319      	orrs	r1, r3
 800b29c:	d01b      	beq.n	800b2d6 <__ieee754_sqrt+0x15e>
 800b29e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b324 <__ieee754_sqrt+0x1ac>
 800b2a2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b328 <__ieee754_sqrt+0x1b0>
 800b2a6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b2aa:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2ae:	f7f4 fff3 	bl	8000298 <__aeabi_dsub>
 800b2b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 fc1f 	bl	8000b00 <__aeabi_dcmple>
 800b2c2:	b140      	cbz	r0, 800b2d6 <__ieee754_sqrt+0x15e>
 800b2c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b2c8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b2cc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2d0:	d111      	bne.n	800b2f6 <__ieee754_sqrt+0x17e>
 800b2d2:	3601      	adds	r6, #1
 800b2d4:	463c      	mov	r4, r7
 800b2d6:	1072      	asrs	r2, r6, #1
 800b2d8:	0863      	lsrs	r3, r4, #1
 800b2da:	07f1      	lsls	r1, r6, #31
 800b2dc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b2e0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b2e4:	bf48      	it	mi
 800b2e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b2ea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	e756      	b.n	800b1a0 <__ieee754_sqrt+0x28>
 800b2f2:	4690      	mov	r8, r2
 800b2f4:	e7be      	b.n	800b274 <__ieee754_sqrt+0xfc>
 800b2f6:	f7f4 ffd1 	bl	800029c <__adddf3>
 800b2fa:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4640      	mov	r0, r8
 800b304:	4649      	mov	r1, r9
 800b306:	f7f5 fbf1 	bl	8000aec <__aeabi_dcmplt>
 800b30a:	b120      	cbz	r0, 800b316 <__ieee754_sqrt+0x19e>
 800b30c:	1ca0      	adds	r0, r4, #2
 800b30e:	bf08      	it	eq
 800b310:	3601      	addeq	r6, #1
 800b312:	3402      	adds	r4, #2
 800b314:	e7df      	b.n	800b2d6 <__ieee754_sqrt+0x15e>
 800b316:	1c63      	adds	r3, r4, #1
 800b318:	f023 0401 	bic.w	r4, r3, #1
 800b31c:	e7db      	b.n	800b2d6 <__ieee754_sqrt+0x15e>
 800b31e:	bf00      	nop
 800b320:	7ff00000 	.word	0x7ff00000
 800b324:	20000068 	.word	0x20000068
 800b328:	20000060 	.word	0x20000060
 800b32c:	00000000 	.word	0x00000000

0800b330 <__kernel_cos>:
 800b330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	ec57 6b10 	vmov	r6, r7, d0
 800b338:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b33c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b340:	ed8d 1b00 	vstr	d1, [sp]
 800b344:	d206      	bcs.n	800b354 <__kernel_cos+0x24>
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f5 fc0d 	bl	8000b68 <__aeabi_d2iz>
 800b34e:	2800      	cmp	r0, #0
 800b350:	f000 8088 	beq.w	800b464 <__kernel_cos+0x134>
 800b354:	4632      	mov	r2, r6
 800b356:	463b      	mov	r3, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	4639      	mov	r1, r7
 800b35c:	f7f5 f954 	bl	8000608 <__aeabi_dmul>
 800b360:	4b51      	ldr	r3, [pc, #324]	@ (800b4a8 <__kernel_cos+0x178>)
 800b362:	2200      	movs	r2, #0
 800b364:	4604      	mov	r4, r0
 800b366:	460d      	mov	r5, r1
 800b368:	f7f5 f94e 	bl	8000608 <__aeabi_dmul>
 800b36c:	a340      	add	r3, pc, #256	@ (adr r3, 800b470 <__kernel_cos+0x140>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	4682      	mov	sl, r0
 800b374:	468b      	mov	fp, r1
 800b376:	4620      	mov	r0, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	f7f5 f945 	bl	8000608 <__aeabi_dmul>
 800b37e:	a33e      	add	r3, pc, #248	@ (adr r3, 800b478 <__kernel_cos+0x148>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f4 ff8a 	bl	800029c <__adddf3>
 800b388:	4622      	mov	r2, r4
 800b38a:	462b      	mov	r3, r5
 800b38c:	f7f5 f93c 	bl	8000608 <__aeabi_dmul>
 800b390:	a33b      	add	r3, pc, #236	@ (adr r3, 800b480 <__kernel_cos+0x150>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff7f 	bl	8000298 <__aeabi_dsub>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f5 f933 	bl	8000608 <__aeabi_dmul>
 800b3a2:	a339      	add	r3, pc, #228	@ (adr r3, 800b488 <__kernel_cos+0x158>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff78 	bl	800029c <__adddf3>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f92a 	bl	8000608 <__aeabi_dmul>
 800b3b4:	a336      	add	r3, pc, #216	@ (adr r3, 800b490 <__kernel_cos+0x160>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff6d 	bl	8000298 <__aeabi_dsub>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	f7f5 f921 	bl	8000608 <__aeabi_dmul>
 800b3c6:	a334      	add	r3, pc, #208	@ (adr r3, 800b498 <__kernel_cos+0x168>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff66 	bl	800029c <__adddf3>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f918 	bl	8000608 <__aeabi_dmul>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	462b      	mov	r3, r5
 800b3dc:	f7f5 f914 	bl	8000608 <__aeabi_dmul>
 800b3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	460d      	mov	r5, r1
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f5 f90c 	bl	8000608 <__aeabi_dmul>
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7f4 ff4e 	bl	8000298 <__aeabi_dsub>
 800b3fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b4ac <__kernel_cos+0x17c>)
 800b3fe:	4598      	cmp	r8, r3
 800b400:	4606      	mov	r6, r0
 800b402:	460f      	mov	r7, r1
 800b404:	d810      	bhi.n	800b428 <__kernel_cos+0xf8>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4650      	mov	r0, sl
 800b40c:	4659      	mov	r1, fp
 800b40e:	f7f4 ff43 	bl	8000298 <__aeabi_dsub>
 800b412:	460b      	mov	r3, r1
 800b414:	4926      	ldr	r1, [pc, #152]	@ (800b4b0 <__kernel_cos+0x180>)
 800b416:	4602      	mov	r2, r0
 800b418:	2000      	movs	r0, #0
 800b41a:	f7f4 ff3d 	bl	8000298 <__aeabi_dsub>
 800b41e:	ec41 0b10 	vmov	d0, r0, r1
 800b422:	b003      	add	sp, #12
 800b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b428:	4b22      	ldr	r3, [pc, #136]	@ (800b4b4 <__kernel_cos+0x184>)
 800b42a:	4921      	ldr	r1, [pc, #132]	@ (800b4b0 <__kernel_cos+0x180>)
 800b42c:	4598      	cmp	r8, r3
 800b42e:	bf8c      	ite	hi
 800b430:	4d21      	ldrhi	r5, [pc, #132]	@ (800b4b8 <__kernel_cos+0x188>)
 800b432:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b436:	2400      	movs	r4, #0
 800b438:	4622      	mov	r2, r4
 800b43a:	462b      	mov	r3, r5
 800b43c:	2000      	movs	r0, #0
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	4622      	mov	r2, r4
 800b444:	4680      	mov	r8, r0
 800b446:	4689      	mov	r9, r1
 800b448:	462b      	mov	r3, r5
 800b44a:	4650      	mov	r0, sl
 800b44c:	4659      	mov	r1, fp
 800b44e:	f7f4 ff23 	bl	8000298 <__aeabi_dsub>
 800b452:	4632      	mov	r2, r6
 800b454:	463b      	mov	r3, r7
 800b456:	f7f4 ff1f 	bl	8000298 <__aeabi_dsub>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	e7da      	b.n	800b41a <__kernel_cos+0xea>
 800b464:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b4a0 <__kernel_cos+0x170>
 800b468:	e7db      	b.n	800b422 <__kernel_cos+0xf2>
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w
 800b470:	be8838d4 	.word	0xbe8838d4
 800b474:	bda8fae9 	.word	0xbda8fae9
 800b478:	bdb4b1c4 	.word	0xbdb4b1c4
 800b47c:	3e21ee9e 	.word	0x3e21ee9e
 800b480:	809c52ad 	.word	0x809c52ad
 800b484:	3e927e4f 	.word	0x3e927e4f
 800b488:	19cb1590 	.word	0x19cb1590
 800b48c:	3efa01a0 	.word	0x3efa01a0
 800b490:	16c15177 	.word	0x16c15177
 800b494:	3f56c16c 	.word	0x3f56c16c
 800b498:	5555554c 	.word	0x5555554c
 800b49c:	3fa55555 	.word	0x3fa55555
 800b4a0:	00000000 	.word	0x00000000
 800b4a4:	3ff00000 	.word	0x3ff00000
 800b4a8:	3fe00000 	.word	0x3fe00000
 800b4ac:	3fd33332 	.word	0x3fd33332
 800b4b0:	3ff00000 	.word	0x3ff00000
 800b4b4:	3fe90000 	.word	0x3fe90000
 800b4b8:	3fd20000 	.word	0x3fd20000
 800b4bc:	00000000 	.word	0x00000000

0800b4c0 <__kernel_sin>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	ec55 4b10 	vmov	r4, r5, d0
 800b4c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b4d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	d205      	bcs.n	800b4e6 <__kernel_sin+0x26>
 800b4da:	4620      	mov	r0, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	f7f5 fb43 	bl	8000b68 <__aeabi_d2iz>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d052      	beq.n	800b58c <__kernel_sin+0xcc>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	f7f5 f88b 	bl	8000608 <__aeabi_dmul>
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f5 f883 	bl	8000608 <__aeabi_dmul>
 800b502:	a342      	add	r3, pc, #264	@ (adr r3, 800b60c <__kernel_sin+0x14c>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	e9cd 0100 	strd	r0, r1, [sp]
 800b50c:	4650      	mov	r0, sl
 800b50e:	4659      	mov	r1, fp
 800b510:	f7f5 f87a 	bl	8000608 <__aeabi_dmul>
 800b514:	a33f      	add	r3, pc, #252	@ (adr r3, 800b614 <__kernel_sin+0x154>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 febd 	bl	8000298 <__aeabi_dsub>
 800b51e:	4652      	mov	r2, sl
 800b520:	465b      	mov	r3, fp
 800b522:	f7f5 f871 	bl	8000608 <__aeabi_dmul>
 800b526:	a33d      	add	r3, pc, #244	@ (adr r3, 800b61c <__kernel_sin+0x15c>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	f7f5 f868 	bl	8000608 <__aeabi_dmul>
 800b538:	a33a      	add	r3, pc, #232	@ (adr r3, 800b624 <__kernel_sin+0x164>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f4 feab 	bl	8000298 <__aeabi_dsub>
 800b542:	4652      	mov	r2, sl
 800b544:	465b      	mov	r3, fp
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	a338      	add	r3, pc, #224	@ (adr r3, 800b62c <__kernel_sin+0x16c>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 fea4 	bl	800029c <__adddf3>
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	f1b8 0f00 	cmp.w	r8, #0
 800b55c:	d11b      	bne.n	800b596 <__kernel_sin+0xd6>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4650      	mov	r0, sl
 800b564:	4659      	mov	r1, fp
 800b566:	f7f5 f84f 	bl	8000608 <__aeabi_dmul>
 800b56a:	a325      	add	r3, pc, #148	@ (adr r3, 800b600 <__kernel_sin+0x140>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f4 fe92 	bl	8000298 <__aeabi_dsub>
 800b574:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b578:	f7f5 f846 	bl	8000608 <__aeabi_dmul>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f4 fe8a 	bl	800029c <__adddf3>
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	ec45 4b10 	vmov	d0, r4, r5
 800b590:	b005      	add	sp, #20
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b59a:	4b1b      	ldr	r3, [pc, #108]	@ (800b608 <__kernel_sin+0x148>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	f7f5 f833 	bl	8000608 <__aeabi_dmul>
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5ae:	f7f5 f82b 	bl	8000608 <__aeabi_dmul>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	f7f4 fe6d 	bl	8000298 <__aeabi_dsub>
 800b5be:	4652      	mov	r2, sl
 800b5c0:	465b      	mov	r3, fp
 800b5c2:	f7f5 f821 	bl	8000608 <__aeabi_dmul>
 800b5c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ca:	f7f4 fe65 	bl	8000298 <__aeabi_dsub>
 800b5ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800b600 <__kernel_sin+0x140>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5dc:	f7f5 f814 	bl	8000608 <__aeabi_dmul>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	f7f4 fe58 	bl	800029c <__adddf3>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	f7f4 fe50 	bl	8000298 <__aeabi_dsub>
 800b5f8:	e7c6      	b.n	800b588 <__kernel_sin+0xc8>
 800b5fa:	bf00      	nop
 800b5fc:	f3af 8000 	nop.w
 800b600:	55555549 	.word	0x55555549
 800b604:	3fc55555 	.word	0x3fc55555
 800b608:	3fe00000 	.word	0x3fe00000
 800b60c:	5acfd57c 	.word	0x5acfd57c
 800b610:	3de5d93a 	.word	0x3de5d93a
 800b614:	8a2b9ceb 	.word	0x8a2b9ceb
 800b618:	3e5ae5e6 	.word	0x3e5ae5e6
 800b61c:	57b1fe7d 	.word	0x57b1fe7d
 800b620:	3ec71de3 	.word	0x3ec71de3
 800b624:	19c161d5 	.word	0x19c161d5
 800b628:	3f2a01a0 	.word	0x3f2a01a0
 800b62c:	1110f8a6 	.word	0x1110f8a6
 800b630:	3f811111 	.word	0x3f811111
 800b634:	00000000 	.word	0x00000000

0800b638 <__ieee754_acos>:
 800b638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	ec55 4b10 	vmov	r4, r5, d0
 800b640:	49b7      	ldr	r1, [pc, #732]	@ (800b920 <__ieee754_acos+0x2e8>)
 800b642:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b646:	428b      	cmp	r3, r1
 800b648:	d919      	bls.n	800b67e <__ieee754_acos+0x46>
 800b64a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b64e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b652:	4323      	orrs	r3, r4
 800b654:	d106      	bne.n	800b664 <__ieee754_acos+0x2c>
 800b656:	2d00      	cmp	r5, #0
 800b658:	f340 8210 	ble.w	800ba7c <__ieee754_acos+0x444>
 800b65c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b8b0 <__ieee754_acos+0x278>
 800b660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	4622      	mov	r2, r4
 800b666:	462b      	mov	r3, r5
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 fe14 	bl	8000298 <__aeabi_dsub>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	f7f5 f8f2 	bl	800085c <__aeabi_ddiv>
 800b678:	ec41 0b10 	vmov	d0, r0, r1
 800b67c:	e7f0      	b.n	800b660 <__ieee754_acos+0x28>
 800b67e:	49a9      	ldr	r1, [pc, #676]	@ (800b924 <__ieee754_acos+0x2ec>)
 800b680:	428b      	cmp	r3, r1
 800b682:	f200 8085 	bhi.w	800b790 <__ieee754_acos+0x158>
 800b686:	4aa8      	ldr	r2, [pc, #672]	@ (800b928 <__ieee754_acos+0x2f0>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	f240 81fa 	bls.w	800ba82 <__ieee754_acos+0x44a>
 800b68e:	4622      	mov	r2, r4
 800b690:	462b      	mov	r3, r5
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 ffb7 	bl	8000608 <__aeabi_dmul>
 800b69a:	a387      	add	r3, pc, #540	@ (adr r3, 800b8b8 <__ieee754_acos+0x280>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	460f      	mov	r7, r1
 800b6a4:	f7f4 ffb0 	bl	8000608 <__aeabi_dmul>
 800b6a8:	a385      	add	r3, pc, #532	@ (adr r3, 800b8c0 <__ieee754_acos+0x288>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	f7f4 fdf5 	bl	800029c <__adddf3>
 800b6b2:	4632      	mov	r2, r6
 800b6b4:	463b      	mov	r3, r7
 800b6b6:	f7f4 ffa7 	bl	8000608 <__aeabi_dmul>
 800b6ba:	a383      	add	r3, pc, #524	@ (adr r3, 800b8c8 <__ieee754_acos+0x290>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f7f4 fdea 	bl	8000298 <__aeabi_dsub>
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	463b      	mov	r3, r7
 800b6c8:	f7f4 ff9e 	bl	8000608 <__aeabi_dmul>
 800b6cc:	a380      	add	r3, pc, #512	@ (adr r3, 800b8d0 <__ieee754_acos+0x298>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f7f4 fde3 	bl	800029c <__adddf3>
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	463b      	mov	r3, r7
 800b6da:	f7f4 ff95 	bl	8000608 <__aeabi_dmul>
 800b6de:	a37e      	add	r3, pc, #504	@ (adr r3, 800b8d8 <__ieee754_acos+0x2a0>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f7f4 fdd8 	bl	8000298 <__aeabi_dsub>
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	f7f4 ff8c 	bl	8000608 <__aeabi_dmul>
 800b6f0:	a37b      	add	r3, pc, #492	@ (adr r3, 800b8e0 <__ieee754_acos+0x2a8>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	f7f4 fdd1 	bl	800029c <__adddf3>
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	463b      	mov	r3, r7
 800b6fe:	f7f4 ff83 	bl	8000608 <__aeabi_dmul>
 800b702:	a379      	add	r3, pc, #484	@ (adr r3, 800b8e8 <__ieee754_acos+0x2b0>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	4680      	mov	r8, r0
 800b70a:	4689      	mov	r9, r1
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f4 ff7a 	bl	8000608 <__aeabi_dmul>
 800b714:	a376      	add	r3, pc, #472	@ (adr r3, 800b8f0 <__ieee754_acos+0x2b8>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f4 fdbd 	bl	8000298 <__aeabi_dsub>
 800b71e:	4632      	mov	r2, r6
 800b720:	463b      	mov	r3, r7
 800b722:	f7f4 ff71 	bl	8000608 <__aeabi_dmul>
 800b726:	a374      	add	r3, pc, #464	@ (adr r3, 800b8f8 <__ieee754_acos+0x2c0>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 fdb6 	bl	800029c <__adddf3>
 800b730:	4632      	mov	r2, r6
 800b732:	463b      	mov	r3, r7
 800b734:	f7f4 ff68 	bl	8000608 <__aeabi_dmul>
 800b738:	a371      	add	r3, pc, #452	@ (adr r3, 800b900 <__ieee754_acos+0x2c8>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 fdab 	bl	8000298 <__aeabi_dsub>
 800b742:	4632      	mov	r2, r6
 800b744:	463b      	mov	r3, r7
 800b746:	f7f4 ff5f 	bl	8000608 <__aeabi_dmul>
 800b74a:	4b78      	ldr	r3, [pc, #480]	@ (800b92c <__ieee754_acos+0x2f4>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	f7f4 fda5 	bl	800029c <__adddf3>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4640      	mov	r0, r8
 800b758:	4649      	mov	r1, r9
 800b75a:	f7f5 f87f 	bl	800085c <__aeabi_ddiv>
 800b75e:	4622      	mov	r2, r4
 800b760:	462b      	mov	r3, r5
 800b762:	f7f4 ff51 	bl	8000608 <__aeabi_dmul>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	a167      	add	r1, pc, #412	@ (adr r1, 800b908 <__ieee754_acos+0x2d0>)
 800b76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b770:	f7f4 fd92 	bl	8000298 <__aeabi_dsub>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4620      	mov	r0, r4
 800b77a:	4629      	mov	r1, r5
 800b77c:	f7f4 fd8c 	bl	8000298 <__aeabi_dsub>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	a162      	add	r1, pc, #392	@ (adr r1, 800b910 <__ieee754_acos+0x2d8>)
 800b786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b78a:	f7f4 fd85 	bl	8000298 <__aeabi_dsub>
 800b78e:	e773      	b.n	800b678 <__ieee754_acos+0x40>
 800b790:	2d00      	cmp	r5, #0
 800b792:	f280 80cf 	bge.w	800b934 <__ieee754_acos+0x2fc>
 800b796:	4b65      	ldr	r3, [pc, #404]	@ (800b92c <__ieee754_acos+0x2f4>)
 800b798:	2200      	movs	r2, #0
 800b79a:	4620      	mov	r0, r4
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7f4 fd7d 	bl	800029c <__adddf3>
 800b7a2:	4b63      	ldr	r3, [pc, #396]	@ (800b930 <__ieee754_acos+0x2f8>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f7f4 ff2f 	bl	8000608 <__aeabi_dmul>
 800b7aa:	a343      	add	r3, pc, #268	@ (adr r3, 800b8b8 <__ieee754_acos+0x280>)
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	f7f4 ff28 	bl	8000608 <__aeabi_dmul>
 800b7b8:	a341      	add	r3, pc, #260	@ (adr r3, 800b8c0 <__ieee754_acos+0x288>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 fd6d 	bl	800029c <__adddf3>
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	462b      	mov	r3, r5
 800b7c6:	f7f4 ff1f 	bl	8000608 <__aeabi_dmul>
 800b7ca:	a33f      	add	r3, pc, #252	@ (adr r3, 800b8c8 <__ieee754_acos+0x290>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fd62 	bl	8000298 <__aeabi_dsub>
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	f7f4 ff16 	bl	8000608 <__aeabi_dmul>
 800b7dc:	a33c      	add	r3, pc, #240	@ (adr r3, 800b8d0 <__ieee754_acos+0x298>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd5b 	bl	800029c <__adddf3>
 800b7e6:	4622      	mov	r2, r4
 800b7e8:	462b      	mov	r3, r5
 800b7ea:	f7f4 ff0d 	bl	8000608 <__aeabi_dmul>
 800b7ee:	a33a      	add	r3, pc, #232	@ (adr r3, 800b8d8 <__ieee754_acos+0x2a0>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f4 fd50 	bl	8000298 <__aeabi_dsub>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	f7f4 ff04 	bl	8000608 <__aeabi_dmul>
 800b800:	a337      	add	r3, pc, #220	@ (adr r3, 800b8e0 <__ieee754_acos+0x2a8>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7f4 fd49 	bl	800029c <__adddf3>
 800b80a:	4622      	mov	r2, r4
 800b80c:	462b      	mov	r3, r5
 800b80e:	f7f4 fefb 	bl	8000608 <__aeabi_dmul>
 800b812:	a335      	add	r3, pc, #212	@ (adr r3, 800b8e8 <__ieee754_acos+0x2b0>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f4 fef2 	bl	8000608 <__aeabi_dmul>
 800b824:	a332      	add	r3, pc, #200	@ (adr r3, 800b8f0 <__ieee754_acos+0x2b8>)
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f7f4 fd35 	bl	8000298 <__aeabi_dsub>
 800b82e:	4622      	mov	r2, r4
 800b830:	462b      	mov	r3, r5
 800b832:	f7f4 fee9 	bl	8000608 <__aeabi_dmul>
 800b836:	a330      	add	r3, pc, #192	@ (adr r3, 800b8f8 <__ieee754_acos+0x2c0>)
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f4 fd2e 	bl	800029c <__adddf3>
 800b840:	4622      	mov	r2, r4
 800b842:	462b      	mov	r3, r5
 800b844:	f7f4 fee0 	bl	8000608 <__aeabi_dmul>
 800b848:	a32d      	add	r3, pc, #180	@ (adr r3, 800b900 <__ieee754_acos+0x2c8>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fd23 	bl	8000298 <__aeabi_dsub>
 800b852:	4622      	mov	r2, r4
 800b854:	462b      	mov	r3, r5
 800b856:	f7f4 fed7 	bl	8000608 <__aeabi_dmul>
 800b85a:	4b34      	ldr	r3, [pc, #208]	@ (800b92c <__ieee754_acos+0x2f4>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	f7f4 fd1d 	bl	800029c <__adddf3>
 800b862:	ec45 4b10 	vmov	d0, r4, r5
 800b866:	4680      	mov	r8, r0
 800b868:	4689      	mov	r9, r1
 800b86a:	f7ff fc85 	bl	800b178 <__ieee754_sqrt>
 800b86e:	ec55 4b10 	vmov	r4, r5, d0
 800b872:	4642      	mov	r2, r8
 800b874:	464b      	mov	r3, r9
 800b876:	4630      	mov	r0, r6
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 ffef 	bl	800085c <__aeabi_ddiv>
 800b87e:	4622      	mov	r2, r4
 800b880:	462b      	mov	r3, r5
 800b882:	f7f4 fec1 	bl	8000608 <__aeabi_dmul>
 800b886:	a320      	add	r3, pc, #128	@ (adr r3, 800b908 <__ieee754_acos+0x2d0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f7f4 fd04 	bl	8000298 <__aeabi_dsub>
 800b890:	4622      	mov	r2, r4
 800b892:	462b      	mov	r3, r5
 800b894:	f7f4 fd02 	bl	800029c <__adddf3>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	f7f4 fcfe 	bl	800029c <__adddf3>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	a11c      	add	r1, pc, #112	@ (adr r1, 800b918 <__ieee754_acos+0x2e0>)
 800b8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8aa:	e76e      	b.n	800b78a <__ieee754_acos+0x152>
 800b8ac:	f3af 8000 	nop.w
	...
 800b8b8:	0dfdf709 	.word	0x0dfdf709
 800b8bc:	3f023de1 	.word	0x3f023de1
 800b8c0:	7501b288 	.word	0x7501b288
 800b8c4:	3f49efe0 	.word	0x3f49efe0
 800b8c8:	b5688f3b 	.word	0xb5688f3b
 800b8cc:	3fa48228 	.word	0x3fa48228
 800b8d0:	0e884455 	.word	0x0e884455
 800b8d4:	3fc9c155 	.word	0x3fc9c155
 800b8d8:	03eb6f7d 	.word	0x03eb6f7d
 800b8dc:	3fd4d612 	.word	0x3fd4d612
 800b8e0:	55555555 	.word	0x55555555
 800b8e4:	3fc55555 	.word	0x3fc55555
 800b8e8:	b12e9282 	.word	0xb12e9282
 800b8ec:	3fb3b8c5 	.word	0x3fb3b8c5
 800b8f0:	1b8d0159 	.word	0x1b8d0159
 800b8f4:	3fe6066c 	.word	0x3fe6066c
 800b8f8:	9c598ac8 	.word	0x9c598ac8
 800b8fc:	40002ae5 	.word	0x40002ae5
 800b900:	1c8a2d4b 	.word	0x1c8a2d4b
 800b904:	40033a27 	.word	0x40033a27
 800b908:	33145c07 	.word	0x33145c07
 800b90c:	3c91a626 	.word	0x3c91a626
 800b910:	54442d18 	.word	0x54442d18
 800b914:	3ff921fb 	.word	0x3ff921fb
 800b918:	54442d18 	.word	0x54442d18
 800b91c:	400921fb 	.word	0x400921fb
 800b920:	3fefffff 	.word	0x3fefffff
 800b924:	3fdfffff 	.word	0x3fdfffff
 800b928:	3c600000 	.word	0x3c600000
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	3fe00000 	.word	0x3fe00000
 800b934:	4622      	mov	r2, r4
 800b936:	462b      	mov	r3, r5
 800b938:	496b      	ldr	r1, [pc, #428]	@ (800bae8 <__ieee754_acos+0x4b0>)
 800b93a:	2000      	movs	r0, #0
 800b93c:	f7f4 fcac 	bl	8000298 <__aeabi_dsub>
 800b940:	4b6a      	ldr	r3, [pc, #424]	@ (800baec <__ieee754_acos+0x4b4>)
 800b942:	2200      	movs	r2, #0
 800b944:	f7f4 fe60 	bl	8000608 <__aeabi_dmul>
 800b948:	4604      	mov	r4, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	ec45 4b10 	vmov	d0, r4, r5
 800b950:	f7ff fc12 	bl	800b178 <__ieee754_sqrt>
 800b954:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba88 <__ieee754_acos+0x450>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	ec59 8b10 	vmov	r8, r9, d0
 800b962:	f7f4 fe51 	bl	8000608 <__aeabi_dmul>
 800b966:	a34a      	add	r3, pc, #296	@ (adr r3, 800ba90 <__ieee754_acos+0x458>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f7f4 fc96 	bl	800029c <__adddf3>
 800b970:	4622      	mov	r2, r4
 800b972:	462b      	mov	r3, r5
 800b974:	f7f4 fe48 	bl	8000608 <__aeabi_dmul>
 800b978:	a347      	add	r3, pc, #284	@ (adr r3, 800ba98 <__ieee754_acos+0x460>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fc8b 	bl	8000298 <__aeabi_dsub>
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	f7f4 fe3f 	bl	8000608 <__aeabi_dmul>
 800b98a:	a345      	add	r3, pc, #276	@ (adr r3, 800baa0 <__ieee754_acos+0x468>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fc84 	bl	800029c <__adddf3>
 800b994:	4622      	mov	r2, r4
 800b996:	462b      	mov	r3, r5
 800b998:	f7f4 fe36 	bl	8000608 <__aeabi_dmul>
 800b99c:	a342      	add	r3, pc, #264	@ (adr r3, 800baa8 <__ieee754_acos+0x470>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fc79 	bl	8000298 <__aeabi_dsub>
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	f7f4 fe2d 	bl	8000608 <__aeabi_dmul>
 800b9ae:	a340      	add	r3, pc, #256	@ (adr r3, 800bab0 <__ieee754_acos+0x478>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f7f4 fc72 	bl	800029c <__adddf3>
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	a33d      	add	r3, pc, #244	@ (adr r3, 800bab8 <__ieee754_acos+0x480>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	4682      	mov	sl, r0
 800b9c8:	468b      	mov	fp, r1
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	f7f4 fe1b 	bl	8000608 <__aeabi_dmul>
 800b9d2:	a33b      	add	r3, pc, #236	@ (adr r3, 800bac0 <__ieee754_acos+0x488>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fc5e 	bl	8000298 <__aeabi_dsub>
 800b9dc:	4622      	mov	r2, r4
 800b9de:	462b      	mov	r3, r5
 800b9e0:	f7f4 fe12 	bl	8000608 <__aeabi_dmul>
 800b9e4:	a338      	add	r3, pc, #224	@ (adr r3, 800bac8 <__ieee754_acos+0x490>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f4 fc57 	bl	800029c <__adddf3>
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	462b      	mov	r3, r5
 800b9f2:	f7f4 fe09 	bl	8000608 <__aeabi_dmul>
 800b9f6:	a336      	add	r3, pc, #216	@ (adr r3, 800bad0 <__ieee754_acos+0x498>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fc4c 	bl	8000298 <__aeabi_dsub>
 800ba00:	4622      	mov	r2, r4
 800ba02:	462b      	mov	r3, r5
 800ba04:	f7f4 fe00 	bl	8000608 <__aeabi_dmul>
 800ba08:	4b37      	ldr	r3, [pc, #220]	@ (800bae8 <__ieee754_acos+0x4b0>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f7f4 fc46 	bl	800029c <__adddf3>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4650      	mov	r0, sl
 800ba16:	4659      	mov	r1, fp
 800ba18:	f7f4 ff20 	bl	800085c <__aeabi_ddiv>
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	f7f4 fdf2 	bl	8000608 <__aeabi_dmul>
 800ba24:	2600      	movs	r6, #0
 800ba26:	4682      	mov	sl, r0
 800ba28:	468b      	mov	fp, r1
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	4630      	mov	r0, r6
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f4 fde9 	bl	8000608 <__aeabi_dmul>
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7f4 fc2b 	bl	8000298 <__aeabi_dsub>
 800ba42:	4632      	mov	r2, r6
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	464b      	mov	r3, r9
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	f7f4 fc25 	bl	800029c <__adddf3>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4620      	mov	r0, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	f7f4 feff 	bl	800085c <__aeabi_ddiv>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4650      	mov	r0, sl
 800ba64:	4659      	mov	r1, fp
 800ba66:	f7f4 fc19 	bl	800029c <__adddf3>
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	f7f4 fc15 	bl	800029c <__adddf3>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	f7f4 fc11 	bl	800029c <__adddf3>
 800ba7a:	e5fd      	b.n	800b678 <__ieee754_acos+0x40>
 800ba7c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800bad8 <__ieee754_acos+0x4a0>
 800ba80:	e5ee      	b.n	800b660 <__ieee754_acos+0x28>
 800ba82:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bae0 <__ieee754_acos+0x4a8>
 800ba86:	e5eb      	b.n	800b660 <__ieee754_acos+0x28>
 800ba88:	0dfdf709 	.word	0x0dfdf709
 800ba8c:	3f023de1 	.word	0x3f023de1
 800ba90:	7501b288 	.word	0x7501b288
 800ba94:	3f49efe0 	.word	0x3f49efe0
 800ba98:	b5688f3b 	.word	0xb5688f3b
 800ba9c:	3fa48228 	.word	0x3fa48228
 800baa0:	0e884455 	.word	0x0e884455
 800baa4:	3fc9c155 	.word	0x3fc9c155
 800baa8:	03eb6f7d 	.word	0x03eb6f7d
 800baac:	3fd4d612 	.word	0x3fd4d612
 800bab0:	55555555 	.word	0x55555555
 800bab4:	3fc55555 	.word	0x3fc55555
 800bab8:	b12e9282 	.word	0xb12e9282
 800babc:	3fb3b8c5 	.word	0x3fb3b8c5
 800bac0:	1b8d0159 	.word	0x1b8d0159
 800bac4:	3fe6066c 	.word	0x3fe6066c
 800bac8:	9c598ac8 	.word	0x9c598ac8
 800bacc:	40002ae5 	.word	0x40002ae5
 800bad0:	1c8a2d4b 	.word	0x1c8a2d4b
 800bad4:	40033a27 	.word	0x40033a27
 800bad8:	54442d18 	.word	0x54442d18
 800badc:	400921fb 	.word	0x400921fb
 800bae0:	54442d18 	.word	0x54442d18
 800bae4:	3ff921fb 	.word	0x3ff921fb
 800bae8:	3ff00000 	.word	0x3ff00000
 800baec:	3fe00000 	.word	0x3fe00000

0800baf0 <__ieee754_asin>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ec55 4b10 	vmov	r4, r5, d0
 800baf8:	4bc7      	ldr	r3, [pc, #796]	@ (800be18 <__ieee754_asin+0x328>)
 800bafa:	b087      	sub	sp, #28
 800bafc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bb00:	429e      	cmp	r6, r3
 800bb02:	9501      	str	r5, [sp, #4]
 800bb04:	d92d      	bls.n	800bb62 <__ieee754_asin+0x72>
 800bb06:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bb0a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bb0e:	4326      	orrs	r6, r4
 800bb10:	d116      	bne.n	800bb40 <__ieee754_asin+0x50>
 800bb12:	a3a7      	add	r3, pc, #668	@ (adr r3, 800bdb0 <__ieee754_asin+0x2c0>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	4620      	mov	r0, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7f4 fd74 	bl	8000608 <__aeabi_dmul>
 800bb20:	a3a5      	add	r3, pc, #660	@ (adr r3, 800bdb8 <__ieee754_asin+0x2c8>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	4606      	mov	r6, r0
 800bb28:	460f      	mov	r7, r1
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	f7f4 fd6b 	bl	8000608 <__aeabi_dmul>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fbaf 	bl	800029c <__adddf3>
 800bb3e:	e009      	b.n	800bb54 <__ieee754_asin+0x64>
 800bb40:	4622      	mov	r2, r4
 800bb42:	462b      	mov	r3, r5
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fba6 	bl	8000298 <__aeabi_dsub>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	f7f4 fe84 	bl	800085c <__aeabi_ddiv>
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	ec45 4b10 	vmov	d0, r4, r5
 800bb5c:	b007      	add	sp, #28
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	4bae      	ldr	r3, [pc, #696]	@ (800be1c <__ieee754_asin+0x32c>)
 800bb64:	429e      	cmp	r6, r3
 800bb66:	d810      	bhi.n	800bb8a <__ieee754_asin+0x9a>
 800bb68:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800bb6c:	f080 80ad 	bcs.w	800bcca <__ieee754_asin+0x1da>
 800bb70:	a393      	add	r3, pc, #588	@ (adr r3, 800bdc0 <__ieee754_asin+0x2d0>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 fb8f 	bl	800029c <__adddf3>
 800bb7e:	4ba8      	ldr	r3, [pc, #672]	@ (800be20 <__ieee754_asin+0x330>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	f7f4 ffd1 	bl	8000b28 <__aeabi_dcmpgt>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d1e6      	bne.n	800bb58 <__ieee754_asin+0x68>
 800bb8a:	ec45 4b10 	vmov	d0, r4, r5
 800bb8e:	f7ff fa83 	bl	800b098 <fabs>
 800bb92:	49a3      	ldr	r1, [pc, #652]	@ (800be20 <__ieee754_asin+0x330>)
 800bb94:	ec53 2b10 	vmov	r2, r3, d0
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f7f4 fb7d 	bl	8000298 <__aeabi_dsub>
 800bb9e:	4ba1      	ldr	r3, [pc, #644]	@ (800be24 <__ieee754_asin+0x334>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	f7f4 fd31 	bl	8000608 <__aeabi_dmul>
 800bba6:	a388      	add	r3, pc, #544	@ (adr r3, 800bdc8 <__ieee754_asin+0x2d8>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	f7f4 fd2a 	bl	8000608 <__aeabi_dmul>
 800bbb4:	a386      	add	r3, pc, #536	@ (adr r3, 800bdd0 <__ieee754_asin+0x2e0>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fb6f 	bl	800029c <__adddf3>
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	f7f4 fd21 	bl	8000608 <__aeabi_dmul>
 800bbc6:	a384      	add	r3, pc, #528	@ (adr r3, 800bdd8 <__ieee754_asin+0x2e8>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fb64 	bl	8000298 <__aeabi_dsub>
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	f7f4 fd18 	bl	8000608 <__aeabi_dmul>
 800bbd8:	a381      	add	r3, pc, #516	@ (adr r3, 800bde0 <__ieee754_asin+0x2f0>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f7f4 fb5d 	bl	800029c <__adddf3>
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	462b      	mov	r3, r5
 800bbe6:	f7f4 fd0f 	bl	8000608 <__aeabi_dmul>
 800bbea:	a37f      	add	r3, pc, #508	@ (adr r3, 800bde8 <__ieee754_asin+0x2f8>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f7f4 fb52 	bl	8000298 <__aeabi_dsub>
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	462b      	mov	r3, r5
 800bbf8:	f7f4 fd06 	bl	8000608 <__aeabi_dmul>
 800bbfc:	a37c      	add	r3, pc, #496	@ (adr r3, 800bdf0 <__ieee754_asin+0x300>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f7f4 fb4b 	bl	800029c <__adddf3>
 800bc06:	4622      	mov	r2, r4
 800bc08:	462b      	mov	r3, r5
 800bc0a:	f7f4 fcfd 	bl	8000608 <__aeabi_dmul>
 800bc0e:	a37a      	add	r3, pc, #488	@ (adr r3, 800bdf8 <__ieee754_asin+0x308>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f7f4 fcf4 	bl	8000608 <__aeabi_dmul>
 800bc20:	a377      	add	r3, pc, #476	@ (adr r3, 800be00 <__ieee754_asin+0x310>)
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	f7f4 fb37 	bl	8000298 <__aeabi_dsub>
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	f7f4 fceb 	bl	8000608 <__aeabi_dmul>
 800bc32:	a375      	add	r3, pc, #468	@ (adr r3, 800be08 <__ieee754_asin+0x318>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	f7f4 fb30 	bl	800029c <__adddf3>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	462b      	mov	r3, r5
 800bc40:	f7f4 fce2 	bl	8000608 <__aeabi_dmul>
 800bc44:	a372      	add	r3, pc, #456	@ (adr r3, 800be10 <__ieee754_asin+0x320>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fb25 	bl	8000298 <__aeabi_dsub>
 800bc4e:	4622      	mov	r2, r4
 800bc50:	462b      	mov	r3, r5
 800bc52:	f7f4 fcd9 	bl	8000608 <__aeabi_dmul>
 800bc56:	4b72      	ldr	r3, [pc, #456]	@ (800be20 <__ieee754_asin+0x330>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f7f4 fb1f 	bl	800029c <__adddf3>
 800bc5e:	ec45 4b10 	vmov	d0, r4, r5
 800bc62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc66:	f7ff fa87 	bl	800b178 <__ieee754_sqrt>
 800bc6a:	4b6f      	ldr	r3, [pc, #444]	@ (800be28 <__ieee754_asin+0x338>)
 800bc6c:	429e      	cmp	r6, r3
 800bc6e:	ec5b ab10 	vmov	sl, fp, d0
 800bc72:	f240 80db 	bls.w	800be2c <__ieee754_asin+0x33c>
 800bc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7e:	f7f4 fded 	bl	800085c <__aeabi_ddiv>
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	f7f4 fcbf 	bl	8000608 <__aeabi_dmul>
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	465b      	mov	r3, fp
 800bc8e:	f7f4 fb05 	bl	800029c <__adddf3>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	f7f4 fb01 	bl	800029c <__adddf3>
 800bc9a:	a347      	add	r3, pc, #284	@ (adr r3, 800bdb8 <__ieee754_asin+0x2c8>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f7f4 fafa 	bl	8000298 <__aeabi_dsub>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	a141      	add	r1, pc, #260	@ (adr r1, 800bdb0 <__ieee754_asin+0x2c0>)
 800bcaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcae:	f7f4 faf3 	bl	8000298 <__aeabi_dsub>
 800bcb2:	9b01      	ldr	r3, [sp, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfdc      	itt	le
 800bcb8:	4602      	movle	r2, r0
 800bcba:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	bfdc      	itt	le
 800bcc4:	4614      	movle	r4, r2
 800bcc6:	461d      	movle	r5, r3
 800bcc8:	e746      	b.n	800bb58 <__ieee754_asin+0x68>
 800bcca:	4622      	mov	r2, r4
 800bccc:	462b      	mov	r3, r5
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f4 fc99 	bl	8000608 <__aeabi_dmul>
 800bcd6:	a33c      	add	r3, pc, #240	@ (adr r3, 800bdc8 <__ieee754_asin+0x2d8>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	f7f4 fc92 	bl	8000608 <__aeabi_dmul>
 800bce4:	a33a      	add	r3, pc, #232	@ (adr r3, 800bdd0 <__ieee754_asin+0x2e0>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fad7 	bl	800029c <__adddf3>
 800bcee:	4632      	mov	r2, r6
 800bcf0:	463b      	mov	r3, r7
 800bcf2:	f7f4 fc89 	bl	8000608 <__aeabi_dmul>
 800bcf6:	a338      	add	r3, pc, #224	@ (adr r3, 800bdd8 <__ieee754_asin+0x2e8>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f7f4 facc 	bl	8000298 <__aeabi_dsub>
 800bd00:	4632      	mov	r2, r6
 800bd02:	463b      	mov	r3, r7
 800bd04:	f7f4 fc80 	bl	8000608 <__aeabi_dmul>
 800bd08:	a335      	add	r3, pc, #212	@ (adr r3, 800bde0 <__ieee754_asin+0x2f0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fac5 	bl	800029c <__adddf3>
 800bd12:	4632      	mov	r2, r6
 800bd14:	463b      	mov	r3, r7
 800bd16:	f7f4 fc77 	bl	8000608 <__aeabi_dmul>
 800bd1a:	a333      	add	r3, pc, #204	@ (adr r3, 800bde8 <__ieee754_asin+0x2f8>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 faba 	bl	8000298 <__aeabi_dsub>
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	f7f4 fc6e 	bl	8000608 <__aeabi_dmul>
 800bd2c:	a330      	add	r3, pc, #192	@ (adr r3, 800bdf0 <__ieee754_asin+0x300>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 fab3 	bl	800029c <__adddf3>
 800bd36:	4632      	mov	r2, r6
 800bd38:	463b      	mov	r3, r7
 800bd3a:	f7f4 fc65 	bl	8000608 <__aeabi_dmul>
 800bd3e:	a32e      	add	r3, pc, #184	@ (adr r3, 800bdf8 <__ieee754_asin+0x308>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	4680      	mov	r8, r0
 800bd46:	4689      	mov	r9, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	a32b      	add	r3, pc, #172	@ (adr r3, 800be00 <__ieee754_asin+0x310>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fa9f 	bl	8000298 <__aeabi_dsub>
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	463b      	mov	r3, r7
 800bd5e:	f7f4 fc53 	bl	8000608 <__aeabi_dmul>
 800bd62:	a329      	add	r3, pc, #164	@ (adr r3, 800be08 <__ieee754_asin+0x318>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fa98 	bl	800029c <__adddf3>
 800bd6c:	4632      	mov	r2, r6
 800bd6e:	463b      	mov	r3, r7
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	a326      	add	r3, pc, #152	@ (adr r3, 800be10 <__ieee754_asin+0x320>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fa8d 	bl	8000298 <__aeabi_dsub>
 800bd7e:	4632      	mov	r2, r6
 800bd80:	463b      	mov	r3, r7
 800bd82:	f7f4 fc41 	bl	8000608 <__aeabi_dmul>
 800bd86:	4b26      	ldr	r3, [pc, #152]	@ (800be20 <__ieee754_asin+0x330>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f7f4 fa87 	bl	800029c <__adddf3>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4640      	mov	r0, r8
 800bd94:	4649      	mov	r1, r9
 800bd96:	f7f4 fd61 	bl	800085c <__aeabi_ddiv>
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	f7f4 fc33 	bl	8000608 <__aeabi_dmul>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	e6c6      	b.n	800bb3a <__ieee754_asin+0x4a>
 800bdac:	f3af 8000 	nop.w
 800bdb0:	54442d18 	.word	0x54442d18
 800bdb4:	3ff921fb 	.word	0x3ff921fb
 800bdb8:	33145c07 	.word	0x33145c07
 800bdbc:	3c91a626 	.word	0x3c91a626
 800bdc0:	8800759c 	.word	0x8800759c
 800bdc4:	7e37e43c 	.word	0x7e37e43c
 800bdc8:	0dfdf709 	.word	0x0dfdf709
 800bdcc:	3f023de1 	.word	0x3f023de1
 800bdd0:	7501b288 	.word	0x7501b288
 800bdd4:	3f49efe0 	.word	0x3f49efe0
 800bdd8:	b5688f3b 	.word	0xb5688f3b
 800bddc:	3fa48228 	.word	0x3fa48228
 800bde0:	0e884455 	.word	0x0e884455
 800bde4:	3fc9c155 	.word	0x3fc9c155
 800bde8:	03eb6f7d 	.word	0x03eb6f7d
 800bdec:	3fd4d612 	.word	0x3fd4d612
 800bdf0:	55555555 	.word	0x55555555
 800bdf4:	3fc55555 	.word	0x3fc55555
 800bdf8:	b12e9282 	.word	0xb12e9282
 800bdfc:	3fb3b8c5 	.word	0x3fb3b8c5
 800be00:	1b8d0159 	.word	0x1b8d0159
 800be04:	3fe6066c 	.word	0x3fe6066c
 800be08:	9c598ac8 	.word	0x9c598ac8
 800be0c:	40002ae5 	.word	0x40002ae5
 800be10:	1c8a2d4b 	.word	0x1c8a2d4b
 800be14:	40033a27 	.word	0x40033a27
 800be18:	3fefffff 	.word	0x3fefffff
 800be1c:	3fdfffff 	.word	0x3fdfffff
 800be20:	3ff00000 	.word	0x3ff00000
 800be24:	3fe00000 	.word	0x3fe00000
 800be28:	3fef3332 	.word	0x3fef3332
 800be2c:	4652      	mov	r2, sl
 800be2e:	465b      	mov	r3, fp
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	f7f4 fa32 	bl	800029c <__adddf3>
 800be38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be3c:	4606      	mov	r6, r0
 800be3e:	460f      	mov	r7, r1
 800be40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be44:	f7f4 fd0a 	bl	800085c <__aeabi_ddiv>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fbda 	bl	8000608 <__aeabi_dmul>
 800be54:	f04f 0800 	mov.w	r8, #0
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	4642      	mov	r2, r8
 800be5e:	465b      	mov	r3, fp
 800be60:	4640      	mov	r0, r8
 800be62:	4659      	mov	r1, fp
 800be64:	f7f4 fbd0 	bl	8000608 <__aeabi_dmul>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fa12 	bl	8000298 <__aeabi_dsub>
 800be74:	4642      	mov	r2, r8
 800be76:	4604      	mov	r4, r0
 800be78:	460d      	mov	r5, r1
 800be7a:	465b      	mov	r3, fp
 800be7c:	4650      	mov	r0, sl
 800be7e:	4659      	mov	r1, fp
 800be80:	f7f4 fa0c 	bl	800029c <__adddf3>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4620      	mov	r0, r4
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7f4 fce6 	bl	800085c <__aeabi_ddiv>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	f7f4 fa02 	bl	800029c <__adddf3>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	a112      	add	r1, pc, #72	@ (adr r1, 800bee8 <__ieee754_asin+0x3f8>)
 800be9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bea2:	f7f4 f9f9 	bl	8000298 <__aeabi_dsub>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 f9f3 	bl	8000298 <__aeabi_dsub>
 800beb2:	4642      	mov	r2, r8
 800beb4:	4604      	mov	r4, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	465b      	mov	r3, fp
 800beba:	4640      	mov	r0, r8
 800bebc:	4659      	mov	r1, fp
 800bebe:	f7f4 f9ed 	bl	800029c <__adddf3>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	a10a      	add	r1, pc, #40	@ (adr r1, 800bef0 <__ieee754_asin+0x400>)
 800bec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800becc:	f7f4 f9e4 	bl	8000298 <__aeabi_dsub>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4620      	mov	r0, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	f7f4 f9de 	bl	8000298 <__aeabi_dsub>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	a103      	add	r1, pc, #12	@ (adr r1, 800bef0 <__ieee754_asin+0x400>)
 800bee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee6:	e6e2      	b.n	800bcae <__ieee754_asin+0x1be>
 800bee8:	33145c07 	.word	0x33145c07
 800beec:	3c91a626 	.word	0x3c91a626
 800bef0:	54442d18 	.word	0x54442d18
 800bef4:	3fe921fb 	.word	0x3fe921fb

0800bef8 <__ieee754_pow>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	b091      	sub	sp, #68	@ 0x44
 800befe:	ed8d 1b00 	vstr	d1, [sp]
 800bf02:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bf06:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bf0a:	ea5a 0001 	orrs.w	r0, sl, r1
 800bf0e:	ec57 6b10 	vmov	r6, r7, d0
 800bf12:	d113      	bne.n	800bf3c <__ieee754_pow+0x44>
 800bf14:	19b3      	adds	r3, r6, r6
 800bf16:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bf1a:	4152      	adcs	r2, r2
 800bf1c:	4298      	cmp	r0, r3
 800bf1e:	4b98      	ldr	r3, [pc, #608]	@ (800c180 <__ieee754_pow+0x288>)
 800bf20:	4193      	sbcs	r3, r2
 800bf22:	f080 84ea 	bcs.w	800c8fa <__ieee754_pow+0xa02>
 800bf26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7f4 f9b5 	bl	800029c <__adddf3>
 800bf32:	ec41 0b10 	vmov	d0, r0, r1
 800bf36:	b011      	add	sp, #68	@ 0x44
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	4a91      	ldr	r2, [pc, #580]	@ (800c184 <__ieee754_pow+0x28c>)
 800bf3e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bf42:	4590      	cmp	r8, r2
 800bf44:	463d      	mov	r5, r7
 800bf46:	4633      	mov	r3, r6
 800bf48:	d806      	bhi.n	800bf58 <__ieee754_pow+0x60>
 800bf4a:	d101      	bne.n	800bf50 <__ieee754_pow+0x58>
 800bf4c:	2e00      	cmp	r6, #0
 800bf4e:	d1ea      	bne.n	800bf26 <__ieee754_pow+0x2e>
 800bf50:	4592      	cmp	sl, r2
 800bf52:	d801      	bhi.n	800bf58 <__ieee754_pow+0x60>
 800bf54:	d10e      	bne.n	800bf74 <__ieee754_pow+0x7c>
 800bf56:	b169      	cbz	r1, 800bf74 <__ieee754_pow+0x7c>
 800bf58:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bf5c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bf60:	431d      	orrs	r5, r3
 800bf62:	d1e0      	bne.n	800bf26 <__ieee754_pow+0x2e>
 800bf64:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf68:	18db      	adds	r3, r3, r3
 800bf6a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bf6e:	4152      	adcs	r2, r2
 800bf70:	429d      	cmp	r5, r3
 800bf72:	e7d4      	b.n	800bf1e <__ieee754_pow+0x26>
 800bf74:	2d00      	cmp	r5, #0
 800bf76:	46c3      	mov	fp, r8
 800bf78:	da3a      	bge.n	800bff0 <__ieee754_pow+0xf8>
 800bf7a:	4a83      	ldr	r2, [pc, #524]	@ (800c188 <__ieee754_pow+0x290>)
 800bf7c:	4592      	cmp	sl, r2
 800bf7e:	d84d      	bhi.n	800c01c <__ieee754_pow+0x124>
 800bf80:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bf84:	4592      	cmp	sl, r2
 800bf86:	f240 84c7 	bls.w	800c918 <__ieee754_pow+0xa20>
 800bf8a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bf8e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bf92:	2a14      	cmp	r2, #20
 800bf94:	dd0f      	ble.n	800bfb6 <__ieee754_pow+0xbe>
 800bf96:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bf9a:	fa21 f402 	lsr.w	r4, r1, r2
 800bf9e:	fa04 f202 	lsl.w	r2, r4, r2
 800bfa2:	428a      	cmp	r2, r1
 800bfa4:	f040 84b8 	bne.w	800c918 <__ieee754_pow+0xa20>
 800bfa8:	f004 0401 	and.w	r4, r4, #1
 800bfac:	f1c4 0402 	rsb	r4, r4, #2
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	d158      	bne.n	800c066 <__ieee754_pow+0x16e>
 800bfb4:	e00e      	b.n	800bfd4 <__ieee754_pow+0xdc>
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	d154      	bne.n	800c064 <__ieee754_pow+0x16c>
 800bfba:	f1c2 0214 	rsb	r2, r2, #20
 800bfbe:	fa4a f402 	asr.w	r4, sl, r2
 800bfc2:	fa04 f202 	lsl.w	r2, r4, r2
 800bfc6:	4552      	cmp	r2, sl
 800bfc8:	f040 84a3 	bne.w	800c912 <__ieee754_pow+0xa1a>
 800bfcc:	f004 0401 	and.w	r4, r4, #1
 800bfd0:	f1c4 0402 	rsb	r4, r4, #2
 800bfd4:	4a6d      	ldr	r2, [pc, #436]	@ (800c18c <__ieee754_pow+0x294>)
 800bfd6:	4592      	cmp	sl, r2
 800bfd8:	d12e      	bne.n	800c038 <__ieee754_pow+0x140>
 800bfda:	f1b9 0f00 	cmp.w	r9, #0
 800bfde:	f280 8494 	bge.w	800c90a <__ieee754_pow+0xa12>
 800bfe2:	496a      	ldr	r1, [pc, #424]	@ (800c18c <__ieee754_pow+0x294>)
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f7f4 fc37 	bl	800085c <__aeabi_ddiv>
 800bfee:	e7a0      	b.n	800bf32 <__ieee754_pow+0x3a>
 800bff0:	2400      	movs	r4, #0
 800bff2:	bbc1      	cbnz	r1, 800c066 <__ieee754_pow+0x16e>
 800bff4:	4a63      	ldr	r2, [pc, #396]	@ (800c184 <__ieee754_pow+0x28c>)
 800bff6:	4592      	cmp	sl, r2
 800bff8:	d1ec      	bne.n	800bfd4 <__ieee754_pow+0xdc>
 800bffa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bffe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c002:	431a      	orrs	r2, r3
 800c004:	f000 8479 	beq.w	800c8fa <__ieee754_pow+0xa02>
 800c008:	4b61      	ldr	r3, [pc, #388]	@ (800c190 <__ieee754_pow+0x298>)
 800c00a:	4598      	cmp	r8, r3
 800c00c:	d908      	bls.n	800c020 <__ieee754_pow+0x128>
 800c00e:	f1b9 0f00 	cmp.w	r9, #0
 800c012:	f2c0 8476 	blt.w	800c902 <__ieee754_pow+0xa0a>
 800c016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c01a:	e78a      	b.n	800bf32 <__ieee754_pow+0x3a>
 800c01c:	2402      	movs	r4, #2
 800c01e:	e7e8      	b.n	800bff2 <__ieee754_pow+0xfa>
 800c020:	f1b9 0f00 	cmp.w	r9, #0
 800c024:	f04f 0000 	mov.w	r0, #0
 800c028:	f04f 0100 	mov.w	r1, #0
 800c02c:	da81      	bge.n	800bf32 <__ieee754_pow+0x3a>
 800c02e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c032:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c036:	e77c      	b.n	800bf32 <__ieee754_pow+0x3a>
 800c038:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c03c:	d106      	bne.n	800c04c <__ieee754_pow+0x154>
 800c03e:	4632      	mov	r2, r6
 800c040:	463b      	mov	r3, r7
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 fadf 	bl	8000608 <__aeabi_dmul>
 800c04a:	e772      	b.n	800bf32 <__ieee754_pow+0x3a>
 800c04c:	4a51      	ldr	r2, [pc, #324]	@ (800c194 <__ieee754_pow+0x29c>)
 800c04e:	4591      	cmp	r9, r2
 800c050:	d109      	bne.n	800c066 <__ieee754_pow+0x16e>
 800c052:	2d00      	cmp	r5, #0
 800c054:	db07      	blt.n	800c066 <__ieee754_pow+0x16e>
 800c056:	ec47 6b10 	vmov	d0, r6, r7
 800c05a:	b011      	add	sp, #68	@ 0x44
 800c05c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	f7ff b88a 	b.w	800b178 <__ieee754_sqrt>
 800c064:	2400      	movs	r4, #0
 800c066:	ec47 6b10 	vmov	d0, r6, r7
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	f7ff f814 	bl	800b098 <fabs>
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	ec51 0b10 	vmov	r0, r1, d0
 800c076:	bb53      	cbnz	r3, 800c0ce <__ieee754_pow+0x1d6>
 800c078:	4b44      	ldr	r3, [pc, #272]	@ (800c18c <__ieee754_pow+0x294>)
 800c07a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c07e:	429a      	cmp	r2, r3
 800c080:	d002      	beq.n	800c088 <__ieee754_pow+0x190>
 800c082:	f1b8 0f00 	cmp.w	r8, #0
 800c086:	d122      	bne.n	800c0ce <__ieee754_pow+0x1d6>
 800c088:	f1b9 0f00 	cmp.w	r9, #0
 800c08c:	da05      	bge.n	800c09a <__ieee754_pow+0x1a2>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	2000      	movs	r0, #0
 800c094:	493d      	ldr	r1, [pc, #244]	@ (800c18c <__ieee754_pow+0x294>)
 800c096:	f7f4 fbe1 	bl	800085c <__aeabi_ddiv>
 800c09a:	2d00      	cmp	r5, #0
 800c09c:	f6bf af49 	bge.w	800bf32 <__ieee754_pow+0x3a>
 800c0a0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c0a4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c0a8:	ea58 0804 	orrs.w	r8, r8, r4
 800c0ac:	d108      	bne.n	800c0c0 <__ieee754_pow+0x1c8>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f7f4 f8ef 	bl	8000298 <__aeabi_dsub>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	e794      	b.n	800bfea <__ieee754_pow+0xf2>
 800c0c0:	2c01      	cmp	r4, #1
 800c0c2:	f47f af36 	bne.w	800bf32 <__ieee754_pow+0x3a>
 800c0c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	e731      	b.n	800bf32 <__ieee754_pow+0x3a>
 800c0ce:	0feb      	lsrs	r3, r5, #31
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	ea53 0204 	orrs.w	r2, r3, r4
 800c0d6:	d102      	bne.n	800c0de <__ieee754_pow+0x1e6>
 800c0d8:	4632      	mov	r2, r6
 800c0da:	463b      	mov	r3, r7
 800c0dc:	e7e9      	b.n	800c0b2 <__ieee754_pow+0x1ba>
 800c0de:	3c01      	subs	r4, #1
 800c0e0:	431c      	orrs	r4, r3
 800c0e2:	d016      	beq.n	800c112 <__ieee754_pow+0x21a>
 800c0e4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c170 <__ieee754_pow+0x278>
 800c0e8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c0ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0f0:	f240 8112 	bls.w	800c318 <__ieee754_pow+0x420>
 800c0f4:	4b28      	ldr	r3, [pc, #160]	@ (800c198 <__ieee754_pow+0x2a0>)
 800c0f6:	459a      	cmp	sl, r3
 800c0f8:	4b25      	ldr	r3, [pc, #148]	@ (800c190 <__ieee754_pow+0x298>)
 800c0fa:	d916      	bls.n	800c12a <__ieee754_pow+0x232>
 800c0fc:	4598      	cmp	r8, r3
 800c0fe:	d80b      	bhi.n	800c118 <__ieee754_pow+0x220>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	da0b      	bge.n	800c11e <__ieee754_pow+0x226>
 800c106:	2000      	movs	r0, #0
 800c108:	b011      	add	sp, #68	@ 0x44
 800c10a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10e:	f000 bee7 	b.w	800cee0 <__math_oflow>
 800c112:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c178 <__ieee754_pow+0x280>
 800c116:	e7e7      	b.n	800c0e8 <__ieee754_pow+0x1f0>
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	dcf3      	bgt.n	800c106 <__ieee754_pow+0x20e>
 800c11e:	2000      	movs	r0, #0
 800c120:	b011      	add	sp, #68	@ 0x44
 800c122:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c126:	f000 bed3 	b.w	800ced0 <__math_uflow>
 800c12a:	4598      	cmp	r8, r3
 800c12c:	d20c      	bcs.n	800c148 <__ieee754_pow+0x250>
 800c12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c132:	2200      	movs	r2, #0
 800c134:	2300      	movs	r3, #0
 800c136:	f7f4 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800c13a:	3800      	subs	r0, #0
 800c13c:	bf18      	it	ne
 800c13e:	2001      	movne	r0, #1
 800c140:	f1b9 0f00 	cmp.w	r9, #0
 800c144:	daec      	bge.n	800c120 <__ieee754_pow+0x228>
 800c146:	e7df      	b.n	800c108 <__ieee754_pow+0x210>
 800c148:	4b10      	ldr	r3, [pc, #64]	@ (800c18c <__ieee754_pow+0x294>)
 800c14a:	4598      	cmp	r8, r3
 800c14c:	f04f 0200 	mov.w	r2, #0
 800c150:	d924      	bls.n	800c19c <__ieee754_pow+0x2a4>
 800c152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c156:	2300      	movs	r3, #0
 800c158:	f7f4 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800c15c:	3800      	subs	r0, #0
 800c15e:	bf18      	it	ne
 800c160:	2001      	movne	r0, #1
 800c162:	f1b9 0f00 	cmp.w	r9, #0
 800c166:	dccf      	bgt.n	800c108 <__ieee754_pow+0x210>
 800c168:	e7da      	b.n	800c120 <__ieee754_pow+0x228>
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w
 800c170:	00000000 	.word	0x00000000
 800c174:	3ff00000 	.word	0x3ff00000
 800c178:	00000000 	.word	0x00000000
 800c17c:	bff00000 	.word	0xbff00000
 800c180:	fff00000 	.word	0xfff00000
 800c184:	7ff00000 	.word	0x7ff00000
 800c188:	433fffff 	.word	0x433fffff
 800c18c:	3ff00000 	.word	0x3ff00000
 800c190:	3fefffff 	.word	0x3fefffff
 800c194:	3fe00000 	.word	0x3fe00000
 800c198:	43f00000 	.word	0x43f00000
 800c19c:	4b5a      	ldr	r3, [pc, #360]	@ (800c308 <__ieee754_pow+0x410>)
 800c19e:	f7f4 f87b 	bl	8000298 <__aeabi_dsub>
 800c1a2:	a351      	add	r3, pc, #324	@ (adr r3, 800c2e8 <__ieee754_pow+0x3f0>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	f7f4 fa2c 	bl	8000608 <__aeabi_dmul>
 800c1b0:	a34f      	add	r3, pc, #316	@ (adr r3, 800c2f0 <__ieee754_pow+0x3f8>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460f      	mov	r7, r1
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	f7f4 fa23 	bl	8000608 <__aeabi_dmul>
 800c1c2:	4b52      	ldr	r3, [pc, #328]	@ (800c30c <__ieee754_pow+0x414>)
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	468b      	mov	fp, r1
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7f4 fa1b 	bl	8000608 <__aeabi_dmul>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	a148      	add	r1, pc, #288	@ (adr r1, 800c2f8 <__ieee754_pow+0x400>)
 800c1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1dc:	f7f4 f85c 	bl	8000298 <__aeabi_dsub>
 800c1e0:	4622      	mov	r2, r4
 800c1e2:	462b      	mov	r3, r5
 800c1e4:	f7f4 fa10 	bl	8000608 <__aeabi_dmul>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	4948      	ldr	r1, [pc, #288]	@ (800c310 <__ieee754_pow+0x418>)
 800c1f0:	f7f4 f852 	bl	8000298 <__aeabi_dsub>
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4680      	mov	r8, r0
 800c1f8:	4689      	mov	r9, r1
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7f4 fa02 	bl	8000608 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 f9fc 	bl	8000608 <__aeabi_dmul>
 800c210:	a33b      	add	r3, pc, #236	@ (adr r3, 800c300 <__ieee754_pow+0x408>)
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	f7f4 f9f7 	bl	8000608 <__aeabi_dmul>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4650      	mov	r0, sl
 800c220:	4659      	mov	r1, fp
 800c222:	f7f4 f839 	bl	8000298 <__aeabi_dsub>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4680      	mov	r8, r0
 800c22c:	4689      	mov	r9, r1
 800c22e:	4630      	mov	r0, r6
 800c230:	4639      	mov	r1, r7
 800c232:	f7f4 f833 	bl	800029c <__adddf3>
 800c236:	2400      	movs	r4, #0
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	4620      	mov	r0, r4
 800c23e:	460d      	mov	r5, r1
 800c240:	f7f4 f82a 	bl	8000298 <__aeabi_dsub>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 f824 	bl	8000298 <__aeabi_dsub>
 800c250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c254:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c258:	2300      	movs	r3, #0
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c260:	4606      	mov	r6, r0
 800c262:	460f      	mov	r7, r1
 800c264:	4652      	mov	r2, sl
 800c266:	465b      	mov	r3, fp
 800c268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c26c:	f7f4 f814 	bl	8000298 <__aeabi_dsub>
 800c270:	4622      	mov	r2, r4
 800c272:	462b      	mov	r3, r5
 800c274:	f7f4 f9c8 	bl	8000608 <__aeabi_dmul>
 800c278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	4630      	mov	r0, r6
 800c282:	4639      	mov	r1, r7
 800c284:	f7f4 f9c0 	bl	8000608 <__aeabi_dmul>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4640      	mov	r0, r8
 800c28e:	4649      	mov	r1, r9
 800c290:	f7f4 f804 	bl	800029c <__adddf3>
 800c294:	4652      	mov	r2, sl
 800c296:	465b      	mov	r3, fp
 800c298:	4606      	mov	r6, r0
 800c29a:	460f      	mov	r7, r1
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f4 f9b2 	bl	8000608 <__aeabi_dmul>
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	4689      	mov	r9, r1
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f3 fff4 	bl	800029c <__adddf3>
 800c2b4:	4b17      	ldr	r3, [pc, #92]	@ (800c314 <__ieee754_pow+0x41c>)
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	468a      	mov	sl, r1
 800c2be:	468b      	mov	fp, r1
 800c2c0:	f340 82ef 	ble.w	800c8a2 <__ieee754_pow+0x9aa>
 800c2c4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c2c8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	f000 81e8 	beq.w	800c6a2 <__ieee754_pow+0x7aa>
 800c2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f7f4 fc07 	bl	8000aec <__aeabi_dcmplt>
 800c2de:	3800      	subs	r0, #0
 800c2e0:	bf18      	it	ne
 800c2e2:	2001      	movne	r0, #1
 800c2e4:	e710      	b.n	800c108 <__ieee754_pow+0x210>
 800c2e6:	bf00      	nop
 800c2e8:	60000000 	.word	0x60000000
 800c2ec:	3ff71547 	.word	0x3ff71547
 800c2f0:	f85ddf44 	.word	0xf85ddf44
 800c2f4:	3e54ae0b 	.word	0x3e54ae0b
 800c2f8:	55555555 	.word	0x55555555
 800c2fc:	3fd55555 	.word	0x3fd55555
 800c300:	652b82fe 	.word	0x652b82fe
 800c304:	3ff71547 	.word	0x3ff71547
 800c308:	3ff00000 	.word	0x3ff00000
 800c30c:	3fd00000 	.word	0x3fd00000
 800c310:	3fe00000 	.word	0x3fe00000
 800c314:	408fffff 	.word	0x408fffff
 800c318:	4bd5      	ldr	r3, [pc, #852]	@ (800c670 <__ieee754_pow+0x778>)
 800c31a:	402b      	ands	r3, r5
 800c31c:	2200      	movs	r2, #0
 800c31e:	b92b      	cbnz	r3, 800c32c <__ieee754_pow+0x434>
 800c320:	4bd4      	ldr	r3, [pc, #848]	@ (800c674 <__ieee754_pow+0x77c>)
 800c322:	f7f4 f971 	bl	8000608 <__aeabi_dmul>
 800c326:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c32a:	468b      	mov	fp, r1
 800c32c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c330:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c334:	4413      	add	r3, r2
 800c336:	930a      	str	r3, [sp, #40]	@ 0x28
 800c338:	4bcf      	ldr	r3, [pc, #828]	@ (800c678 <__ieee754_pow+0x780>)
 800c33a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c33e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c342:	459b      	cmp	fp, r3
 800c344:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c348:	dd08      	ble.n	800c35c <__ieee754_pow+0x464>
 800c34a:	4bcc      	ldr	r3, [pc, #816]	@ (800c67c <__ieee754_pow+0x784>)
 800c34c:	459b      	cmp	fp, r3
 800c34e:	f340 81a5 	ble.w	800c69c <__ieee754_pow+0x7a4>
 800c352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c354:	3301      	adds	r3, #1
 800c356:	930a      	str	r3, [sp, #40]	@ 0x28
 800c358:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c35c:	f04f 0a00 	mov.w	sl, #0
 800c360:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c364:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c366:	4bc6      	ldr	r3, [pc, #792]	@ (800c680 <__ieee754_pow+0x788>)
 800c368:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c36c:	ed93 7b00 	vldr	d7, [r3]
 800c370:	4629      	mov	r1, r5
 800c372:	ec53 2b17 	vmov	r2, r3, d7
 800c376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c37a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c37e:	f7f3 ff8b 	bl	8000298 <__aeabi_dsub>
 800c382:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c386:	4606      	mov	r6, r0
 800c388:	460f      	mov	r7, r1
 800c38a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c38e:	f7f3 ff85 	bl	800029c <__adddf3>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	2000      	movs	r0, #0
 800c398:	49ba      	ldr	r1, [pc, #744]	@ (800c684 <__ieee754_pow+0x78c>)
 800c39a:	f7f4 fa5f 	bl	800085c <__aeabi_ddiv>
 800c39e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7f4 f92d 	bl	8000608 <__aeabi_dmul>
 800c3ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3b2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c3b6:	106d      	asrs	r5, r5, #1
 800c3b8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c3bc:	f04f 0b00 	mov.w	fp, #0
 800c3c0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c3c4:	4661      	mov	r1, ip
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	46e1      	mov	r9, ip
 800c3d0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	461d      	mov	r5, r3
 800c3d8:	f7f4 f916 	bl	8000608 <__aeabi_dmul>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	f7f3 ff58 	bl	8000298 <__aeabi_dsub>
 800c3e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7f3 ff50 	bl	8000298 <__aeabi_dsub>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c400:	f7f3 ff4a 	bl	8000298 <__aeabi_dsub>
 800c404:	465a      	mov	r2, fp
 800c406:	464b      	mov	r3, r9
 800c408:	f7f4 f8fe 	bl	8000608 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4630      	mov	r0, r6
 800c412:	4639      	mov	r1, r7
 800c414:	f7f3 ff40 	bl	8000298 <__aeabi_dsub>
 800c418:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c41c:	f7f4 f8f4 	bl	8000608 <__aeabi_dmul>
 800c420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c424:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c428:	4610      	mov	r0, r2
 800c42a:	4619      	mov	r1, r3
 800c42c:	f7f4 f8ec 	bl	8000608 <__aeabi_dmul>
 800c430:	a37d      	add	r3, pc, #500	@ (adr r3, 800c628 <__ieee754_pow+0x730>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	f7f4 f8e5 	bl	8000608 <__aeabi_dmul>
 800c43e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c630 <__ieee754_pow+0x738>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f7f3 ff2a 	bl	800029c <__adddf3>
 800c448:	4622      	mov	r2, r4
 800c44a:	462b      	mov	r3, r5
 800c44c:	f7f4 f8dc 	bl	8000608 <__aeabi_dmul>
 800c450:	a379      	add	r3, pc, #484	@ (adr r3, 800c638 <__ieee754_pow+0x740>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f3 ff21 	bl	800029c <__adddf3>
 800c45a:	4622      	mov	r2, r4
 800c45c:	462b      	mov	r3, r5
 800c45e:	f7f4 f8d3 	bl	8000608 <__aeabi_dmul>
 800c462:	a377      	add	r3, pc, #476	@ (adr r3, 800c640 <__ieee754_pow+0x748>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f3 ff18 	bl	800029c <__adddf3>
 800c46c:	4622      	mov	r2, r4
 800c46e:	462b      	mov	r3, r5
 800c470:	f7f4 f8ca 	bl	8000608 <__aeabi_dmul>
 800c474:	a374      	add	r3, pc, #464	@ (adr r3, 800c648 <__ieee754_pow+0x750>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f3 ff0f 	bl	800029c <__adddf3>
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	f7f4 f8c1 	bl	8000608 <__aeabi_dmul>
 800c486:	a372      	add	r3, pc, #456	@ (adr r3, 800c650 <__ieee754_pow+0x758>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f3 ff06 	bl	800029c <__adddf3>
 800c490:	4622      	mov	r2, r4
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	462b      	mov	r3, r5
 800c498:	4620      	mov	r0, r4
 800c49a:	4629      	mov	r1, r5
 800c49c:	f7f4 f8b4 	bl	8000608 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	f7f4 f8ae 	bl	8000608 <__aeabi_dmul>
 800c4ac:	465a      	mov	r2, fp
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	464b      	mov	r3, r9
 800c4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4b8:	f7f3 fef0 	bl	800029c <__adddf3>
 800c4bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4c0:	f7f4 f8a2 	bl	8000608 <__aeabi_dmul>
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	f7f3 fee8 	bl	800029c <__adddf3>
 800c4cc:	465a      	mov	r2, fp
 800c4ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4d2:	464b      	mov	r3, r9
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f896 	bl	8000608 <__aeabi_dmul>
 800c4dc:	4b6a      	ldr	r3, [pc, #424]	@ (800c688 <__ieee754_pow+0x790>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	f7f3 feda 	bl	800029c <__adddf3>
 800c4e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4ec:	f7f3 fed6 	bl	800029c <__adddf3>
 800c4f0:	46d8      	mov	r8, fp
 800c4f2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	465a      	mov	r2, fp
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	4649      	mov	r1, r9
 800c500:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c504:	f7f4 f880 	bl	8000608 <__aeabi_dmul>
 800c508:	465c      	mov	r4, fp
 800c50a:	4680      	mov	r8, r0
 800c50c:	4689      	mov	r9, r1
 800c50e:	4b5e      	ldr	r3, [pc, #376]	@ (800c688 <__ieee754_pow+0x790>)
 800c510:	2200      	movs	r2, #0
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f3 febf 	bl	8000298 <__aeabi_dsub>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f3 febb 	bl	8000298 <__aeabi_dsub>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c52a:	f7f3 feb5 	bl	8000298 <__aeabi_dsub>
 800c52e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c532:	f7f4 f869 	bl	8000608 <__aeabi_dmul>
 800c536:	4622      	mov	r2, r4
 800c538:	4606      	mov	r6, r0
 800c53a:	460f      	mov	r7, r1
 800c53c:	462b      	mov	r3, r5
 800c53e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c542:	f7f4 f861 	bl	8000608 <__aeabi_dmul>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f3 fea5 	bl	800029c <__adddf3>
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4640      	mov	r0, r8
 800c55c:	4649      	mov	r1, r9
 800c55e:	f7f3 fe9d 	bl	800029c <__adddf3>
 800c562:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c566:	a33c      	add	r3, pc, #240	@ (adr r3, 800c658 <__ieee754_pow+0x760>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	4658      	mov	r0, fp
 800c56e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c572:	460d      	mov	r5, r1
 800c574:	f7f4 f848 	bl	8000608 <__aeabi_dmul>
 800c578:	465c      	mov	r4, fp
 800c57a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c57e:	4642      	mov	r2, r8
 800c580:	464b      	mov	r3, r9
 800c582:	4620      	mov	r0, r4
 800c584:	4629      	mov	r1, r5
 800c586:	f7f3 fe87 	bl	8000298 <__aeabi_dsub>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f3 fe81 	bl	8000298 <__aeabi_dsub>
 800c596:	a332      	add	r3, pc, #200	@ (adr r3, 800c660 <__ieee754_pow+0x768>)
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	f7f4 f834 	bl	8000608 <__aeabi_dmul>
 800c5a0:	a331      	add	r3, pc, #196	@ (adr r3, 800c668 <__ieee754_pow+0x770>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	f7f4 f82b 	bl	8000608 <__aeabi_dmul>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	f7f3 fe6f 	bl	800029c <__adddf3>
 800c5be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5c0:	4b32      	ldr	r3, [pc, #200]	@ (800c68c <__ieee754_pow+0x794>)
 800c5c2:	4413      	add	r3, r2
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f7f3 fe68 	bl	800029c <__adddf3>
 800c5cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5d2:	f7f3 ffaf 	bl	8000534 <__aeabi_i2d>
 800c5d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5d8:	4b2d      	ldr	r3, [pc, #180]	@ (800c690 <__ieee754_pow+0x798>)
 800c5da:	4413      	add	r3, r2
 800c5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5e6:	460f      	mov	r7, r1
 800c5e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5ec:	f7f3 fe56 	bl	800029c <__adddf3>
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	464b      	mov	r3, r9
 800c5f4:	f7f3 fe52 	bl	800029c <__adddf3>
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	463b      	mov	r3, r7
 800c5fc:	f7f3 fe4e 	bl	800029c <__adddf3>
 800c600:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	4658      	mov	r0, fp
 800c60a:	460d      	mov	r5, r1
 800c60c:	f7f3 fe44 	bl	8000298 <__aeabi_dsub>
 800c610:	4642      	mov	r2, r8
 800c612:	464b      	mov	r3, r9
 800c614:	f7f3 fe40 	bl	8000298 <__aeabi_dsub>
 800c618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c61c:	f7f3 fe3c 	bl	8000298 <__aeabi_dsub>
 800c620:	465c      	mov	r4, fp
 800c622:	4602      	mov	r2, r0
 800c624:	e036      	b.n	800c694 <__ieee754_pow+0x79c>
 800c626:	bf00      	nop
 800c628:	4a454eef 	.word	0x4a454eef
 800c62c:	3fca7e28 	.word	0x3fca7e28
 800c630:	93c9db65 	.word	0x93c9db65
 800c634:	3fcd864a 	.word	0x3fcd864a
 800c638:	a91d4101 	.word	0xa91d4101
 800c63c:	3fd17460 	.word	0x3fd17460
 800c640:	518f264d 	.word	0x518f264d
 800c644:	3fd55555 	.word	0x3fd55555
 800c648:	db6fabff 	.word	0xdb6fabff
 800c64c:	3fdb6db6 	.word	0x3fdb6db6
 800c650:	33333303 	.word	0x33333303
 800c654:	3fe33333 	.word	0x3fe33333
 800c658:	e0000000 	.word	0xe0000000
 800c65c:	3feec709 	.word	0x3feec709
 800c660:	dc3a03fd 	.word	0xdc3a03fd
 800c664:	3feec709 	.word	0x3feec709
 800c668:	145b01f5 	.word	0x145b01f5
 800c66c:	be3e2fe0 	.word	0xbe3e2fe0
 800c670:	7ff00000 	.word	0x7ff00000
 800c674:	43400000 	.word	0x43400000
 800c678:	0003988e 	.word	0x0003988e
 800c67c:	000bb679 	.word	0x000bb679
 800c680:	0800d9f0 	.word	0x0800d9f0
 800c684:	3ff00000 	.word	0x3ff00000
 800c688:	40080000 	.word	0x40080000
 800c68c:	0800d9d0 	.word	0x0800d9d0
 800c690:	0800d9e0 	.word	0x0800d9e0
 800c694:	460b      	mov	r3, r1
 800c696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c69a:	e5d7      	b.n	800c24c <__ieee754_pow+0x354>
 800c69c:	f04f 0a01 	mov.w	sl, #1
 800c6a0:	e65e      	b.n	800c360 <__ieee754_pow+0x468>
 800c6a2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c974 <__ieee754_pow+0xa7c>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f3 fdf6 	bl	800029c <__adddf3>
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f3 fdec 	bl	8000298 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6c8:	f7f4 fa2e 	bl	8000b28 <__aeabi_dcmpgt>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f47f ae00 	bne.w	800c2d2 <__ieee754_pow+0x3da>
 800c6d2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c6d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c6da:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c6de:	fa43 fa0a 	asr.w	sl, r3, sl
 800c6e2:	44da      	add	sl, fp
 800c6e4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c6e8:	489d      	ldr	r0, [pc, #628]	@ (800c960 <__ieee754_pow+0xa68>)
 800c6ea:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c6ee:	4108      	asrs	r0, r1
 800c6f0:	ea00 030a 	and.w	r3, r0, sl
 800c6f4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c6f8:	f1c1 0114 	rsb	r1, r1, #20
 800c6fc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c700:	fa4a fa01 	asr.w	sl, sl, r1
 800c704:	f1bb 0f00 	cmp.w	fp, #0
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	f04f 0200 	mov.w	r2, #0
 800c710:	bfb8      	it	lt
 800c712:	f1ca 0a00 	rsblt	sl, sl, #0
 800c716:	f7f3 fdbf 	bl	8000298 <__aeabi_dsub>
 800c71a:	4680      	mov	r8, r0
 800c71c:	4689      	mov	r9, r1
 800c71e:	4632      	mov	r2, r6
 800c720:	463b      	mov	r3, r7
 800c722:	4640      	mov	r0, r8
 800c724:	4649      	mov	r1, r9
 800c726:	f7f3 fdb9 	bl	800029c <__adddf3>
 800c72a:	2400      	movs	r4, #0
 800c72c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c920 <__ieee754_pow+0xa28>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	4620      	mov	r0, r4
 800c734:	460d      	mov	r5, r1
 800c736:	f7f3 ff67 	bl	8000608 <__aeabi_dmul>
 800c73a:	4642      	mov	r2, r8
 800c73c:	e9cd 0100 	strd	r0, r1, [sp]
 800c740:	464b      	mov	r3, r9
 800c742:	4620      	mov	r0, r4
 800c744:	4629      	mov	r1, r5
 800c746:	f7f3 fda7 	bl	8000298 <__aeabi_dsub>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	4630      	mov	r0, r6
 800c750:	4639      	mov	r1, r7
 800c752:	f7f3 fda1 	bl	8000298 <__aeabi_dsub>
 800c756:	a374      	add	r3, pc, #464	@ (adr r3, 800c928 <__ieee754_pow+0xa30>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 ff54 	bl	8000608 <__aeabi_dmul>
 800c760:	a373      	add	r3, pc, #460	@ (adr r3, 800c930 <__ieee754_pow+0xa38>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	4680      	mov	r8, r0
 800c768:	4689      	mov	r9, r1
 800c76a:	4620      	mov	r0, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7f3 ff4b 	bl	8000608 <__aeabi_dmul>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4640      	mov	r0, r8
 800c778:	4649      	mov	r1, r9
 800c77a:	f7f3 fd8f 	bl	800029c <__adddf3>
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c78a:	f7f3 fd87 	bl	800029c <__adddf3>
 800c78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c792:	4680      	mov	r8, r0
 800c794:	4689      	mov	r9, r1
 800c796:	f7f3 fd7f 	bl	8000298 <__aeabi_dsub>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4620      	mov	r0, r4
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f3 fd79 	bl	8000298 <__aeabi_dsub>
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	460f      	mov	r7, r1
 800c7ac:	464b      	mov	r3, r9
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f3 ff29 	bl	8000608 <__aeabi_dmul>
 800c7b6:	a360      	add	r3, pc, #384	@ (adr r3, 800c938 <__ieee754_pow+0xa40>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	4604      	mov	r4, r0
 800c7be:	460d      	mov	r5, r1
 800c7c0:	f7f3 ff22 	bl	8000608 <__aeabi_dmul>
 800c7c4:	a35e      	add	r3, pc, #376	@ (adr r3, 800c940 <__ieee754_pow+0xa48>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd65 	bl	8000298 <__aeabi_dsub>
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	f7f3 ff19 	bl	8000608 <__aeabi_dmul>
 800c7d6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c948 <__ieee754_pow+0xa50>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 fd5e 	bl	800029c <__adddf3>
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	462b      	mov	r3, r5
 800c7e4:	f7f3 ff10 	bl	8000608 <__aeabi_dmul>
 800c7e8:	a359      	add	r3, pc, #356	@ (adr r3, 800c950 <__ieee754_pow+0xa58>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd53 	bl	8000298 <__aeabi_dsub>
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	f7f3 ff07 	bl	8000608 <__aeabi_dmul>
 800c7fa:	a357      	add	r3, pc, #348	@ (adr r3, 800c958 <__ieee754_pow+0xa60>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 fd4c 	bl	800029c <__adddf3>
 800c804:	4622      	mov	r2, r4
 800c806:	462b      	mov	r3, r5
 800c808:	f7f3 fefe 	bl	8000608 <__aeabi_dmul>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4640      	mov	r0, r8
 800c812:	4649      	mov	r1, r9
 800c814:	f7f3 fd40 	bl	8000298 <__aeabi_dsub>
 800c818:	4604      	mov	r4, r0
 800c81a:	460d      	mov	r5, r1
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4640      	mov	r0, r8
 800c822:	4649      	mov	r1, r9
 800c824:	f7f3 fef0 	bl	8000608 <__aeabi_dmul>
 800c828:	2200      	movs	r2, #0
 800c82a:	e9cd 0100 	strd	r0, r1, [sp]
 800c82e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f3 fd2f 	bl	8000298 <__aeabi_dsub>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c842:	f7f4 f80b 	bl	800085c <__aeabi_ddiv>
 800c846:	4632      	mov	r2, r6
 800c848:	4604      	mov	r4, r0
 800c84a:	460d      	mov	r5, r1
 800c84c:	463b      	mov	r3, r7
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fed9 	bl	8000608 <__aeabi_dmul>
 800c856:	4632      	mov	r2, r6
 800c858:	463b      	mov	r3, r7
 800c85a:	f7f3 fd1f 	bl	800029c <__adddf3>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	4620      	mov	r0, r4
 800c864:	4629      	mov	r1, r5
 800c866:	f7f3 fd17 	bl	8000298 <__aeabi_dsub>
 800c86a:	4642      	mov	r2, r8
 800c86c:	464b      	mov	r3, r9
 800c86e:	f7f3 fd13 	bl	8000298 <__aeabi_dsub>
 800c872:	460b      	mov	r3, r1
 800c874:	4602      	mov	r2, r0
 800c876:	493b      	ldr	r1, [pc, #236]	@ (800c964 <__ieee754_pow+0xa6c>)
 800c878:	2000      	movs	r0, #0
 800c87a:	f7f3 fd0d 	bl	8000298 <__aeabi_dsub>
 800c87e:	ec41 0b10 	vmov	d0, r0, r1
 800c882:	ee10 3a90 	vmov	r3, s1
 800c886:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c88a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c88e:	da30      	bge.n	800c8f2 <__ieee754_pow+0x9fa>
 800c890:	4650      	mov	r0, sl
 800c892:	f000 fa71 	bl	800cd78 <scalbn>
 800c896:	ec51 0b10 	vmov	r0, r1, d0
 800c89a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c89e:	f7ff bbd2 	b.w	800c046 <__ieee754_pow+0x14e>
 800c8a2:	4c31      	ldr	r4, [pc, #196]	@ (800c968 <__ieee754_pow+0xa70>)
 800c8a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c8a8:	42a3      	cmp	r3, r4
 800c8aa:	d91a      	bls.n	800c8e2 <__ieee754_pow+0x9ea>
 800c8ac:	4b2f      	ldr	r3, [pc, #188]	@ (800c96c <__ieee754_pow+0xa74>)
 800c8ae:	440b      	add	r3, r1
 800c8b0:	4303      	orrs	r3, r0
 800c8b2:	d009      	beq.n	800c8c8 <__ieee754_pow+0x9d0>
 800c8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f7f4 f916 	bl	8000aec <__aeabi_dcmplt>
 800c8c0:	3800      	subs	r0, #0
 800c8c2:	bf18      	it	ne
 800c8c4:	2001      	movne	r0, #1
 800c8c6:	e42b      	b.n	800c120 <__ieee754_pow+0x228>
 800c8c8:	4642      	mov	r2, r8
 800c8ca:	464b      	mov	r3, r9
 800c8cc:	f7f3 fce4 	bl	8000298 <__aeabi_dsub>
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	463b      	mov	r3, r7
 800c8d4:	f7f4 f91e 	bl	8000b14 <__aeabi_dcmpge>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d1eb      	bne.n	800c8b4 <__ieee754_pow+0x9bc>
 800c8dc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c97c <__ieee754_pow+0xa84>
 800c8e0:	e6f7      	b.n	800c6d2 <__ieee754_pow+0x7da>
 800c8e2:	469a      	mov	sl, r3
 800c8e4:	4b22      	ldr	r3, [pc, #136]	@ (800c970 <__ieee754_pow+0xa78>)
 800c8e6:	459a      	cmp	sl, r3
 800c8e8:	f63f aef3 	bhi.w	800c6d2 <__ieee754_pow+0x7da>
 800c8ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c8f0:	e715      	b.n	800c71e <__ieee754_pow+0x826>
 800c8f2:	ec51 0b10 	vmov	r0, r1, d0
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	e7cf      	b.n	800c89a <__ieee754_pow+0x9a2>
 800c8fa:	491a      	ldr	r1, [pc, #104]	@ (800c964 <__ieee754_pow+0xa6c>)
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	f7ff bb18 	b.w	800bf32 <__ieee754_pow+0x3a>
 800c902:	2000      	movs	r0, #0
 800c904:	2100      	movs	r1, #0
 800c906:	f7ff bb14 	b.w	800bf32 <__ieee754_pow+0x3a>
 800c90a:	4630      	mov	r0, r6
 800c90c:	4639      	mov	r1, r7
 800c90e:	f7ff bb10 	b.w	800bf32 <__ieee754_pow+0x3a>
 800c912:	460c      	mov	r4, r1
 800c914:	f7ff bb5e 	b.w	800bfd4 <__ieee754_pow+0xdc>
 800c918:	2400      	movs	r4, #0
 800c91a:	f7ff bb49 	b.w	800bfb0 <__ieee754_pow+0xb8>
 800c91e:	bf00      	nop
 800c920:	00000000 	.word	0x00000000
 800c924:	3fe62e43 	.word	0x3fe62e43
 800c928:	fefa39ef 	.word	0xfefa39ef
 800c92c:	3fe62e42 	.word	0x3fe62e42
 800c930:	0ca86c39 	.word	0x0ca86c39
 800c934:	be205c61 	.word	0xbe205c61
 800c938:	72bea4d0 	.word	0x72bea4d0
 800c93c:	3e663769 	.word	0x3e663769
 800c940:	c5d26bf1 	.word	0xc5d26bf1
 800c944:	3ebbbd41 	.word	0x3ebbbd41
 800c948:	af25de2c 	.word	0xaf25de2c
 800c94c:	3f11566a 	.word	0x3f11566a
 800c950:	16bebd93 	.word	0x16bebd93
 800c954:	3f66c16c 	.word	0x3f66c16c
 800c958:	5555553e 	.word	0x5555553e
 800c95c:	3fc55555 	.word	0x3fc55555
 800c960:	fff00000 	.word	0xfff00000
 800c964:	3ff00000 	.word	0x3ff00000
 800c968:	4090cbff 	.word	0x4090cbff
 800c96c:	3f6f3400 	.word	0x3f6f3400
 800c970:	3fe00000 	.word	0x3fe00000
 800c974:	652b82fe 	.word	0x652b82fe
 800c978:	3c971547 	.word	0x3c971547
 800c97c:	4090cc00 	.word	0x4090cc00

0800c980 <__ieee754_rem_pio2>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	ec57 6b10 	vmov	r6, r7, d0
 800c988:	4bc5      	ldr	r3, [pc, #788]	@ (800cca0 <__ieee754_rem_pio2+0x320>)
 800c98a:	b08d      	sub	sp, #52	@ 0x34
 800c98c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c990:	4598      	cmp	r8, r3
 800c992:	4604      	mov	r4, r0
 800c994:	9704      	str	r7, [sp, #16]
 800c996:	d807      	bhi.n	800c9a8 <__ieee754_rem_pio2+0x28>
 800c998:	2200      	movs	r2, #0
 800c99a:	2300      	movs	r3, #0
 800c99c:	ed80 0b00 	vstr	d0, [r0]
 800c9a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	e028      	b.n	800c9fa <__ieee754_rem_pio2+0x7a>
 800c9a8:	4bbe      	ldr	r3, [pc, #760]	@ (800cca4 <__ieee754_rem_pio2+0x324>)
 800c9aa:	4598      	cmp	r8, r3
 800c9ac:	d878      	bhi.n	800caa0 <__ieee754_rem_pio2+0x120>
 800c9ae:	9b04      	ldr	r3, [sp, #16]
 800c9b0:	4dbd      	ldr	r5, [pc, #756]	@ (800cca8 <__ieee754_rem_pio2+0x328>)
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cc68 <__ieee754_rem_pio2+0x2e8>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	4639      	mov	r1, r7
 800c9be:	dd38      	ble.n	800ca32 <__ieee754_rem_pio2+0xb2>
 800c9c0:	f7f3 fc6a 	bl	8000298 <__aeabi_dsub>
 800c9c4:	45a8      	cmp	r8, r5
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	460f      	mov	r7, r1
 800c9ca:	d01a      	beq.n	800ca02 <__ieee754_rem_pio2+0x82>
 800c9cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x2f0>)
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	f7f3 fc61 	bl	8000298 <__aeabi_dsub>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4680      	mov	r8, r0
 800c9dc:	4689      	mov	r9, r1
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc59 	bl	8000298 <__aeabi_dsub>
 800c9e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x2f0>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fc54 	bl	8000298 <__aeabi_dsub>
 800c9f0:	e9c4 8900 	strd	r8, r9, [r4]
 800c9f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9f8:	2501      	movs	r5, #1
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	b00d      	add	sp, #52	@ 0x34
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	a39d      	add	r3, pc, #628	@ (adr r3, 800cc78 <__ieee754_rem_pio2+0x2f8>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f3 fc46 	bl	8000298 <__aeabi_dsub>
 800ca0c:	a39c      	add	r3, pc, #624	@ (adr r3, 800cc80 <__ieee754_rem_pio2+0x300>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	4606      	mov	r6, r0
 800ca14:	460f      	mov	r7, r1
 800ca16:	f7f3 fc3f 	bl	8000298 <__aeabi_dsub>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4680      	mov	r8, r0
 800ca20:	4689      	mov	r9, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fc37 	bl	8000298 <__aeabi_dsub>
 800ca2a:	a395      	add	r3, pc, #596	@ (adr r3, 800cc80 <__ieee754_rem_pio2+0x300>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	e7dc      	b.n	800c9ec <__ieee754_rem_pio2+0x6c>
 800ca32:	f7f3 fc33 	bl	800029c <__adddf3>
 800ca36:	45a8      	cmp	r8, r5
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	d018      	beq.n	800ca70 <__ieee754_rem_pio2+0xf0>
 800ca3e:	a38c      	add	r3, pc, #560	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x2f0>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc2a 	bl	800029c <__adddf3>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	4689      	mov	r9, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f3 fc20 	bl	8000298 <__aeabi_dsub>
 800ca58:	a385      	add	r3, pc, #532	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x2f0>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	f7f3 fc1d 	bl	800029c <__adddf3>
 800ca62:	f04f 35ff 	mov.w	r5, #4294967295
 800ca66:	e9c4 8900 	strd	r8, r9, [r4]
 800ca6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca6e:	e7c4      	b.n	800c9fa <__ieee754_rem_pio2+0x7a>
 800ca70:	a381      	add	r3, pc, #516	@ (adr r3, 800cc78 <__ieee754_rem_pio2+0x2f8>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	f7f3 fc11 	bl	800029c <__adddf3>
 800ca7a:	a381      	add	r3, pc, #516	@ (adr r3, 800cc80 <__ieee754_rem_pio2+0x300>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	4606      	mov	r6, r0
 800ca82:	460f      	mov	r7, r1
 800ca84:	f7f3 fc0a 	bl	800029c <__adddf3>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	4680      	mov	r8, r0
 800ca8e:	4689      	mov	r9, r1
 800ca90:	4630      	mov	r0, r6
 800ca92:	4639      	mov	r1, r7
 800ca94:	f7f3 fc00 	bl	8000298 <__aeabi_dsub>
 800ca98:	a379      	add	r3, pc, #484	@ (adr r3, 800cc80 <__ieee754_rem_pio2+0x300>)
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	e7de      	b.n	800ca5e <__ieee754_rem_pio2+0xde>
 800caa0:	4b82      	ldr	r3, [pc, #520]	@ (800ccac <__ieee754_rem_pio2+0x32c>)
 800caa2:	4598      	cmp	r8, r3
 800caa4:	f200 80d1 	bhi.w	800cc4a <__ieee754_rem_pio2+0x2ca>
 800caa8:	f7fe faf6 	bl	800b098 <fabs>
 800caac:	ec57 6b10 	vmov	r6, r7, d0
 800cab0:	a375      	add	r3, pc, #468	@ (adr r3, 800cc88 <__ieee754_rem_pio2+0x308>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	4630      	mov	r0, r6
 800cab8:	4639      	mov	r1, r7
 800caba:	f7f3 fda5 	bl	8000608 <__aeabi_dmul>
 800cabe:	4b7c      	ldr	r3, [pc, #496]	@ (800ccb0 <__ieee754_rem_pio2+0x330>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	f7f3 fbeb 	bl	800029c <__adddf3>
 800cac6:	f7f4 f84f 	bl	8000b68 <__aeabi_d2iz>
 800caca:	4605      	mov	r5, r0
 800cacc:	f7f3 fd32 	bl	8000534 <__aeabi_i2d>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cad8:	a363      	add	r3, pc, #396	@ (adr r3, 800cc68 <__ieee754_rem_pio2+0x2e8>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f7f3 fd93 	bl	8000608 <__aeabi_dmul>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4630      	mov	r0, r6
 800cae8:	4639      	mov	r1, r7
 800caea:	f7f3 fbd5 	bl	8000298 <__aeabi_dsub>
 800caee:	a360      	add	r3, pc, #384	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x2f0>)
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	4682      	mov	sl, r0
 800caf6:	468b      	mov	fp, r1
 800caf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafc:	f7f3 fd84 	bl	8000608 <__aeabi_dmul>
 800cb00:	2d1f      	cmp	r5, #31
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	dc0c      	bgt.n	800cb22 <__ieee754_rem_pio2+0x1a2>
 800cb08:	4b6a      	ldr	r3, [pc, #424]	@ (800ccb4 <__ieee754_rem_pio2+0x334>)
 800cb0a:	1e6a      	subs	r2, r5, #1
 800cb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb10:	4543      	cmp	r3, r8
 800cb12:	d006      	beq.n	800cb22 <__ieee754_rem_pio2+0x1a2>
 800cb14:	4632      	mov	r2, r6
 800cb16:	463b      	mov	r3, r7
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4659      	mov	r1, fp
 800cb1c:	f7f3 fbbc 	bl	8000298 <__aeabi_dsub>
 800cb20:	e00e      	b.n	800cb40 <__ieee754_rem_pio2+0x1c0>
 800cb22:	463b      	mov	r3, r7
 800cb24:	4632      	mov	r2, r6
 800cb26:	4650      	mov	r0, sl
 800cb28:	4659      	mov	r1, fp
 800cb2a:	f7f3 fbb5 	bl	8000298 <__aeabi_dsub>
 800cb2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb32:	9305      	str	r3, [sp, #20]
 800cb34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cb3c:	2b10      	cmp	r3, #16
 800cb3e:	dc02      	bgt.n	800cb46 <__ieee754_rem_pio2+0x1c6>
 800cb40:	e9c4 0100 	strd	r0, r1, [r4]
 800cb44:	e039      	b.n	800cbba <__ieee754_rem_pio2+0x23a>
 800cb46:	a34c      	add	r3, pc, #304	@ (adr r3, 800cc78 <__ieee754_rem_pio2+0x2f8>)
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb50:	f7f3 fd5a 	bl	8000608 <__aeabi_dmul>
 800cb54:	4606      	mov	r6, r0
 800cb56:	460f      	mov	r7, r1
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	4659      	mov	r1, fp
 800cb60:	f7f3 fb9a 	bl	8000298 <__aeabi_dsub>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4680      	mov	r8, r0
 800cb6a:	4689      	mov	r9, r1
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	4659      	mov	r1, fp
 800cb70:	f7f3 fb92 	bl	8000298 <__aeabi_dsub>
 800cb74:	4632      	mov	r2, r6
 800cb76:	463b      	mov	r3, r7
 800cb78:	f7f3 fb8e 	bl	8000298 <__aeabi_dsub>
 800cb7c:	a340      	add	r3, pc, #256	@ (adr r3, 800cc80 <__ieee754_rem_pio2+0x300>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb8a:	f7f3 fd3d 	bl	8000608 <__aeabi_dmul>
 800cb8e:	4632      	mov	r2, r6
 800cb90:	463b      	mov	r3, r7
 800cb92:	f7f3 fb81 	bl	8000298 <__aeabi_dsub>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	4640      	mov	r0, r8
 800cba0:	4649      	mov	r1, r9
 800cba2:	f7f3 fb79 	bl	8000298 <__aeabi_dsub>
 800cba6:	9a05      	ldr	r2, [sp, #20]
 800cba8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	2b31      	cmp	r3, #49	@ 0x31
 800cbb0:	dc20      	bgt.n	800cbf4 <__ieee754_rem_pio2+0x274>
 800cbb2:	e9c4 0100 	strd	r0, r1, [r4]
 800cbb6:	46c2      	mov	sl, r8
 800cbb8:	46cb      	mov	fp, r9
 800cbba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cbbe:	4650      	mov	r0, sl
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	464b      	mov	r3, r9
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	f7f3 fb67 	bl	8000298 <__aeabi_dsub>
 800cbca:	463b      	mov	r3, r7
 800cbcc:	4632      	mov	r2, r6
 800cbce:	f7f3 fb63 	bl	8000298 <__aeabi_dsub>
 800cbd2:	9b04      	ldr	r3, [sp, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbda:	f6bf af0e 	bge.w	800c9fa <__ieee754_rem_pio2+0x7a>
 800cbde:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbe8:	f8c4 8000 	str.w	r8, [r4]
 800cbec:	60a0      	str	r0, [r4, #8]
 800cbee:	60e3      	str	r3, [r4, #12]
 800cbf0:	426d      	negs	r5, r5
 800cbf2:	e702      	b.n	800c9fa <__ieee754_rem_pio2+0x7a>
 800cbf4:	a326      	add	r3, pc, #152	@ (adr r3, 800cc90 <__ieee754_rem_pio2+0x310>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbfe:	f7f3 fd03 	bl	8000608 <__aeabi_dmul>
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	f7f3 fb43 	bl	8000298 <__aeabi_dsub>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4682      	mov	sl, r0
 800cc18:	468b      	mov	fp, r1
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	f7f3 fb3b 	bl	8000298 <__aeabi_dsub>
 800cc22:	4632      	mov	r2, r6
 800cc24:	463b      	mov	r3, r7
 800cc26:	f7f3 fb37 	bl	8000298 <__aeabi_dsub>
 800cc2a:	a31b      	add	r3, pc, #108	@ (adr r3, 800cc98 <__ieee754_rem_pio2+0x318>)
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	4606      	mov	r6, r0
 800cc32:	460f      	mov	r7, r1
 800cc34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc38:	f7f3 fce6 	bl	8000608 <__aeabi_dmul>
 800cc3c:	4632      	mov	r2, r6
 800cc3e:	463b      	mov	r3, r7
 800cc40:	f7f3 fb2a 	bl	8000298 <__aeabi_dsub>
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	e764      	b.n	800cb14 <__ieee754_rem_pio2+0x194>
 800cc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800ccb8 <__ieee754_rem_pio2+0x338>)
 800cc4c:	4598      	cmp	r8, r3
 800cc4e:	d935      	bls.n	800ccbc <__ieee754_rem_pio2+0x33c>
 800cc50:	4632      	mov	r2, r6
 800cc52:	463b      	mov	r3, r7
 800cc54:	4630      	mov	r0, r6
 800cc56:	4639      	mov	r1, r7
 800cc58:	f7f3 fb1e 	bl	8000298 <__aeabi_dsub>
 800cc5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cc60:	e9c4 0100 	strd	r0, r1, [r4]
 800cc64:	e69e      	b.n	800c9a4 <__ieee754_rem_pio2+0x24>
 800cc66:	bf00      	nop
 800cc68:	54400000 	.word	0x54400000
 800cc6c:	3ff921fb 	.word	0x3ff921fb
 800cc70:	1a626331 	.word	0x1a626331
 800cc74:	3dd0b461 	.word	0x3dd0b461
 800cc78:	1a600000 	.word	0x1a600000
 800cc7c:	3dd0b461 	.word	0x3dd0b461
 800cc80:	2e037073 	.word	0x2e037073
 800cc84:	3ba3198a 	.word	0x3ba3198a
 800cc88:	6dc9c883 	.word	0x6dc9c883
 800cc8c:	3fe45f30 	.word	0x3fe45f30
 800cc90:	2e000000 	.word	0x2e000000
 800cc94:	3ba3198a 	.word	0x3ba3198a
 800cc98:	252049c1 	.word	0x252049c1
 800cc9c:	397b839a 	.word	0x397b839a
 800cca0:	3fe921fb 	.word	0x3fe921fb
 800cca4:	4002d97b 	.word	0x4002d97b
 800cca8:	3ff921fb 	.word	0x3ff921fb
 800ccac:	413921fb 	.word	0x413921fb
 800ccb0:	3fe00000 	.word	0x3fe00000
 800ccb4:	0800da00 	.word	0x0800da00
 800ccb8:	7fefffff 	.word	0x7fefffff
 800ccbc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ccc0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ccc4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ccc8:	4630      	mov	r0, r6
 800ccca:	460f      	mov	r7, r1
 800cccc:	f7f3 ff4c 	bl	8000b68 <__aeabi_d2iz>
 800ccd0:	f7f3 fc30 	bl	8000534 <__aeabi_i2d>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4630      	mov	r0, r6
 800ccda:	4639      	mov	r1, r7
 800ccdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cce0:	f7f3 fada 	bl	8000298 <__aeabi_dsub>
 800cce4:	4b22      	ldr	r3, [pc, #136]	@ (800cd70 <__ieee754_rem_pio2+0x3f0>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	f7f3 fc8e 	bl	8000608 <__aeabi_dmul>
 800ccec:	460f      	mov	r7, r1
 800ccee:	4606      	mov	r6, r0
 800ccf0:	f7f3 ff3a 	bl	8000b68 <__aeabi_d2iz>
 800ccf4:	f7f3 fc1e 	bl	8000534 <__aeabi_i2d>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd04:	f7f3 fac8 	bl	8000298 <__aeabi_dsub>
 800cd08:	4b19      	ldr	r3, [pc, #100]	@ (800cd70 <__ieee754_rem_pio2+0x3f0>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f7f3 fc7c 	bl	8000608 <__aeabi_dmul>
 800cd10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cd14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cd18:	f04f 0803 	mov.w	r8, #3
 800cd1c:	2600      	movs	r6, #0
 800cd1e:	2700      	movs	r7, #0
 800cd20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cd24:	4632      	mov	r2, r6
 800cd26:	463b      	mov	r3, r7
 800cd28:	46c2      	mov	sl, r8
 800cd2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd2e:	f7f3 fed3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d1f4      	bne.n	800cd20 <__ieee754_rem_pio2+0x3a0>
 800cd36:	4b0f      	ldr	r3, [pc, #60]	@ (800cd74 <__ieee754_rem_pio2+0x3f4>)
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	2302      	movs	r3, #2
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	462a      	mov	r2, r5
 800cd40:	4653      	mov	r3, sl
 800cd42:	4621      	mov	r1, r4
 800cd44:	a806      	add	r0, sp, #24
 800cd46:	f000 f8d3 	bl	800cef0 <__kernel_rem_pio2>
 800cd4a:	9b04      	ldr	r3, [sp, #16]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	4605      	mov	r5, r0
 800cd50:	f6bf ae53 	bge.w	800c9fa <__ieee754_rem_pio2+0x7a>
 800cd54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cd58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd5c:	e9c4 2300 	strd	r2, r3, [r4]
 800cd60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cd64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cd6c:	e740      	b.n	800cbf0 <__ieee754_rem_pio2+0x270>
 800cd6e:	bf00      	nop
 800cd70:	41700000 	.word	0x41700000
 800cd74:	0800da80 	.word	0x0800da80

0800cd78 <scalbn>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	ec55 4b10 	vmov	r4, r5, d0
 800cd7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cd82:	4606      	mov	r6, r0
 800cd84:	462b      	mov	r3, r5
 800cd86:	b991      	cbnz	r1, 800cdae <scalbn+0x36>
 800cd88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cd8c:	4323      	orrs	r3, r4
 800cd8e:	d03d      	beq.n	800ce0c <scalbn+0x94>
 800cd90:	4b35      	ldr	r3, [pc, #212]	@ (800ce68 <scalbn+0xf0>)
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	2200      	movs	r2, #0
 800cd98:	f7f3 fc36 	bl	8000608 <__aeabi_dmul>
 800cd9c:	4b33      	ldr	r3, [pc, #204]	@ (800ce6c <scalbn+0xf4>)
 800cd9e:	429e      	cmp	r6, r3
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	da0f      	bge.n	800cdc6 <scalbn+0x4e>
 800cda6:	a328      	add	r3, pc, #160	@ (adr r3, 800ce48 <scalbn+0xd0>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	e01e      	b.n	800cdec <scalbn+0x74>
 800cdae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cdb2:	4291      	cmp	r1, r2
 800cdb4:	d10b      	bne.n	800cdce <scalbn+0x56>
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa6e 	bl	800029c <__adddf3>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	e022      	b.n	800ce0c <scalbn+0x94>
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cdcc:	3936      	subs	r1, #54	@ 0x36
 800cdce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cdd2:	4296      	cmp	r6, r2
 800cdd4:	dd0d      	ble.n	800cdf2 <scalbn+0x7a>
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ce50 <scalbn+0xd8>)
 800cdda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdde:	da02      	bge.n	800cde6 <scalbn+0x6e>
 800cde0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ce58 <scalbn+0xe0>)
 800cde2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde6:	a31a      	add	r3, pc, #104	@ (adr r3, 800ce50 <scalbn+0xd8>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	f7f3 fc0c 	bl	8000608 <__aeabi_dmul>
 800cdf0:	e7e6      	b.n	800cdc0 <scalbn+0x48>
 800cdf2:	1872      	adds	r2, r6, r1
 800cdf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cdf8:	428a      	cmp	r2, r1
 800cdfa:	dcec      	bgt.n	800cdd6 <scalbn+0x5e>
 800cdfc:	2a00      	cmp	r2, #0
 800cdfe:	dd08      	ble.n	800ce12 <scalbn+0x9a>
 800ce00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ce08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce0c:	ec45 4b10 	vmov	d0, r4, r5
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ce16:	da08      	bge.n	800ce2a <scalbn+0xb2>
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ce48 <scalbn+0xd0>)
 800ce1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce20:	dac1      	bge.n	800cda6 <scalbn+0x2e>
 800ce22:	a10f      	add	r1, pc, #60	@ (adr r1, 800ce60 <scalbn+0xe8>)
 800ce24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce28:	e7bd      	b.n	800cda6 <scalbn+0x2e>
 800ce2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce2e:	3236      	adds	r2, #54	@ 0x36
 800ce30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ce34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce38:	4620      	mov	r0, r4
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce70 <scalbn+0xf8>)
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	2200      	movs	r2, #0
 800ce40:	e7d4      	b.n	800cdec <scalbn+0x74>
 800ce42:	bf00      	nop
 800ce44:	f3af 8000 	nop.w
 800ce48:	c2f8f359 	.word	0xc2f8f359
 800ce4c:	01a56e1f 	.word	0x01a56e1f
 800ce50:	8800759c 	.word	0x8800759c
 800ce54:	7e37e43c 	.word	0x7e37e43c
 800ce58:	8800759c 	.word	0x8800759c
 800ce5c:	fe37e43c 	.word	0xfe37e43c
 800ce60:	c2f8f359 	.word	0xc2f8f359
 800ce64:	81a56e1f 	.word	0x81a56e1f
 800ce68:	43500000 	.word	0x43500000
 800ce6c:	ffff3cb0 	.word	0xffff3cb0
 800ce70:	3c900000 	.word	0x3c900000

0800ce74 <with_errno>:
 800ce74:	b510      	push	{r4, lr}
 800ce76:	ed2d 8b02 	vpush	{d8}
 800ce7a:	eeb0 8a40 	vmov.f32	s16, s0
 800ce7e:	eef0 8a60 	vmov.f32	s17, s1
 800ce82:	4604      	mov	r4, r0
 800ce84:	f7fd fb38 	bl	800a4f8 <__errno>
 800ce88:	eeb0 0a48 	vmov.f32	s0, s16
 800ce8c:	eef0 0a68 	vmov.f32	s1, s17
 800ce90:	ecbd 8b02 	vpop	{d8}
 800ce94:	6004      	str	r4, [r0, #0]
 800ce96:	bd10      	pop	{r4, pc}

0800ce98 <xflow>:
 800ce98:	4603      	mov	r3, r0
 800ce9a:	b507      	push	{r0, r1, r2, lr}
 800ce9c:	ec51 0b10 	vmov	r0, r1, d0
 800cea0:	b183      	cbz	r3, 800cec4 <xflow+0x2c>
 800cea2:	4602      	mov	r2, r0
 800cea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cea8:	e9cd 2300 	strd	r2, r3, [sp]
 800ceac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb0:	f7f3 fbaa 	bl	8000608 <__aeabi_dmul>
 800ceb4:	ec41 0b10 	vmov	d0, r0, r1
 800ceb8:	2022      	movs	r0, #34	@ 0x22
 800ceba:	b003      	add	sp, #12
 800cebc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec0:	f7ff bfd8 	b.w	800ce74 <with_errno>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	e7ee      	b.n	800cea8 <xflow+0x10>
 800ceca:	0000      	movs	r0, r0
 800cecc:	0000      	movs	r0, r0
	...

0800ced0 <__math_uflow>:
 800ced0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ced8 <__math_uflow+0x8>
 800ced4:	f7ff bfe0 	b.w	800ce98 <xflow>
 800ced8:	00000000 	.word	0x00000000
 800cedc:	10000000 	.word	0x10000000

0800cee0 <__math_oflow>:
 800cee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cee8 <__math_oflow+0x8>
 800cee4:	f7ff bfd8 	b.w	800ce98 <xflow>
 800cee8:	00000000 	.word	0x00000000
 800ceec:	70000000 	.word	0x70000000

0800cef0 <__kernel_rem_pio2>:
 800cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	ed2d 8b02 	vpush	{d8}
 800cef8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cefc:	f112 0f14 	cmn.w	r2, #20
 800cf00:	9306      	str	r3, [sp, #24]
 800cf02:	9104      	str	r1, [sp, #16]
 800cf04:	4bbe      	ldr	r3, [pc, #760]	@ (800d200 <__kernel_rem_pio2+0x310>)
 800cf06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cf08:	9008      	str	r0, [sp, #32]
 800cf0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf16:	bfa8      	it	ge
 800cf18:	1ed4      	subge	r4, r2, #3
 800cf1a:	9305      	str	r3, [sp, #20]
 800cf1c:	bfb2      	itee	lt
 800cf1e:	2400      	movlt	r4, #0
 800cf20:	2318      	movge	r3, #24
 800cf22:	fb94 f4f3 	sdivge	r4, r4, r3
 800cf26:	f06f 0317 	mvn.w	r3, #23
 800cf2a:	fb04 3303 	mla	r3, r4, r3, r3
 800cf2e:	eb03 0b02 	add.w	fp, r3, r2
 800cf32:	9b00      	ldr	r3, [sp, #0]
 800cf34:	9a05      	ldr	r2, [sp, #20]
 800cf36:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800d1f0 <__kernel_rem_pio2+0x300>
 800cf3a:	eb03 0802 	add.w	r8, r3, r2
 800cf3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cf40:	1aa7      	subs	r7, r4, r2
 800cf42:	ae20      	add	r6, sp, #128	@ 0x80
 800cf44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cf48:	2500      	movs	r5, #0
 800cf4a:	4545      	cmp	r5, r8
 800cf4c:	dd13      	ble.n	800cf76 <__kernel_rem_pio2+0x86>
 800cf4e:	9b06      	ldr	r3, [sp, #24]
 800cf50:	aa20      	add	r2, sp, #128	@ 0x80
 800cf52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cf56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cf5a:	f04f 0800 	mov.w	r8, #0
 800cf5e:	9b00      	ldr	r3, [sp, #0]
 800cf60:	4598      	cmp	r8, r3
 800cf62:	dc31      	bgt.n	800cfc8 <__kernel_rem_pio2+0xd8>
 800cf64:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800d1f0 <__kernel_rem_pio2+0x300>
 800cf68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf70:	462f      	mov	r7, r5
 800cf72:	2600      	movs	r6, #0
 800cf74:	e01b      	b.n	800cfae <__kernel_rem_pio2+0xbe>
 800cf76:	42ef      	cmn	r7, r5
 800cf78:	d407      	bmi.n	800cf8a <__kernel_rem_pio2+0x9a>
 800cf7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cf7e:	f7f3 fad9 	bl	8000534 <__aeabi_i2d>
 800cf82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cf86:	3501      	adds	r5, #1
 800cf88:	e7df      	b.n	800cf4a <__kernel_rem_pio2+0x5a>
 800cf8a:	ec51 0b18 	vmov	r0, r1, d8
 800cf8e:	e7f8      	b.n	800cf82 <__kernel_rem_pio2+0x92>
 800cf90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cf98:	f7f3 fb36 	bl	8000608 <__aeabi_dmul>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa4:	f7f3 f97a 	bl	800029c <__adddf3>
 800cfa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfac:	3601      	adds	r6, #1
 800cfae:	9b05      	ldr	r3, [sp, #20]
 800cfb0:	429e      	cmp	r6, r3
 800cfb2:	f1a7 0708 	sub.w	r7, r7, #8
 800cfb6:	ddeb      	ble.n	800cf90 <__kernel_rem_pio2+0xa0>
 800cfb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfbc:	f108 0801 	add.w	r8, r8, #1
 800cfc0:	ecaa 7b02 	vstmia	sl!, {d7}
 800cfc4:	3508      	adds	r5, #8
 800cfc6:	e7ca      	b.n	800cf5e <__kernel_rem_pio2+0x6e>
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	f8dd 8000 	ldr.w	r8, [sp]
 800cfce:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cfd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cfe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfe4:	ab98      	add	r3, sp, #608	@ 0x260
 800cfe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cfea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cfee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cff2:	ac0c      	add	r4, sp, #48	@ 0x30
 800cff4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cff6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cffa:	46a1      	mov	r9, r4
 800cffc:	46c2      	mov	sl, r8
 800cffe:	f1ba 0f00 	cmp.w	sl, #0
 800d002:	f1a5 0508 	sub.w	r5, r5, #8
 800d006:	dc77      	bgt.n	800d0f8 <__kernel_rem_pio2+0x208>
 800d008:	4658      	mov	r0, fp
 800d00a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d00e:	f7ff feb3 	bl	800cd78 <scalbn>
 800d012:	ec57 6b10 	vmov	r6, r7, d0
 800d016:	2200      	movs	r2, #0
 800d018:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d01c:	4630      	mov	r0, r6
 800d01e:	4639      	mov	r1, r7
 800d020:	f7f3 faf2 	bl	8000608 <__aeabi_dmul>
 800d024:	ec41 0b10 	vmov	d0, r0, r1
 800d028:	f000 faba 	bl	800d5a0 <floor>
 800d02c:	4b75      	ldr	r3, [pc, #468]	@ (800d204 <__kernel_rem_pio2+0x314>)
 800d02e:	ec51 0b10 	vmov	r0, r1, d0
 800d032:	2200      	movs	r2, #0
 800d034:	f7f3 fae8 	bl	8000608 <__aeabi_dmul>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4630      	mov	r0, r6
 800d03e:	4639      	mov	r1, r7
 800d040:	f7f3 f92a 	bl	8000298 <__aeabi_dsub>
 800d044:	460f      	mov	r7, r1
 800d046:	4606      	mov	r6, r0
 800d048:	f7f3 fd8e 	bl	8000b68 <__aeabi_d2iz>
 800d04c:	9002      	str	r0, [sp, #8]
 800d04e:	f7f3 fa71 	bl	8000534 <__aeabi_i2d>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	4630      	mov	r0, r6
 800d058:	4639      	mov	r1, r7
 800d05a:	f7f3 f91d 	bl	8000298 <__aeabi_dsub>
 800d05e:	f1bb 0f00 	cmp.w	fp, #0
 800d062:	4606      	mov	r6, r0
 800d064:	460f      	mov	r7, r1
 800d066:	dd6c      	ble.n	800d142 <__kernel_rem_pio2+0x252>
 800d068:	f108 31ff 	add.w	r1, r8, #4294967295
 800d06c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d06e:	9d02      	ldr	r5, [sp, #8]
 800d070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d074:	f1cb 0018 	rsb	r0, fp, #24
 800d078:	fa43 f200 	asr.w	r2, r3, r0
 800d07c:	4415      	add	r5, r2
 800d07e:	4082      	lsls	r2, r0
 800d080:	1a9b      	subs	r3, r3, r2
 800d082:	aa0c      	add	r2, sp, #48	@ 0x30
 800d084:	9502      	str	r5, [sp, #8]
 800d086:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d08a:	f1cb 0217 	rsb	r2, fp, #23
 800d08e:	fa43 f902 	asr.w	r9, r3, r2
 800d092:	f1b9 0f00 	cmp.w	r9, #0
 800d096:	dd64      	ble.n	800d162 <__kernel_rem_pio2+0x272>
 800d098:	9b02      	ldr	r3, [sp, #8]
 800d09a:	2200      	movs	r2, #0
 800d09c:	3301      	adds	r3, #1
 800d09e:	9302      	str	r3, [sp, #8]
 800d0a0:	4615      	mov	r5, r2
 800d0a2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d0a6:	4590      	cmp	r8, r2
 800d0a8:	f300 80b8 	bgt.w	800d21c <__kernel_rem_pio2+0x32c>
 800d0ac:	f1bb 0f00 	cmp.w	fp, #0
 800d0b0:	dd07      	ble.n	800d0c2 <__kernel_rem_pio2+0x1d2>
 800d0b2:	f1bb 0f01 	cmp.w	fp, #1
 800d0b6:	f000 80bf 	beq.w	800d238 <__kernel_rem_pio2+0x348>
 800d0ba:	f1bb 0f02 	cmp.w	fp, #2
 800d0be:	f000 80c6 	beq.w	800d24e <__kernel_rem_pio2+0x35e>
 800d0c2:	f1b9 0f02 	cmp.w	r9, #2
 800d0c6:	d14c      	bne.n	800d162 <__kernel_rem_pio2+0x272>
 800d0c8:	4632      	mov	r2, r6
 800d0ca:	463b      	mov	r3, r7
 800d0cc:	494e      	ldr	r1, [pc, #312]	@ (800d208 <__kernel_rem_pio2+0x318>)
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7f3 f8e2 	bl	8000298 <__aeabi_dsub>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	460f      	mov	r7, r1
 800d0d8:	2d00      	cmp	r5, #0
 800d0da:	d042      	beq.n	800d162 <__kernel_rem_pio2+0x272>
 800d0dc:	4658      	mov	r0, fp
 800d0de:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800d1f8 <__kernel_rem_pio2+0x308>
 800d0e2:	f7ff fe49 	bl	800cd78 <scalbn>
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	ec53 2b10 	vmov	r2, r3, d0
 800d0ee:	f7f3 f8d3 	bl	8000298 <__aeabi_dsub>
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	e034      	b.n	800d162 <__kernel_rem_pio2+0x272>
 800d0f8:	4b44      	ldr	r3, [pc, #272]	@ (800d20c <__kernel_rem_pio2+0x31c>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d100:	f7f3 fa82 	bl	8000608 <__aeabi_dmul>
 800d104:	f7f3 fd30 	bl	8000b68 <__aeabi_d2iz>
 800d108:	f7f3 fa14 	bl	8000534 <__aeabi_i2d>
 800d10c:	4b40      	ldr	r3, [pc, #256]	@ (800d210 <__kernel_rem_pio2+0x320>)
 800d10e:	2200      	movs	r2, #0
 800d110:	4606      	mov	r6, r0
 800d112:	460f      	mov	r7, r1
 800d114:	f7f3 fa78 	bl	8000608 <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d120:	f7f3 f8ba 	bl	8000298 <__aeabi_dsub>
 800d124:	f7f3 fd20 	bl	8000b68 <__aeabi_d2iz>
 800d128:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d12c:	f849 0b04 	str.w	r0, [r9], #4
 800d130:	4639      	mov	r1, r7
 800d132:	4630      	mov	r0, r6
 800d134:	f7f3 f8b2 	bl	800029c <__adddf3>
 800d138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d140:	e75d      	b.n	800cffe <__kernel_rem_pio2+0x10e>
 800d142:	d107      	bne.n	800d154 <__kernel_rem_pio2+0x264>
 800d144:	f108 33ff 	add.w	r3, r8, #4294967295
 800d148:	aa0c      	add	r2, sp, #48	@ 0x30
 800d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d14e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d152:	e79e      	b.n	800d092 <__kernel_rem_pio2+0x1a2>
 800d154:	4b2f      	ldr	r3, [pc, #188]	@ (800d214 <__kernel_rem_pio2+0x324>)
 800d156:	2200      	movs	r2, #0
 800d158:	f7f3 fcdc 	bl	8000b14 <__aeabi_dcmpge>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d143      	bne.n	800d1e8 <__kernel_rem_pio2+0x2f8>
 800d160:	4681      	mov	r9, r0
 800d162:	2200      	movs	r2, #0
 800d164:	2300      	movs	r3, #0
 800d166:	4630      	mov	r0, r6
 800d168:	4639      	mov	r1, r7
 800d16a:	f7f3 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800d16e:	2800      	cmp	r0, #0
 800d170:	f000 80bf 	beq.w	800d2f2 <__kernel_rem_pio2+0x402>
 800d174:	f108 33ff 	add.w	r3, r8, #4294967295
 800d178:	2200      	movs	r2, #0
 800d17a:	9900      	ldr	r1, [sp, #0]
 800d17c:	428b      	cmp	r3, r1
 800d17e:	da6e      	bge.n	800d25e <__kernel_rem_pio2+0x36e>
 800d180:	2a00      	cmp	r2, #0
 800d182:	f000 8089 	beq.w	800d298 <__kernel_rem_pio2+0x3a8>
 800d186:	f108 38ff 	add.w	r8, r8, #4294967295
 800d18a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d18c:	f1ab 0b18 	sub.w	fp, fp, #24
 800d190:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0f6      	beq.n	800d186 <__kernel_rem_pio2+0x296>
 800d198:	4658      	mov	r0, fp
 800d19a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d1f8 <__kernel_rem_pio2+0x308>
 800d19e:	f7ff fdeb 	bl	800cd78 <scalbn>
 800d1a2:	f108 0301 	add.w	r3, r8, #1
 800d1a6:	00da      	lsls	r2, r3, #3
 800d1a8:	9205      	str	r2, [sp, #20]
 800d1aa:	ec55 4b10 	vmov	r4, r5, d0
 800d1ae:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d1b0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d20c <__kernel_rem_pio2+0x31c>
 800d1b4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d1b8:	4646      	mov	r6, r8
 800d1ba:	f04f 0a00 	mov.w	sl, #0
 800d1be:	2e00      	cmp	r6, #0
 800d1c0:	f280 80cf 	bge.w	800d362 <__kernel_rem_pio2+0x472>
 800d1c4:	4644      	mov	r4, r8
 800d1c6:	2c00      	cmp	r4, #0
 800d1c8:	f2c0 80fd 	blt.w	800d3c6 <__kernel_rem_pio2+0x4d6>
 800d1cc:	4b12      	ldr	r3, [pc, #72]	@ (800d218 <__kernel_rem_pio2+0x328>)
 800d1ce:	461f      	mov	r7, r3
 800d1d0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1d6:	9306      	str	r3, [sp, #24]
 800d1d8:	f04f 0a00 	mov.w	sl, #0
 800d1dc:	f04f 0b00 	mov.w	fp, #0
 800d1e0:	2600      	movs	r6, #0
 800d1e2:	eba8 0504 	sub.w	r5, r8, r4
 800d1e6:	e0e2      	b.n	800d3ae <__kernel_rem_pio2+0x4be>
 800d1e8:	f04f 0902 	mov.w	r9, #2
 800d1ec:	e754      	b.n	800d098 <__kernel_rem_pio2+0x1a8>
 800d1ee:	bf00      	nop
	...
 800d1fc:	3ff00000 	.word	0x3ff00000
 800d200:	0800dbc8 	.word	0x0800dbc8
 800d204:	40200000 	.word	0x40200000
 800d208:	3ff00000 	.word	0x3ff00000
 800d20c:	3e700000 	.word	0x3e700000
 800d210:	41700000 	.word	0x41700000
 800d214:	3fe00000 	.word	0x3fe00000
 800d218:	0800db88 	.word	0x0800db88
 800d21c:	f854 3b04 	ldr.w	r3, [r4], #4
 800d220:	b945      	cbnz	r5, 800d234 <__kernel_rem_pio2+0x344>
 800d222:	b123      	cbz	r3, 800d22e <__kernel_rem_pio2+0x33e>
 800d224:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d228:	f844 3c04 	str.w	r3, [r4, #-4]
 800d22c:	2301      	movs	r3, #1
 800d22e:	3201      	adds	r2, #1
 800d230:	461d      	mov	r5, r3
 800d232:	e738      	b.n	800d0a6 <__kernel_rem_pio2+0x1b6>
 800d234:	1acb      	subs	r3, r1, r3
 800d236:	e7f7      	b.n	800d228 <__kernel_rem_pio2+0x338>
 800d238:	f108 32ff 	add.w	r2, r8, #4294967295
 800d23c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d242:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d246:	a90c      	add	r1, sp, #48	@ 0x30
 800d248:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d24c:	e739      	b.n	800d0c2 <__kernel_rem_pio2+0x1d2>
 800d24e:	f108 32ff 	add.w	r2, r8, #4294967295
 800d252:	ab0c      	add	r3, sp, #48	@ 0x30
 800d254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d258:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d25c:	e7f3      	b.n	800d246 <__kernel_rem_pio2+0x356>
 800d25e:	a90c      	add	r1, sp, #48	@ 0x30
 800d260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d264:	3b01      	subs	r3, #1
 800d266:	430a      	orrs	r2, r1
 800d268:	e787      	b.n	800d17a <__kernel_rem_pio2+0x28a>
 800d26a:	3401      	adds	r4, #1
 800d26c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d270:	2a00      	cmp	r2, #0
 800d272:	d0fa      	beq.n	800d26a <__kernel_rem_pio2+0x37a>
 800d274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d276:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d27a:	eb0d 0503 	add.w	r5, sp, r3
 800d27e:	9b06      	ldr	r3, [sp, #24]
 800d280:	aa20      	add	r2, sp, #128	@ 0x80
 800d282:	4443      	add	r3, r8
 800d284:	f108 0701 	add.w	r7, r8, #1
 800d288:	3d98      	subs	r5, #152	@ 0x98
 800d28a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d28e:	4444      	add	r4, r8
 800d290:	42bc      	cmp	r4, r7
 800d292:	da04      	bge.n	800d29e <__kernel_rem_pio2+0x3ae>
 800d294:	46a0      	mov	r8, r4
 800d296:	e6a2      	b.n	800cfde <__kernel_rem_pio2+0xee>
 800d298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29a:	2401      	movs	r4, #1
 800d29c:	e7e6      	b.n	800d26c <__kernel_rem_pio2+0x37c>
 800d29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d2a4:	f7f3 f946 	bl	8000534 <__aeabi_i2d>
 800d2a8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d570 <__kernel_rem_pio2+0x680>
 800d2ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d2b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2b8:	46b2      	mov	sl, r6
 800d2ba:	f04f 0800 	mov.w	r8, #0
 800d2be:	9b05      	ldr	r3, [sp, #20]
 800d2c0:	4598      	cmp	r8, r3
 800d2c2:	dd05      	ble.n	800d2d0 <__kernel_rem_pio2+0x3e0>
 800d2c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2c8:	3701      	adds	r7, #1
 800d2ca:	eca5 7b02 	vstmia	r5!, {d7}
 800d2ce:	e7df      	b.n	800d290 <__kernel_rem_pio2+0x3a0>
 800d2d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d2d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d2d8:	f7f3 f996 	bl	8000608 <__aeabi_dmul>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2e4:	f7f2 ffda 	bl	800029c <__adddf3>
 800d2e8:	f108 0801 	add.w	r8, r8, #1
 800d2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2f0:	e7e5      	b.n	800d2be <__kernel_rem_pio2+0x3ce>
 800d2f2:	f1cb 0000 	rsb	r0, fp, #0
 800d2f6:	ec47 6b10 	vmov	d0, r6, r7
 800d2fa:	f7ff fd3d 	bl	800cd78 <scalbn>
 800d2fe:	ec55 4b10 	vmov	r4, r5, d0
 800d302:	4b9d      	ldr	r3, [pc, #628]	@ (800d578 <__kernel_rem_pio2+0x688>)
 800d304:	2200      	movs	r2, #0
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	f7f3 fc03 	bl	8000b14 <__aeabi_dcmpge>
 800d30e:	b300      	cbz	r0, 800d352 <__kernel_rem_pio2+0x462>
 800d310:	4b9a      	ldr	r3, [pc, #616]	@ (800d57c <__kernel_rem_pio2+0x68c>)
 800d312:	2200      	movs	r2, #0
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f3 f976 	bl	8000608 <__aeabi_dmul>
 800d31c:	f7f3 fc24 	bl	8000b68 <__aeabi_d2iz>
 800d320:	4606      	mov	r6, r0
 800d322:	f7f3 f907 	bl	8000534 <__aeabi_i2d>
 800d326:	4b94      	ldr	r3, [pc, #592]	@ (800d578 <__kernel_rem_pio2+0x688>)
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f3 f96d 	bl	8000608 <__aeabi_dmul>
 800d32e:	460b      	mov	r3, r1
 800d330:	4602      	mov	r2, r0
 800d332:	4629      	mov	r1, r5
 800d334:	4620      	mov	r0, r4
 800d336:	f7f2 ffaf 	bl	8000298 <__aeabi_dsub>
 800d33a:	f7f3 fc15 	bl	8000b68 <__aeabi_d2iz>
 800d33e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d340:	f10b 0b18 	add.w	fp, fp, #24
 800d344:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d348:	f108 0801 	add.w	r8, r8, #1
 800d34c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d350:	e722      	b.n	800d198 <__kernel_rem_pio2+0x2a8>
 800d352:	4620      	mov	r0, r4
 800d354:	4629      	mov	r1, r5
 800d356:	f7f3 fc07 	bl	8000b68 <__aeabi_d2iz>
 800d35a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d35c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d360:	e71a      	b.n	800d198 <__kernel_rem_pio2+0x2a8>
 800d362:	ab0c      	add	r3, sp, #48	@ 0x30
 800d364:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d368:	f7f3 f8e4 	bl	8000534 <__aeabi_i2d>
 800d36c:	4622      	mov	r2, r4
 800d36e:	462b      	mov	r3, r5
 800d370:	f7f3 f94a 	bl	8000608 <__aeabi_dmul>
 800d374:	4652      	mov	r2, sl
 800d376:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d37a:	465b      	mov	r3, fp
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f3 f942 	bl	8000608 <__aeabi_dmul>
 800d384:	3e01      	subs	r6, #1
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	e718      	b.n	800d1be <__kernel_rem_pio2+0x2ce>
 800d38c:	9906      	ldr	r1, [sp, #24]
 800d38e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d392:	9106      	str	r1, [sp, #24]
 800d394:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d398:	f7f3 f936 	bl	8000608 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	f7f2 ff7a 	bl	800029c <__adddf3>
 800d3a8:	3601      	adds	r6, #1
 800d3aa:	4682      	mov	sl, r0
 800d3ac:	468b      	mov	fp, r1
 800d3ae:	9b00      	ldr	r3, [sp, #0]
 800d3b0:	429e      	cmp	r6, r3
 800d3b2:	dc01      	bgt.n	800d3b8 <__kernel_rem_pio2+0x4c8>
 800d3b4:	42b5      	cmp	r5, r6
 800d3b6:	dae9      	bge.n	800d38c <__kernel_rem_pio2+0x49c>
 800d3b8:	ab48      	add	r3, sp, #288	@ 0x120
 800d3ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d3be:	e9c5 ab00 	strd	sl, fp, [r5]
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	e6ff      	b.n	800d1c6 <__kernel_rem_pio2+0x2d6>
 800d3c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	dc0b      	bgt.n	800d3e4 <__kernel_rem_pio2+0x4f4>
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dc39      	bgt.n	800d444 <__kernel_rem_pio2+0x554>
 800d3d0:	d05d      	beq.n	800d48e <__kernel_rem_pio2+0x59e>
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	f003 0007 	and.w	r0, r3, #7
 800d3d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d3dc:	ecbd 8b02 	vpop	{d8}
 800d3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d1f3      	bne.n	800d3d2 <__kernel_rem_pio2+0x4e2>
 800d3ea:	9b05      	ldr	r3, [sp, #20]
 800d3ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3f0:	eb0d 0403 	add.w	r4, sp, r3
 800d3f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d3f8:	4625      	mov	r5, r4
 800d3fa:	46c2      	mov	sl, r8
 800d3fc:	f1ba 0f00 	cmp.w	sl, #0
 800d400:	f1a5 0508 	sub.w	r5, r5, #8
 800d404:	dc6b      	bgt.n	800d4de <__kernel_rem_pio2+0x5ee>
 800d406:	4645      	mov	r5, r8
 800d408:	2d01      	cmp	r5, #1
 800d40a:	f1a4 0408 	sub.w	r4, r4, #8
 800d40e:	f300 8087 	bgt.w	800d520 <__kernel_rem_pio2+0x630>
 800d412:	9c05      	ldr	r4, [sp, #20]
 800d414:	ab48      	add	r3, sp, #288	@ 0x120
 800d416:	441c      	add	r4, r3
 800d418:	2000      	movs	r0, #0
 800d41a:	2100      	movs	r1, #0
 800d41c:	f1b8 0f01 	cmp.w	r8, #1
 800d420:	f300 809c 	bgt.w	800d55c <__kernel_rem_pio2+0x66c>
 800d424:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d428:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d42c:	f1b9 0f00 	cmp.w	r9, #0
 800d430:	f040 80a6 	bne.w	800d580 <__kernel_rem_pio2+0x690>
 800d434:	9b04      	ldr	r3, [sp, #16]
 800d436:	e9c3 7800 	strd	r7, r8, [r3]
 800d43a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d43e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d442:	e7c6      	b.n	800d3d2 <__kernel_rem_pio2+0x4e2>
 800d444:	9d05      	ldr	r5, [sp, #20]
 800d446:	ab48      	add	r3, sp, #288	@ 0x120
 800d448:	441d      	add	r5, r3
 800d44a:	4644      	mov	r4, r8
 800d44c:	2000      	movs	r0, #0
 800d44e:	2100      	movs	r1, #0
 800d450:	2c00      	cmp	r4, #0
 800d452:	da35      	bge.n	800d4c0 <__kernel_rem_pio2+0x5d0>
 800d454:	f1b9 0f00 	cmp.w	r9, #0
 800d458:	d038      	beq.n	800d4cc <__kernel_rem_pio2+0x5dc>
 800d45a:	4602      	mov	r2, r0
 800d45c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d460:	9c04      	ldr	r4, [sp, #16]
 800d462:	e9c4 2300 	strd	r2, r3, [r4]
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d46e:	f7f2 ff13 	bl	8000298 <__aeabi_dsub>
 800d472:	ad4a      	add	r5, sp, #296	@ 0x128
 800d474:	2401      	movs	r4, #1
 800d476:	45a0      	cmp	r8, r4
 800d478:	da2b      	bge.n	800d4d2 <__kernel_rem_pio2+0x5e2>
 800d47a:	f1b9 0f00 	cmp.w	r9, #0
 800d47e:	d002      	beq.n	800d486 <__kernel_rem_pio2+0x596>
 800d480:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d484:	4619      	mov	r1, r3
 800d486:	9b04      	ldr	r3, [sp, #16]
 800d488:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d48c:	e7a1      	b.n	800d3d2 <__kernel_rem_pio2+0x4e2>
 800d48e:	9c05      	ldr	r4, [sp, #20]
 800d490:	ab48      	add	r3, sp, #288	@ 0x120
 800d492:	441c      	add	r4, r3
 800d494:	2000      	movs	r0, #0
 800d496:	2100      	movs	r1, #0
 800d498:	f1b8 0f00 	cmp.w	r8, #0
 800d49c:	da09      	bge.n	800d4b2 <__kernel_rem_pio2+0x5c2>
 800d49e:	f1b9 0f00 	cmp.w	r9, #0
 800d4a2:	d002      	beq.n	800d4aa <__kernel_rem_pio2+0x5ba>
 800d4a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	e9c3 0100 	strd	r0, r1, [r3]
 800d4b0:	e78f      	b.n	800d3d2 <__kernel_rem_pio2+0x4e2>
 800d4b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d4b6:	f7f2 fef1 	bl	800029c <__adddf3>
 800d4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4be:	e7eb      	b.n	800d498 <__kernel_rem_pio2+0x5a8>
 800d4c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d4c4:	f7f2 feea 	bl	800029c <__adddf3>
 800d4c8:	3c01      	subs	r4, #1
 800d4ca:	e7c1      	b.n	800d450 <__kernel_rem_pio2+0x560>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	e7c6      	b.n	800d460 <__kernel_rem_pio2+0x570>
 800d4d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d4d6:	f7f2 fee1 	bl	800029c <__adddf3>
 800d4da:	3401      	adds	r4, #1
 800d4dc:	e7cb      	b.n	800d476 <__kernel_rem_pio2+0x586>
 800d4de:	ed95 7b00 	vldr	d7, [r5]
 800d4e2:	ed8d 7b00 	vstr	d7, [sp]
 800d4e6:	ed95 7b02 	vldr	d7, [r5, #8]
 800d4ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4ee:	ec53 2b17 	vmov	r2, r3, d7
 800d4f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4f6:	f7f2 fed1 	bl	800029c <__adddf3>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d506:	f7f2 fec7 	bl	8000298 <__aeabi_dsub>
 800d50a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d50e:	f7f2 fec5 	bl	800029c <__adddf3>
 800d512:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d516:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d51a:	e9c5 6700 	strd	r6, r7, [r5]
 800d51e:	e76d      	b.n	800d3fc <__kernel_rem_pio2+0x50c>
 800d520:	ed94 7b00 	vldr	d7, [r4]
 800d524:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d528:	ec51 0b17 	vmov	r0, r1, d7
 800d52c:	4652      	mov	r2, sl
 800d52e:	465b      	mov	r3, fp
 800d530:	ed8d 7b00 	vstr	d7, [sp]
 800d534:	f7f2 feb2 	bl	800029c <__adddf3>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4606      	mov	r6, r0
 800d53e:	460f      	mov	r7, r1
 800d540:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d544:	f7f2 fea8 	bl	8000298 <__aeabi_dsub>
 800d548:	4652      	mov	r2, sl
 800d54a:	465b      	mov	r3, fp
 800d54c:	f7f2 fea6 	bl	800029c <__adddf3>
 800d550:	3d01      	subs	r5, #1
 800d552:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d556:	e9c4 6700 	strd	r6, r7, [r4]
 800d55a:	e755      	b.n	800d408 <__kernel_rem_pio2+0x518>
 800d55c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d560:	f7f2 fe9c 	bl	800029c <__adddf3>
 800d564:	f108 38ff 	add.w	r8, r8, #4294967295
 800d568:	e758      	b.n	800d41c <__kernel_rem_pio2+0x52c>
 800d56a:	bf00      	nop
 800d56c:	f3af 8000 	nop.w
	...
 800d578:	41700000 	.word	0x41700000
 800d57c:	3e700000 	.word	0x3e700000
 800d580:	9b04      	ldr	r3, [sp, #16]
 800d582:	9a04      	ldr	r2, [sp, #16]
 800d584:	601f      	str	r7, [r3, #0]
 800d586:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d58a:	605c      	str	r4, [r3, #4]
 800d58c:	609d      	str	r5, [r3, #8]
 800d58e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d592:	60d3      	str	r3, [r2, #12]
 800d594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d598:	6110      	str	r0, [r2, #16]
 800d59a:	6153      	str	r3, [r2, #20]
 800d59c:	e719      	b.n	800d3d2 <__kernel_rem_pio2+0x4e2>
 800d59e:	bf00      	nop

0800d5a0 <floor>:
 800d5a0:	ec51 0b10 	vmov	r0, r1, d0
 800d5a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d5b0:	2e13      	cmp	r6, #19
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	4680      	mov	r8, r0
 800d5b8:	dc34      	bgt.n	800d624 <floor+0x84>
 800d5ba:	2e00      	cmp	r6, #0
 800d5bc:	da17      	bge.n	800d5ee <floor+0x4e>
 800d5be:	a332      	add	r3, pc, #200	@ (adr r3, 800d688 <floor+0xe8>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	f7f2 fe6a 	bl	800029c <__adddf3>
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f7f3 faac 	bl	8000b28 <__aeabi_dcmpgt>
 800d5d0:	b150      	cbz	r0, 800d5e8 <floor+0x48>
 800d5d2:	2c00      	cmp	r4, #0
 800d5d4:	da55      	bge.n	800d682 <floor+0xe2>
 800d5d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d5da:	432c      	orrs	r4, r5
 800d5dc:	2500      	movs	r5, #0
 800d5de:	42ac      	cmp	r4, r5
 800d5e0:	4c2b      	ldr	r4, [pc, #172]	@ (800d690 <floor+0xf0>)
 800d5e2:	bf08      	it	eq
 800d5e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	e023      	b.n	800d636 <floor+0x96>
 800d5ee:	4f29      	ldr	r7, [pc, #164]	@ (800d694 <floor+0xf4>)
 800d5f0:	4137      	asrs	r7, r6
 800d5f2:	ea01 0307 	and.w	r3, r1, r7
 800d5f6:	4303      	orrs	r3, r0
 800d5f8:	d01d      	beq.n	800d636 <floor+0x96>
 800d5fa:	a323      	add	r3, pc, #140	@ (adr r3, 800d688 <floor+0xe8>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f2 fe4c 	bl	800029c <__adddf3>
 800d604:	2200      	movs	r2, #0
 800d606:	2300      	movs	r3, #0
 800d608:	f7f3 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d0eb      	beq.n	800d5e8 <floor+0x48>
 800d610:	2c00      	cmp	r4, #0
 800d612:	bfbe      	ittt	lt
 800d614:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d618:	4133      	asrlt	r3, r6
 800d61a:	18e4      	addlt	r4, r4, r3
 800d61c:	ea24 0407 	bic.w	r4, r4, r7
 800d620:	2500      	movs	r5, #0
 800d622:	e7e1      	b.n	800d5e8 <floor+0x48>
 800d624:	2e33      	cmp	r6, #51	@ 0x33
 800d626:	dd0a      	ble.n	800d63e <floor+0x9e>
 800d628:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d62c:	d103      	bne.n	800d636 <floor+0x96>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	f7f2 fe33 	bl	800029c <__adddf3>
 800d636:	ec41 0b10 	vmov	d0, r0, r1
 800d63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d63e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d642:	f04f 37ff 	mov.w	r7, #4294967295
 800d646:	40df      	lsrs	r7, r3
 800d648:	4207      	tst	r7, r0
 800d64a:	d0f4      	beq.n	800d636 <floor+0x96>
 800d64c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d688 <floor+0xe8>)
 800d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d652:	f7f2 fe23 	bl	800029c <__adddf3>
 800d656:	2200      	movs	r2, #0
 800d658:	2300      	movs	r3, #0
 800d65a:	f7f3 fa65 	bl	8000b28 <__aeabi_dcmpgt>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d0c2      	beq.n	800d5e8 <floor+0x48>
 800d662:	2c00      	cmp	r4, #0
 800d664:	da0a      	bge.n	800d67c <floor+0xdc>
 800d666:	2e14      	cmp	r6, #20
 800d668:	d101      	bne.n	800d66e <floor+0xce>
 800d66a:	3401      	adds	r4, #1
 800d66c:	e006      	b.n	800d67c <floor+0xdc>
 800d66e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d672:	2301      	movs	r3, #1
 800d674:	40b3      	lsls	r3, r6
 800d676:	441d      	add	r5, r3
 800d678:	4545      	cmp	r5, r8
 800d67a:	d3f6      	bcc.n	800d66a <floor+0xca>
 800d67c:	ea25 0507 	bic.w	r5, r5, r7
 800d680:	e7b2      	b.n	800d5e8 <floor+0x48>
 800d682:	2500      	movs	r5, #0
 800d684:	462c      	mov	r4, r5
 800d686:	e7af      	b.n	800d5e8 <floor+0x48>
 800d688:	8800759c 	.word	0x8800759c
 800d68c:	7e37e43c 	.word	0x7e37e43c
 800d690:	bff00000 	.word	0xbff00000
 800d694:	000fffff 	.word	0x000fffff

0800d698 <_init>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	bf00      	nop
 800d69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69e:	bc08      	pop	{r3}
 800d6a0:	469e      	mov	lr, r3
 800d6a2:	4770      	bx	lr

0800d6a4 <_fini>:
 800d6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a6:	bf00      	nop
 800d6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6aa:	bc08      	pop	{r3}
 800d6ac:	469e      	mov	lr, r3
 800d6ae:	4770      	bx	lr
