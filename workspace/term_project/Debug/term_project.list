
term_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005178  08005178  00006178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005180  08005180  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00006180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005184  08005184  00006184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005188  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000010  08005198  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005198  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcca  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002394  00000000  00000000  00016d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000190a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae2  00000000  00000000  00019e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1c  00000000  00000000  0001a96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001135f  00000000  00000000  00031386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a7a4  00000000  00000000  000426e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dce89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  000dcecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005120 	.word	0x08005120

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005120 	.word	0x08005120

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b09a      	sub	sp, #104	@ 0x68
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 f887 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8b5 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fbf1 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 fbcf 	bl	8000c7c <MX_DMA_Init>
  MX_ADC1_Init();
 80004de:	f000 f917 	bl	8000710 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e2:	f000 f98d 	bl	8000800 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e6:	f000 fa2b 	bl	8000940 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ea:	f000 faa9 	bl	8000a40 <MX_TIM3_Init>
  MX_TIM5_Init();
 80004ee:	f000 fb23 	bl	8000b38 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80004f2:	f000 fb99 	bl	8000c28 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initializing the motor driver structure and enabling the motor
  Motor_DriverTypeDef mot = { .tim_handle = &htim2,
 80004f6:	4b46      	ldr	r3, [pc, #280]	@ (8000610 <main+0x148>)
 80004f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80004fa:	2300      	movs	r3, #0
 80004fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80004fe:	2304      	movs	r3, #4
 8000500:	647b      	str	r3, [r7, #68]	@ 0x44
 8000502:	2308      	movs	r3, #8
 8000504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000506:	230c      	movs	r3, #12
 8000508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800050a:	4b42      	ldr	r3, [pc, #264]	@ (8000614 <main+0x14c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	653b      	str	r3, [r7, #80]	@ 0x50
  	  	 	  	  	  	  	  .tim_channel1 = TIM_CHANNEL_1,
							  .tim_channel2 = TIM_CHANNEL_2,
  	  	 	  	  	  	  	  .tim_channel3 = TIM_CHANNEL_3,	// Unused
							  .tim_channel4 = TIM_CHANNEL_4,	// Unused
							  .pulse = pulse				 };
  enable_mot(&mot,1);
 8000510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fcaa 	bl	8000e70 <enable_mot>
  // Initially setting the PWM to 0 in case they had been previously been set
  mot_num = 1;
 800051c:	4b3e      	ldr	r3, [pc, #248]	@ (8000618 <main+0x150>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
  set_PWM_percent(&mot, mot_num, 0);
 8000522:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <main+0x150>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800052c:	2200      	movs	r2, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fcce 	bl	8000ed0 <set_PWM_percent>


  // Initializing the Radio Receiver structure and enabling the channel for inputs
  RadioReciever_DriverTypeDef rad = { .tim_handle = &htim1,
 8000534:	4b39      	ldr	r3, [pc, #228]	@ (800061c <main+0x154>)
 8000536:	f107 041c 	add.w	r4, r7, #28
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									   .IC_Diff = 0,
									   .pulse_width = 0,
									   .tol = 0.1,
									   .pulse_recieve_flag = 0,
									   .rise_flag = 0					};
  enable_rad(&rad);
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fd42 	bl	8000fd6 <enable_rad>


  // Initializing the Photoresistors' structure
  uint32_t adc_buff[4];

  Photoresistor_DriverTypeDef photo = { .adc_handle = &hadc1,
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <main+0x158>)
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <main+0x15c>)
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	60bb      	str	r3, [r7, #8]
  	  	  	  	  	  	  	  	  	    .adc_results = adc_buff };
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  prev_time = HAL_GetTick();
 8000560:	f001 f8a4 	bl	80016ac <HAL_GetTick>
 8000564:	4603      	mov	r3, r0
 8000566:	4a30      	ldr	r2, [pc, #192]	@ (8000628 <main+0x160>)
 8000568:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  // Reading the pulse
	  if (edge_flag){
 800056a:	4b30      	ldr	r3, [pc, #192]	@ (800062c <main+0x164>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d008      	beq.n	8000584 <main+0xbc>
		  read_pulse(&rad, &htim_cb);
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	492e      	ldr	r1, [pc, #184]	@ (8000630 <main+0x168>)
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fd8d 	bl	8001098 <read_pulse>
		  edge_flag = 0;
 800057e:	4b2b      	ldr	r3, [pc, #172]	@ (800062c <main+0x164>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
	  }

	  // Calculating duty count 1 and setting motor 1 PWM
	  mot_num = 1;
 8000584:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <main+0x150>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
	  duty_count = pulse_to_PWM(&rad);
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fbe2 	bl	8000d58 <pulse_to_PWM>
 8000594:	4603      	mov	r3, r0
 8000596:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <main+0x16c>)
 8000598:	6013      	str	r3, [r2, #0]
	  duty_percent = (duty_count*100)/pulse;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <main+0x16c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2264      	movs	r2, #100	@ 0x64
 80005a0:	fb03 f202 	mul.w	r2, r3, r2
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <main+0x14c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <main+0x170>)
 80005ae:	6013      	str	r3, [r2, #0]
	  set_PWM(&mot, mot_num, duty_count);
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <main+0x150>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <main+0x16c>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fca2 	bl	8000f08 <set_PWM>
		  HAL_UART_Transmit(&huart6, (uint8_t*) my_message, strlen(my_message), 10);
		  prev_time = curr_time;
	  }
	  */

	  if (adc_conversion_flag == 0){
 80005c4:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <main+0x174>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d107      	bne.n	80005dc <main+0x114>
		  // Starts the DMA to get ADC values
		  start_get_adc_values(&photo);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fce5 	bl	8000f9e <start_get_adc_values>
		  adc_conversion_flag = 1;
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <main+0x174>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e7c6      	b.n	800056a <main+0xa2>
	  }
	  else if (adc_conversion_flag == 2){
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <main+0x174>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d1c2      	bne.n	800056a <main+0xa2>
		  // Waits until the DMA has finished collecting values into the buffer after the interrupt is ran to return values
		  uint32_t* adc_results = get_adc_values(&photo);
 80005e4:	463b      	mov	r3, r7
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fce9 	bl	8000fbe <get_adc_values>
 80005ec:	6678      	str	r0, [r7, #100]	@ 0x64
		  uint32_t photo1 = adc_results[0];
 80005ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	663b      	str	r3, [r7, #96]	@ 0x60
		  uint32_t photo2 = adc_results[1];
 80005f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  uint32_t photo3 = adc_results[2];
 80005fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t photo4 = adc_results[3];
 8000600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	657b      	str	r3, [r7, #84]	@ 0x54
		  adc_conversion_flag = 0;
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <main+0x174>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	  if (edge_flag){
 800060c:	e7ad      	b.n	800056a <main+0xa2>
 800060e:	bf00      	nop
 8000610:	2000011c 	.word	0x2000011c
 8000614:	20000000 	.word	0x20000000
 8000618:	20000248 	.word	0x20000248
 800061c:	08005138 	.word	0x08005138
 8000620:	2000002c 	.word	0x2000002c
 8000624:	20000074 	.word	0x20000074
 8000628:	2000024c 	.word	0x2000024c
 800062c:	20000298 	.word	0x20000298
 8000630:	20000250 	.word	0x20000250
 8000634:	20000244 	.word	0x20000244
 8000638:	20000240 	.word	0x20000240
 800063c:	20000299 	.word	0x20000299

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fd2c 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <SystemClock_Config+0xc8>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a20      	ldr	r2, [pc, #128]	@ (800070c <SystemClock_Config+0xcc>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b4:	2360      	movs	r3, #96	@ 0x60
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f9fb 	bl	8002ac0 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fbc8 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2103      	movs	r1, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fc5d 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f000 fbb2 	bl	8000e64 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000724:	4a34      	ldr	r2, [pc, #208]	@ (80007f8 <MX_ADC1_Init+0xe8>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 800072a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000736:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073c:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000752:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <MX_ADC1_Init+0xec>)
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 800075e:	2204      	movs	r2, #4
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4820      	ldr	r0, [pc, #128]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000772:	f000 ffa7 	bl	80016c4 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fb72 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000780:	2304      	movs	r3, #4
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 8000792:	f001 f8df 	bl	8001954 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 fb62 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4811      	ldr	r0, [pc, #68]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 80007ae:	f001 f8d1 	bl	8001954 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b8:	f000 fb54 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 80007c6:	f001 f8c5 	bl	8001954 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007d0:	f000 fb48 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_ADC1_Init+0xe4>)
 80007de:	f001 f8b9 	bl	8001954 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007e8:	f000 fb3c 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	40012000 	.word	0x40012000
 80007fc:	0f000001 	.word	0x0f000001

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b090      	sub	sp, #64	@ 0x40
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <MX_TIM1_Init+0x138>)
 800083c:	4a3f      	ldr	r2, [pc, #252]	@ (800093c <MX_TIM1_Init+0x13c>)
 800083e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000840:	4b3d      	ldr	r3, [pc, #244]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000842:	225f      	movs	r2, #95	@ 0x5f
 8000844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800084c:	4b3a      	ldr	r3, [pc, #232]	@ (8000938 <MX_TIM1_Init+0x138>)
 800084e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <MX_TIM1_Init+0x138>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b35      	ldr	r3, [pc, #212]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000866:	4834      	ldr	r0, [pc, #208]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000868:	f002 fdc2 	bl	80033f0 <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000872:	f000 faf7 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800087c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000880:	4619      	mov	r1, r3
 8000882:	482d      	ldr	r0, [pc, #180]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000884:	f003 face 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800088e:	f000 fae9 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000892:	4829      	ldr	r0, [pc, #164]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000894:	f002 ff04 	bl	80036a0 <HAL_TIM_IC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800089e:	f000 fae1 	bl	8000e64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80008a2:	2304      	movs	r3, #4
 80008a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80008a6:	2350      	movs	r3, #80	@ 0x50
 80008a8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	481e      	ldr	r0, [pc, #120]	@ (8000938 <MX_TIM1_Init+0x138>)
 80008be:	f003 fb78 	bl	8003fb2 <HAL_TIM_SlaveConfigSynchro>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80008c8:	f000 facc 	bl	8000e64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_TIM1_Init+0x138>)
 80008e6:	f003 f93f 	bl	8003b68 <HAL_TIM_IC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80008f0:	f000 fab8 	bl	8000e64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008f4:	2302      	movs	r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000906:	f003 f92f 	bl	8003b68 <HAL_TIM_IC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000910:	f000 faa8 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_TIM1_Init+0x138>)
 8000922:	f004 f87d 	bl	8004a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800092c:	f000 fa9a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3740      	adds	r7, #64	@ 0x40
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000d4 	.word	0x200000d4
 800093c:	40010000 	.word	0x40010000

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b32      	ldr	r3, [pc, #200]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000978:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000984:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000986:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800098a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000998:	4828      	ldr	r0, [pc, #160]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 800099a:	f002 fd29 	bl	80033f0 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009a4:	f000 fa5e 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 80009b6:	f003 fa35 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c0:	f000 fa50 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009c4:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 80009c6:	f002 fd62 	bl	800348e <HAL_TIM_PWM_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d0:	f000 fa48 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4619      	mov	r1, r3
 80009e2:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 80009e4:	f004 f81c 	bl	8004a20 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009ee:	f000 fa39 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	@ 0x60
 80009f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000a0a:	f003 f949 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a14:	f000 fa26 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000a20:	f003 f93e 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a2a:	f000 fa1b 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM2_Init+0xfc>)
 8000a30:	f000 fcb0 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000a34:	bf00      	nop
 8000a36:	3738      	adds	r7, #56	@ 0x38
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000011c 	.word	0x2000011c

08000a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a6c:	4a31      	ldr	r2, [pc, #196]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a72:	225f      	movs	r2, #95	@ 0x5f
 8000a74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a90:	4827      	ldr	r0, [pc, #156]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000a92:	f002 fcad 	bl	80033f0 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f000 f9e2 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4820      	ldr	r0, [pc, #128]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000aae:	f003 f9b9 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 f9d4 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000abe:	f002 fdef 	bl	80036a0 <HAL_TIM_IC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f9cc 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4815      	ldr	r0, [pc, #84]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000adc:	f003 ffa0 	bl	8004a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000ae6:	f000 f9bd 	bl	8000e64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	2208      	movs	r2, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000b02:	f003 f831 	bl	8003b68 <HAL_TIM_IC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000b0c:	f000 f9aa 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	220c      	movs	r2, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <MX_TIM3_Init+0xf0>)
 8000b18:	f003 f826 	bl	8003b68 <HAL_TIM_IC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b22:	f000 f99f 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000164 	.word	0x20000164
 8000b34:	40000400 	.word	0x40000400

08000b38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c20 <MX_TIM5_Init+0xe8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1919999;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b7c:	4a29      	ldr	r2, [pc, #164]	@ (8000c24 <MX_TIM5_Init+0xec>)
 8000b7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b8c:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000b8e:	f002 fc2f 	bl	80033f0 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000b98:	f000 f964 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000baa:	f003 f93b 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000bb4:	f000 f956 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000bba:	f002 fc68 	bl	800348e <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000bc4:	f000 f94e 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000bd8:	f003 ff22 	bl	8004a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000be2:	f000 f93f 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	@ 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000bfe:	f003 f84f 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000c08:	f000 f92c 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM5_Init+0xe4>)
 8000c0e:	f000 fbc1 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	@ 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001ac 	.word	0x200001ac
 8000c20:	40000c00 	.word	0x40000c00
 8000c24:	001d4bff 	.word	0x001d4bff

08000c28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <MX_USART6_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_USART6_UART_Init+0x4c>)
 8000c60:	f003 ff60 	bl	8004b24 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f8fb 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001f4 	.word	0x200001f4
 8000c78:	40011400 	.word	0x40011400

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_DMA_Init+0x3c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <MX_DMA_Init+0x3c>)
 8000c8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_DMA_Init+0x3c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2038      	movs	r0, #56	@ 0x38
 8000ca4:	f001 f9e1 	bl	800206a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca8:	2038      	movs	r0, #56	@ 0x38
 8000caa:	f001 f9fa 	bl	80020a2 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a16      	ldr	r2, [pc, #88]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <MX_GPIO_Init+0x94>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d26:	23c0      	movs	r3, #192	@ 0xc0
 8000d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2a:	2312      	movs	r3, #18
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d36:	2304      	movs	r3, #4
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <MX_GPIO_Init+0x98>)
 8000d42:	f001 fd39 	bl	80027b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <pulse_to_PWM>:

/* USER CODE BEGIN 4 */
int32_t pulse_to_PWM(RadioReciever_DriverTypeDef* rad)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  // Getting radio pulse and setting motor
	  pulse_rad = get_pulse(rad);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 f950 	bl	8001006 <get_pulse>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <pulse_to_PWM+0xa4>)
 8000d6c:	801a      	strh	r2, [r3, #0]
	  duty_percent = ((pulse_rad-1509)*100)/513;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <pulse_to_PWM+0xa4>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f2a3 53e5 	subw	r3, r3, #1509	@ 0x5e5
 8000d76:	2264      	movs	r2, #100	@ 0x64
 8000d78:	fb02 f303 	mul.w	r3, r2, r3
 8000d7c:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <pulse_to_PWM+0xa8>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1212      	asrs	r2, r2, #8
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <pulse_to_PWM+0xac>)
 8000d8a:	6013      	str	r3, [r2, #0]
	  duty_count = ((pulse_rad-1509)*pulse)/513;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <pulse_to_PWM+0xa4>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	f2a3 53e5 	subw	r3, r3, #1509	@ 0x5e5
 8000d94:	4a1c      	ldr	r2, [pc, #112]	@ (8000e08 <pulse_to_PWM+0xb0>)
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <pulse_to_PWM+0xa8>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	1212      	asrs	r2, r2, #8
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000daa:	6013      	str	r3, [r2, #0]
	  if (duty_percent > 100 || duty_count > 4799){
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <pulse_to_PWM+0xac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b64      	cmp	r3, #100	@ 0x64
 8000db2:	dc04      	bgt.n	8000dbe <pulse_to_PWM+0x66>
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8000dbc:	db07      	blt.n	8000dce <pulse_to_PWM+0x76>
		  duty_percent = 100;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <pulse_to_PWM+0xac>)
 8000dc0:	2264      	movs	r2, #100	@ 0x64
 8000dc2:	601a      	str	r2, [r3, #0]
		  duty_count = 4799;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000dc6:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e010      	b.n	8000df0 <pulse_to_PWM+0x98>
	  }
	  else if (duty_percent < -100 || duty_count < -4799){
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <pulse_to_PWM+0xac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000dd6:	db04      	blt.n	8000de2 <pulse_to_PWM+0x8a>
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 8000de0:	dc06      	bgt.n	8000df0 <pulse_to_PWM+0x98>
		  duty_percent = -100;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <pulse_to_PWM+0xac>)
 8000de4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8000de8:	601a      	str	r2, [r3, #0]
		  duty_count = -4799;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <pulse_to_PWM+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
	  }
	  return duty_count;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <pulse_to_PWM+0xb4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000023c 	.word	0x2000023c
 8000e00:	7fc01ff1 	.word	0x7fc01ff1
 8000e04:	20000240 	.word	0x20000240
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000244 	.word	0x20000244
 8000e10:	ffffed41 	.word	0xffffed41

08000e14 <HAL_TIM_IC_CaptureCallback>:
}

// Callback Functions

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	edge_flag = 1;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x28>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
	htim_cb = *htim;
 8000e22:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2348      	movs	r3, #72	@ 0x48
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f004 f969 	bl	8005104 <memcpy>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000298 	.word	0x20000298
 8000e40:	20000250 	.word	0x20000250

08000e44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	adc_conversion_flag = 2;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000299 	.word	0x20000299

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <Error_Handler+0x8>

08000e70 <enable_mot>:
 */


#include "motor_driver.h"

void enable_mot(Motor_DriverTypeDef* mot, uint32_t motor_num){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	if(motor_num == 1){
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d10f      	bne.n	8000ea0 <enable_mot+0x30>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel1);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	f002 fb58 	bl	8003540 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel2);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f002 fb50 	bl	8003540 <HAL_TIM_PWM_Start>
	}
	if(motor_num == 2){
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d10f      	bne.n	8000ec6 <enable_mot+0x56>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel3);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f002 fb45 	bl	8003540 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel4);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f002 fb3d 	bl	8003540 <HAL_TIM_PWM_Start>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <set_PWM_percent>:
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel3);
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel4);
	}
}

void set_PWM_percent(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_cycle){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	int32_t duty_count = (duty_cycle*(mot->pulse))/100;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <set_PWM_percent+0x34>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	617b      	str	r3, [r7, #20]
	set_PWM(mot, motor_num, duty_count);
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 f807 	bl	8000f08 <set_PWM>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	51eb851f 	.word	0x51eb851f

08000f08 <set_PWM>:

void set_PWM(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_count){
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	if (motor_num == 1){
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d11c      	bne.n	8000f54 <set_PWM+0x4c>
		if (duty_count <= 0){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc0b      	bgt.n	8000f38 <set_PWM+0x30>
			(*(mot->tim_handle)).Instance->CCR1 = -duty_count;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	425a      	negs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = 0;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	639a      	str	r2, [r3, #56]	@ 0x38
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel3,0);
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel4,duty_count);
		}
	}
}
 8000f36:	e02c      	b.n	8000f92 <set_PWM+0x8a>
		else if (duty_count >= 0){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db29      	blt.n	8000f92 <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR1 = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = duty_count;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f52:	e01e      	b.n	8000f92 <set_PWM+0x8a>
	else if (motor_num == 2){
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d11b      	bne.n	8000f92 <set_PWM+0x8a>
		if (duty_count <= 0){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dc0b      	bgt.n	8000f78 <set_PWM+0x70>
			(*(mot->tim_handle)).Instance->CCR3 = -duty_count;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	425a      	negs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = 0;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f76:	e00c      	b.n	8000f92 <set_PWM+0x8a>
		else if (duty_count >= 0){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db09      	blt.n	8000f92 <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR3 = 0;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <start_get_adc_values>:
 */

#include "photoresistor_driver.h"

void start_get_adc_values(Photoresistor_DriverTypeDef* photo)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(photo->adc_handle, (uint32_t*)(photo->adc_results),4); // EDIT: make sure the buffer works as an address input
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f000 fbcb 	bl	800174c <HAL_ADC_Start_DMA>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <get_adc_values>:

uint32_t* get_adc_values(Photoresistor_DriverTypeDef* photo)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return photo->adc_results;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <enable_rad>:
 */

#include <radio_reciever_driver.h>

void enable_rad(RadioReciever_DriverTypeDef* rad)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	// Enabling the rising/falling edge interrupt
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4610      	mov	r0, r2
 8000fea:	f002 fbb3 	bl	8003754 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel2);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f002 fbab 	bl	8003754 <HAL_TIM_IC_Start_IT>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <get_pulse>:
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel1);
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel2);
}

uint16_t get_pulse(RadioReciever_DriverTypeDef* rad)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	if (rad->pulse_recieve_flag){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d038      	beq.n	8001088 <get_pulse+0x82>
		// Calculate pulse width (in us) w/ overflow
		if (rad->IC_Fall < rad->IC_Rise){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	89da      	ldrh	r2, [r3, #14]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	899b      	ldrh	r3, [r3, #12]
 800101e:	429a      	cmp	r2, r3
 8001020:	d20a      	bcs.n	8001038 <get_pulse+0x32>
			rad->IC_Diff = (0xffff - rad->IC_Rise) + rad->IC_Fall;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	89da      	ldrh	r2, [r3, #14]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	821a      	strh	r2, [r3, #16]
 8001036:	e007      	b.n	8001048 <get_pulse+0x42>
		}
		else{
			rad->IC_Diff = rad->IC_Fall - rad->IC_Rise;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	89da      	ldrh	r2, [r3, #14]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	899b      	ldrh	r3, [r3, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	821a      	strh	r2, [r3, #16]
		}
		// Manage invalid values
		if (rad->IC_Diff < (2000*(1+rad->tol)) || rad->IC_Diff > (1000*(1-rad->tol))){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	8a1b      	ldrh	r3, [r3, #16]
 800104c:	4619      	mov	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	8a9b      	ldrh	r3, [r3, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	4299      	cmp	r1, r3
 800105e:	db0c      	blt.n	800107a <get_pulse+0x74>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8a1b      	ldrh	r3, [r3, #16]
 8001064:	4619      	mov	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a9b      	ldrh	r3, [r3, #20]
 800106a:	f1c3 0301 	rsb	r3, r3, #1
 800106e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	4299      	cmp	r1, r3
 8001078:	dd03      	ble.n	8001082 <get_pulse+0x7c>
			rad->pulse_width = rad->IC_Diff;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8a1a      	ldrh	r2, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	825a      	strh	r2, [r3, #18]
		}
		rad->pulse_recieve_flag = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
	}
	return rad->pulse_width;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8a5b      	ldrh	r3, [r3, #18]
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <read_pulse>:

void read_pulse(RadioReciever_DriverTypeDef* rad, TIM_HandleTypeDef* htim)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	if (htim->Instance == rad->tim_handle->Instance && !(rad->pulse_recieve_flag)){
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d11e      	bne.n	80010ee <read_pulse+0x56>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d11a      	bne.n	80010ee <read_pulse+0x56>
		if (rad->rise_flag){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <read_pulse+0x50>
			rad->IC_Rise = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	819a      	strh	r2, [r3, #12]
			rad->IC_Fall = HAL_TIM_ReadCapturedValue(htim, rad->tim_channel2);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f002 ffb3 	bl	8004038 <HAL_TIM_ReadCapturedValue>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	81da      	strh	r2, [r3, #14]
			rad->pulse_recieve_flag = 1;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	619a      	str	r2, [r3, #24]
			rad->rise_flag = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
		}
		else{
			rad->rise_flag = 1;
		}
	}
}
 80010e6:	e002      	b.n	80010ee <read_pulse+0x56>
			rad->rise_flag = 1;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	61da      	str	r2, [r3, #28]
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800110c:	6453      	str	r3, [r2, #68]	@ 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <HAL_ADC_MspInit+0xd8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d156      	bne.n	8001218 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a2c      	ldr	r2, [pc, #176]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a25      	ldr	r2, [pc, #148]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <HAL_ADC_MspInit+0xdc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a2:	23f0      	movs	r3, #240	@ 0xf0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	481c      	ldr	r0, [pc, #112]	@ (8001228 <HAL_ADC_MspInit+0xe0>)
 80011b6:	f001 faff 	bl	80027b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <HAL_ADC_MspInit+0xe8>)
 80011be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 80011fe:	f000 ff6b 	bl	80020d8 <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001208:	f7ff fe2c 	bl	8000e64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 8001210:	639a      	str	r2, [r3, #56]	@ 0x38
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_ADC_MspInit+0xe4>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	@ 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012000 	.word	0x40012000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	20000074 	.word	0x20000074
 8001230:	40026410 	.word	0x40026410

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	@ 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a4a      	ldr	r2, [pc, #296]	@ (800137c <HAL_TIM_Base_MspInit+0x148>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d135      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a48      	ldr	r2, [pc, #288]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800128e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4836      	ldr	r0, [pc, #216]	@ (8001384 <HAL_TIM_Base_MspInit+0x150>)
 80012ac:	f001 fa84 	bl	80027b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	201b      	movs	r0, #27
 80012b6:	f000 fed8 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ba:	201b      	movs	r0, #27
 80012bc:	f000 fef1 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80012c0:	e058      	b.n	8001374 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ca:	d10e      	bne.n	80012ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]
}
 80012e8:	e044      	b.n	8001374 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <HAL_TIM_Base_MspInit+0x154>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d12c      	bne.n	800134e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a20      	ldr	r2, [pc, #128]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800132c:	2303      	movs	r3, #3
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800133c:	2302      	movs	r3, #2
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <HAL_TIM_Base_MspInit+0x158>)
 8001348:	f001 fa36 	bl	80027b8 <HAL_GPIO_Init>
}
 800134c:	e012      	b.n	8001374 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM5)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <HAL_TIM_Base_MspInit+0x15c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10d      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_TIM_Base_MspInit+0x14c>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000
 8001388:	40000400 	.word	0x40000400
 800138c:	40020400 	.word	0x40020400
 8001390:	40000c00 	.word	0x40000c00

08001394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013b4:	d11e      	bne.n	80013f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d2:	2303      	movs	r3, #3
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e2:	2301      	movs	r3, #1
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4816      	ldr	r0, [pc, #88]	@ (8001448 <HAL_TIM_MspPostInit+0xb4>)
 80013ee:	f001 f9e3 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80013f2:	e022      	b.n	800143a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_TIM_MspPostInit+0xb8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11d      	bne.n	800143a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a0f      	ldr	r2, [pc, #60]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <HAL_TIM_MspPostInit+0xb0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141a:	2304      	movs	r3, #4
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800142a:	2302      	movs	r3, #2
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <HAL_TIM_MspPostInit+0xb4>)
 8001436:	f001 f9bf 	bl	80027b8 <HAL_GPIO_Init>
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	40000c00 	.word	0x40000c00

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_UART_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014bc:	2308      	movs	r3, #8
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <HAL_UART_MspInit+0x8c>)
 80014c8:	f001 f976 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40011400 	.word	0x40011400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <NMI_Handler+0x4>

080014e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <MemManage_Handler+0x4>

080014f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <UsageFault_Handler+0x4>

08001508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 f8a5 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <TIM1_CC_IRQHandler+0x10>)
 8001546:	f002 fa1f 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000d4 	.word	0x200000d4

08001554 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DMA2_Stream0_IRQHandler+0x10>)
 800155a:	f000 fec3 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000074 	.word	0x20000074

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	@ (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f003 fd7f 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7fe ff83 	bl	80004c8 <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015d0:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 80015d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015d8:	200002a0 	.word	0x200002a0

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 fd23 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fd70 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd3b 	bl	80020be <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 fd03 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000004 	.word	0x20000004
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	2000029c 	.word	0x2000029c

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000029c 	.word	0x2000029c

080016c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e033      	b.n	8001742 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fd30 	bl	8001148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800170a:	f023 0302 	bic.w	r3, r3, #2
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa4e 	bl	8001bb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
 8001732:	e001      	b.n	8001738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_Start_DMA+0x1e>
 8001766:	2302      	movs	r3, #2
 8001768:	e0ce      	b.n	8001908 <HAL_ADC_Start_DMA+0x1bc>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d018      	beq.n	80017b2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001790:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_ADC_Start_DMA+0x1c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5f      	ldr	r2, [pc, #380]	@ (8001914 <HAL_ADC_Start_DMA+0x1c8>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9a      	lsrs	r2, r3, #18
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80017a4:	e002      	b.n	80017ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f9      	bne.n	80017a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 8086 	bne.w	80018ee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800180c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001820:	d106      	bne.n	8001830 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f023 0206 	bic.w	r2, r3, #6
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
 800182e:	e002      	b.n	8001836 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <HAL_ADC_Start_DMA+0x1cc>)
 8001840:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001846:	4a35      	ldr	r2, [pc, #212]	@ (800191c <HAL_ADC_Start_DMA+0x1d0>)
 8001848:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184e:	4a34      	ldr	r2, [pc, #208]	@ (8001920 <HAL_ADC_Start_DMA+0x1d4>)
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001856:	4a33      	ldr	r2, [pc, #204]	@ (8001924 <HAL_ADC_Start_DMA+0x1d8>)
 8001858:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001862:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001872:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001882:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	334c      	adds	r3, #76	@ 0x4c
 800188e:	4619      	mov	r1, r3
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f000 fcce 	bl	8002234 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10f      	bne.n	80018c4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d129      	bne.n	8001906 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	e020      	b.n	8001906 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <HAL_ADC_Start_DMA+0x1dc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11b      	bne.n	8001906 <HAL_ADC_Start_DMA+0x1ba>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d114      	bne.n	8001906 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e00b      	b.n	8001906 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000004 	.word	0x20000004
 8001914:	431bde83 	.word	0x431bde83
 8001918:	40012300 	.word	0x40012300
 800191c:	08001db1 	.word	0x08001db1
 8001920:	08001e6b 	.word	0x08001e6b
 8001924:	08001e87 	.word	0x08001e87
 8001928:	40012000 	.word	0x40012000

0800192c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1c>
 800196c:	2302      	movs	r3, #2
 800196e:	e113      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x244>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b09      	cmp	r3, #9
 800197e:	d925      	bls.n	80019cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68d9      	ldr	r1, [r3, #12]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	3b1e      	subs	r3, #30
 8001996:	2207      	movs	r2, #7
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43da      	mvns	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	400a      	ands	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68d9      	ldr	r1, [r3, #12]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	4603      	mov	r3, r0
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4403      	add	r3, r0
 80019be:	3b1e      	subs	r3, #30
 80019c0:	409a      	lsls	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	e022      	b.n	8001a12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	2207      	movs	r2, #7
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	400a      	ands	r2, r1
 80019ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6919      	ldr	r1, [r3, #16]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4403      	add	r3, r0
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d824      	bhi.n	8001a64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b05      	subs	r3, #5
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	400a      	ands	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b05      	subs	r3, #5
 8001a56:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a62:	e04c      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d824      	bhi.n	8001ab6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b23      	subs	r3, #35	@ 0x23
 8001a7e:	221f      	movs	r2, #31
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43da      	mvns	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b23      	subs	r3, #35	@ 0x23
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab4:	e023      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b41      	subs	r3, #65	@ 0x41
 8001ac8:	221f      	movs	r2, #31
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b41      	subs	r3, #65	@ 0x41
 8001af2:	fa00 f203 	lsl.w	r2, r0, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x250>)
 8001b00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a28      	ldr	r2, [pc, #160]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x254>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10f      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x1d8>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b12      	cmp	r3, #18
 8001b12:	d10b      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x254>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12b      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x23a>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <HAL_ADC_ConfigChannel+0x258>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d003      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x1f4>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b11      	cmp	r3, #17
 8001b46:	d122      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <HAL_ADC_ConfigChannel+0x258>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d111      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x25c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a11      	ldr	r2, [pc, #68]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x260>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	0c9a      	lsrs	r2, r3, #18
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	10000012 	.word	0x10000012
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	431bde83 	.word	0x431bde83

08001bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc0:	4b79      	ldr	r3, [pc, #484]	@ (8001da8 <ADC_Init+0x1f0>)
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	021a      	lsls	r2, r3, #8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	4a58      	ldr	r2, [pc, #352]	@ (8001dac <ADC_Init+0x1f4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d022      	beq.n	8001c96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6899      	ldr	r1, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e00f      	b.n	8001cb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0202 	bic.w	r2, r2, #2
 8001cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
 8001cd0:	005a      	lsls	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01b      	beq.n	8001d1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	035a      	lsls	r2, r3, #13
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e007      	b.n	8001d2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	051a      	lsls	r2, r3, #20
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d6e:	025a      	lsls	r2, r3, #9
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	029a      	lsls	r2, r3, #10
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40012300 	.word	0x40012300
 8001dac:	0f000001 	.word	0x0f000001

08001db0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d13c      	bne.n	8001e44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d12b      	bne.n	8001e3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d127      	bne.n	8001e3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d119      	bne.n	8001e3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0220 	bic.w	r2, r2, #32
 8001e16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff f801 	bl	8000e44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e42:	e00e      	b.n	8001e62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff fd75 	bl	8001940 <HAL_ADC_ErrorCallback>
}
 8001e56:	e004      	b.n	8001e62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fd57 	bl	800192c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff fd4a 	bl	8001940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	@ (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	@ (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	@ 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fae2 	bl	80016ac <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e099      	b.n	8002228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002114:	e00f      	b.n	8002136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002116:	f7ff fac9 	bl	80016ac <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b05      	cmp	r3, #5
 8002122:	d908      	bls.n	8002136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e078      	b.n	8002228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e8      	bne.n	8002116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_DMA_Init+0x158>)
 8002150:	4013      	ands	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	2b04      	cmp	r3, #4
 800218e:	d107      	bne.n	80021a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	4313      	orrs	r3, r2
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d117      	bne.n	80021fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fa6f 	bl	80026c0 <DMA_CheckFifoParam>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021f6:	2301      	movs	r3, #1
 80021f8:	e016      	b.n	8002228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa26 	bl	8002654 <DMA_CalcBaseAndBitshift>
 8002208:	4603      	mov	r3, r0
 800220a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	223f      	movs	r2, #63	@ 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	f010803f 	.word	0xf010803f

08002234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_DMA_Start_IT+0x26>
 8002256:	2302      	movs	r3, #2
 8002258:	e040      	b.n	80022dc <HAL_DMA_Start_IT+0xa8>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12f      	bne.n	80022ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f9b8 	bl	80025f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0216 	orr.w	r2, r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0208 	orr.w	r2, r2, #8
 80022ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e005      	b.n	80022da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022f0:	4b8e      	ldr	r3, [pc, #568]	@ (800252c <HAL_DMA_IRQHandler+0x248>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002530 <HAL_DMA_IRQHandler+0x24c>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	2208      	movs	r2, #8
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01a      	beq.n	8002350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233c:	2208      	movs	r2, #8
 800233e:	409a      	lsls	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	2201      	movs	r2, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2201      	movs	r2, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	2204      	movs	r2, #4
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	2204      	movs	r2, #4
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f043 0204 	orr.w	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	2210      	movs	r2, #16
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d043      	beq.n	8002454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03c      	beq.n	8002454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	2210      	movs	r2, #16
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d024      	beq.n	8002454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	e01f      	b.n	8002454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e016      	b.n	8002454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0208 	bic.w	r2, r2, #8
 8002442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	2220      	movs	r2, #32
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 808f 	beq.w	8002584 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8087 	beq.w	8002584 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	2220      	movs	r2, #32
 800247c:	409a      	lsls	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b05      	cmp	r3, #5
 800248c:	d136      	bne.n	80024fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0216 	bic.w	r2, r2, #22
 800249c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_DMA_IRQHandler+0x1da>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	223f      	movs	r2, #63	@ 0x3f
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d07e      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
        }
        return;
 80024fa:	e079      	b.n	80025f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01d      	beq.n	8002546 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	2b00      	cmp	r3, #0
 800251e:	d031      	beq.n	8002584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
 8002528:	e02c      	b.n	8002584 <HAL_DMA_IRQHandler+0x2a0>
 800252a:	bf00      	nop
 800252c:	20000004 	.word	0x20000004
 8002530:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e01e      	b.n	8002584 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0210 	bic.w	r2, r2, #16
 8002562:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002588:	2b00      	cmp	r3, #0
 800258a:	d032      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d022      	beq.n	80025de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2205      	movs	r2, #5
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d307      	bcc.n	80025cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f2      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x2cc>
 80025ca:	e000      	b.n	80025ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	e000      	b.n	80025f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025f0:	bf00      	nop
    }
  }
}
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b40      	cmp	r3, #64	@ 0x40
 8002624:	d108      	bne.n	8002638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002636:	e007      	b.n	8002648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3b10      	subs	r3, #16
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800266e:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <DMA_CalcBaseAndBitshift+0x68>)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d909      	bls.n	8002696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	659a      	str	r2, [r3, #88]	@ 0x58
 8002694:	e007      	b.n	80026a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800269e:	f023 0303 	bic.w	r3, r3, #3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	aaaaaaab 	.word	0xaaaaaaab
 80026bc:	08005170 	.word	0x08005170

080026c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11f      	bne.n	800271a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d856      	bhi.n	800278e <DMA_CheckFifoParam+0xce>
 80026e0:	a201      	add	r2, pc, #4	@ (adr r2, 80026e8 <DMA_CheckFifoParam+0x28>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	0800270b 	.word	0x0800270b
 80026f0:	080026f9 	.word	0x080026f9
 80026f4:	0800278f 	.word	0x0800278f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d046      	beq.n	8002792 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e043      	b.n	8002792 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002712:	d140      	bne.n	8002796 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e03d      	b.n	8002796 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002722:	d121      	bne.n	8002768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d837      	bhi.n	800279a <DMA_CheckFifoParam+0xda>
 800272a:	a201      	add	r2, pc, #4	@ (adr r2, 8002730 <DMA_CheckFifoParam+0x70>)
 800272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002730:	08002741 	.word	0x08002741
 8002734:	08002747 	.word	0x08002747
 8002738:	08002741 	.word	0x08002741
 800273c:	08002759 	.word	0x08002759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      break;
 8002744:	e030      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d025      	beq.n	800279e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002756:	e022      	b.n	800279e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002760:	d11f      	bne.n	80027a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002766:	e01c      	b.n	80027a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d903      	bls.n	8002776 <DMA_CheckFifoParam+0xb6>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d003      	beq.n	800277c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002774:	e018      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
      break;
 800277a:	e015      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e00b      	b.n	80027a6 <DMA_CheckFifoParam+0xe6>
      break;
 800278e:	bf00      	nop
 8002790:	e00a      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e008      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e006      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e004      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
 80027a0:	e002      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
    }
  } 
  
  return status; 
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e159      	b.n	8002a88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 8148 	bne.w	8002a82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a2 	beq.w	8002a82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b57      	ldr	r3, [pc, #348]	@ (8002aa0 <HAL_GPIO_Init+0x2e8>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	4a56      	ldr	r2, [pc, #344]	@ (8002aa0 <HAL_GPIO_Init+0x2e8>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800294c:	6453      	str	r3, [r2, #68]	@ 0x44
 800294e:	4b54      	ldr	r3, [pc, #336]	@ (8002aa0 <HAL_GPIO_Init+0x2e8>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_GPIO_Init+0x2ec>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <HAL_GPIO_Init+0x2f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x202>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a48      	ldr	r2, [pc, #288]	@ (8002aac <HAL_GPIO_Init+0x2f4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x1fe>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a47      	ldr	r2, [pc, #284]	@ (8002ab0 <HAL_GPIO_Init+0x2f8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x1fa>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a46      	ldr	r2, [pc, #280]	@ (8002ab4 <HAL_GPIO_Init+0x2fc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x1f6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a45      	ldr	r2, [pc, #276]	@ (8002ab8 <HAL_GPIO_Init+0x300>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x1f2>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x204>
 80029aa:	2307      	movs	r3, #7
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x204>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x204>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x204>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x204>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	@ (8002aa4 <HAL_GPIO_Init+0x2ec>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_GPIO_Init+0x304>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a2f      	ldr	r2, [pc, #188]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a24      	ldr	r2, [pc, #144]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002abc <HAL_GPIO_Init+0x304>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f aea2 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e267      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	4b88      	ldr	r3, [pc, #544]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d00c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4b85      	ldr	r3, [pc, #532]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b82      	ldr	r3, [pc, #520]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	4b7e      	ldr	r3, [pc, #504]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e242      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x74>
 8002b26:	4b76      	ldr	r3, [pc, #472]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b70      	ldr	r3, [pc, #448]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6f      	ldr	r2, [pc, #444]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b58:	4b69      	ldr	r3, [pc, #420]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a68      	ldr	r2, [pc, #416]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b66      	ldr	r3, [pc, #408]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a65      	ldr	r2, [pc, #404]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fd98 	bl	80016ac <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fd94 	bl	80016ac <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e207      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b5b      	ldr	r3, [pc, #364]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fd84 	bl	80016ac <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fd80 	bl	80016ac <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1f3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b51      	ldr	r3, [pc, #324]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d063      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b47      	ldr	r3, [pc, #284]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b44      	ldr	r3, [pc, #272]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b41      	ldr	r3, [pc, #260]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1c7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b3b      	ldr	r3, [pc, #236]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4937      	ldr	r1, [pc, #220]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e03a      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fd39 	bl	80016ac <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fd35 	bl	80016ac <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1a8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b28      	ldr	r3, [pc, #160]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4925      	ldr	r1, [pc, #148]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd18 	bl	80016ac <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fe fd14 	bl	80016ac <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e187      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d036      	beq.n	8002d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fcf8 	bl	80016ac <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fcf4 	bl	80016ac <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e167      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x200>
 8002cde:	e01b      	b.n	8002d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fce1 	bl	80016ac <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	e00e      	b.n	8002d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe fcdd 	bl	80016ac <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d907      	bls.n	8002d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e150      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470000 	.word	0x42470000
 8002d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b88      	ldr	r3, [pc, #544]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ea      	bne.n	8002cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8097 	beq.w	8002e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b81      	ldr	r3, [pc, #516]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d46:	4b7a      	ldr	r3, [pc, #488]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b77      	ldr	r3, [pc, #476]	@ (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b74      	ldr	r3, [pc, #464]	@ (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a73      	ldr	r2, [pc, #460]	@ (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fc9d 	bl	80016ac <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fc99 	bl	80016ac <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e10c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b6a      	ldr	r3, [pc, #424]	@ (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x2ea>
 8002d9c:	4b64      	ldr	r3, [pc, #400]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a63      	ldr	r2, [pc, #396]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	e01c      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x30c>
 8002db2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002dcc:	4b58      	ldr	r3, [pc, #352]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	4a57      	ldr	r2, [pc, #348]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd8:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	4a54      	ldr	r2, [pc, #336]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fc5e 	bl	80016ac <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe fc5a 	bl	80016ac <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0cb      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	4b49      	ldr	r3, [pc, #292]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ee      	beq.n	8002df4 <HAL_RCC_OscConfig+0x334>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe fc48 	bl	80016ac <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fc44 	bl	80016ac <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0b5      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	4b3e      	ldr	r3, [pc, #248]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ee      	bne.n	8002e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	4a38      	ldr	r2, [pc, #224]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a1 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e5e:	4b34      	ldr	r3, [pc, #208]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d05c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d141      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc18 	bl	80016ac <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fc14 	bl	80016ac <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e087      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	4b27      	ldr	r3, [pc, #156]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	019b      	lsls	r3, r3, #6
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	491b      	ldr	r1, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fbed 	bl	80016ac <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fbe9 	bl	80016ac <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e05c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x416>
 8002ef4:	e054      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fbd6 	bl	80016ac <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fbd2 	bl	80016ac <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e045      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x444>
 8002f22:	e03d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e038      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d028      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d121      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d11a      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	3b01      	subs	r3, #1
 8002f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cc      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b68      	ldr	r3, [pc, #416]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d90c      	bls.n	8002fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d044      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b3f      	ldr	r3, [pc, #252]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3b      	ldr	r3, [pc, #236]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e067      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4934      	ldr	r1, [pc, #208]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fe fb04 	bl	80016ac <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe fb00 	bl	80016ac <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e04f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fa64 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08005158 	.word	0x08005158
 8003174:	20000004 	.word	0x20000004
 8003178:	20000008 	.word	0x20000008

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b094      	sub	sp, #80	@ 0x50
 8003182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	647b      	str	r3, [r7, #68]	@ 0x44
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003194:	4b79      	ldr	r3, [pc, #484]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00d      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 80e1 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ae:	e0db      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b73      	ldr	r3, [pc, #460]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80031b4:	e0db      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b6:	4b73      	ldr	r3, [pc, #460]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x208>)
 80031b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ba:	e0d8      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031bc:	4b6f      	ldr	r3, [pc, #444]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b6a      	ldr	r3, [pc, #424]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ebb2 0801 	subs.w	r8, r2, r1
 8003234:	4659      	mov	r1, fp
 8003236:	eb63 0901 	sbc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	462b      	mov	r3, r5
 800325c:	eb49 0303 	adc.w	r3, r9, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800326e:	4629      	mov	r1, r5
 8003270:	024b      	lsls	r3, r1, #9
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003278:	4621      	mov	r1, r4
 800327a:	024a      	lsls	r2, r1, #9
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800328c:	f7fc ffa4 	bl	80001d8 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003298:	e058      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b38      	ldr	r3, [pc, #224]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0159      	lsls	r1, r3, #5
 80032c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c6:	0150      	lsls	r0, r2, #5
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4641      	mov	r1, r8
 80032ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ec:	ebb2 040a 	subs.w	r4, r2, sl
 80032f0:	eb63 050b 	sbc.w	r5, r3, fp
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fc ff4a 	bl	80001d8 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800335c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 800336a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	@ 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08005168 	.word	0x08005168

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08005168 	.word	0x08005168

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd ff0c 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fe6e 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e041      	b.n	8003524 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f839 	bl	800352c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 fe1f 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_TIM_PWM_Start+0x24>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e022      	b.n	80035aa <HAL_TIM_PWM_Start+0x6a>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d109      	bne.n	800357e <HAL_TIM_PWM_Start+0x3e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e015      	b.n	80035aa <HAL_TIM_PWM_Start+0x6a>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d109      	bne.n	8003598 <HAL_TIM_PWM_Start+0x58>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e008      	b.n	80035aa <HAL_TIM_PWM_Start+0x6a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e068      	b.n	8003684 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x82>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c0:	e013      	b.n	80035ea <HAL_TIM_PWM_Start+0xaa>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0x92>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_PWM_Start+0xaa>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e0:	e003      	b.n	80035ea <HAL_TIM_PWM_Start+0xaa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f9ee 	bl	80049d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a23      	ldr	r2, [pc, #140]	@ (800368c <HAL_TIM_PWM_Start+0x14c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d107      	bne.n	8003612 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <HAL_TIM_PWM_Start+0x14c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_TIM_PWM_Start+0x10e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003624:	d013      	beq.n	800364e <HAL_TIM_PWM_Start+0x10e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_TIM_PWM_Start+0x150>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_TIM_PWM_Start+0x10e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a17      	ldr	r2, [pc, #92]	@ (8003694 <HAL_TIM_PWM_Start+0x154>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_TIM_PWM_Start+0x10e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <HAL_TIM_PWM_Start+0x158>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_PWM_Start+0x10e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <HAL_TIM_PWM_Start+0x15c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d010      	beq.n	8003682 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	e007      	b.n	8003682 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40010000 	.word	0x40010000
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40014000 	.word	0x40014000

080036a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e041      	b.n	8003736 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f839 	bl	800373e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fd16 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0x1e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e013      	b.n	800379a <HAL_TIM_IC_Start_IT+0x46>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_IT+0x2e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e00b      	b.n	800379a <HAL_TIM_IC_Start_IT+0x46>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_IT+0x3e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e003      	b.n	800379a <HAL_TIM_IC_Start_IT+0x46>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_IC_Start_IT+0x58>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e013      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0x80>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d104      	bne.n	80037bc <HAL_TIM_IC_Start_IT+0x68>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e00b      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0x80>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d104      	bne.n	80037cc <HAL_TIM_IC_Start_IT+0x78>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e003      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0x80>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d102      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037dc:	7b7b      	ldrb	r3, [r7, #13]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0c2      	b.n	800396c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f4:	e013      	b.n	800381e <HAL_TIM_IC_Start_IT+0xca>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_IC_Start_IT+0xb2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003804:	e00b      	b.n	800381e <HAL_TIM_IC_Start_IT+0xca>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_TIM_IC_Start_IT+0xc2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	e003      	b.n	800381e <HAL_TIM_IC_Start_IT+0xca>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0xda>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800382c:	e013      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x102>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d104      	bne.n	800383e <HAL_TIM_IC_Start_IT+0xea>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800383c:	e00b      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x102>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d104      	bne.n	800384e <HAL_TIM_IC_Start_IT+0xfa>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800384c:	e003      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x102>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d841      	bhi.n	80038e0 <HAL_TIM_IC_Start_IT+0x18c>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_IC_Start_IT+0x110>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003899 	.word	0x08003899
 8003868:	080038e1 	.word	0x080038e1
 800386c:	080038e1 	.word	0x080038e1
 8003870:	080038e1 	.word	0x080038e1
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038e1 	.word	0x080038e1
 800387c:	080038e1 	.word	0x080038e1
 8003880:	080038e1 	.word	0x080038e1
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038e1 	.word	0x080038e1
 800388c:	080038e1 	.word	0x080038e1
 8003890:	080038e1 	.word	0x080038e1
 8003894:	080038cf 	.word	0x080038cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0202 	orr.w	r2, r2, #2
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e01d      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0204 	orr.w	r2, r2, #4
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e014      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	60da      	str	r2, [r3, #12]
      break;
 80038cc:	e00b      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0210 	orr.w	r2, r2, #16
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e002      	b.n	80038e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d13e      	bne.n	800396a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f86d 	bl	80049d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <HAL_TIM_IC_Start_IT+0x220>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1e2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d013      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1e2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_TIM_IC_Start_IT+0x224>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1e2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_TIM_IC_Start_IT+0x228>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1e2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <HAL_TIM_IC_Start_IT+0x22c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1e2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a14      	ldr	r2, [pc, #80]	@ (8003984 <HAL_TIM_IC_Start_IT+0x230>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d010      	beq.n	800396a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	e007      	b.n	800396a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40014000 	.word	0x40014000

08003988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0202 	mvn.w	r2, #2
 80039bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fa1e 	bl	8000e14 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb7a 	bl	80040d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb81 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0204 	mvn.w	r2, #4
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd f9f8 	bl	8000e14 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fb54 	bl	80040d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fb5b 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d020      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0208 	mvn.w	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f9d2 	bl	8000e14 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fb2e 	bl	80040d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb35 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0210 	mvn.w	r2, #16
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f9ac 	bl	8000e14 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb08 	bl	80040d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb0f 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0201 	mvn.w	r2, #1
 8003aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fae6 	bl	80040c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fffc 	bl	8004b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fae0 	bl	80040fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00c      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0220 	mvn.w	r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 ffce 	bl	8004afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e088      	b.n	8003c98 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ba4:	f000 fd5e 	bl	8004664 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 020c 	bic.w	r2, r2, #12
 8003bb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	e060      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d11c      	bne.n	8003c0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003be2:	f000 fdd6 	bl	8004792 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bf4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6999      	ldr	r1, [r3, #24]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e040      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d11b      	bne.n	8003c4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c22:	f000 fe23 	bl	800486c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 020c 	bic.w	r2, r2, #12
 8003c34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69d9      	ldr	r1, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	61da      	str	r2, [r3, #28]
 8003c48:	e021      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d11c      	bne.n	8003c8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c60:	f000 fe40 	bl	80048e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69d9      	ldr	r1, [r3, #28]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	61da      	str	r2, [r3, #28]
 8003c88:	e001      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0ae      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	f200 809f 	bhi.w	8003e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003e0d 	.word	0x08003e0d
 8003cdc:	08003e0d 	.word	0x08003e0d
 8003ce0:	08003e0d 	.word	0x08003e0d
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003e0d 	.word	0x08003e0d
 8003cec:	08003e0d 	.word	0x08003e0d
 8003cf0:	08003e0d 	.word	0x08003e0d
 8003cf4:	08003d8b 	.word	0x08003d8b
 8003cf8:	08003e0d 	.word	0x08003e0d
 8003cfc:	08003e0d 	.word	0x08003e0d
 8003d00:	08003e0d 	.word	0x08003e0d
 8003d04:	08003dcb 	.word	0x08003dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fa8a 	bl	8004228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
      break;
 8003d46:	e064      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fad0 	bl	80042f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	619a      	str	r2, [r3, #24]
      break;
 8003d88:	e043      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fb1b 	bl	80043cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0208 	orr.w	r2, r2, #8
 8003da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0204 	bic.w	r2, r2, #4
 8003db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
      break;
 8003dc8:	e023      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fb65 	bl	80044a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	021a      	lsls	r2, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	61da      	str	r2, [r3, #28]
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIM_ConfigClockSource+0x1c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0b4      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x186>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e78:	d03e      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7e:	f200 8087 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_TIM_ConfigClockSource+0x172>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8e:	d87f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b70      	cmp	r3, #112	@ 0x70
 8003e92:	d01a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xa6>
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d87b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b60      	cmp	r3, #96	@ 0x60
 8003e9a:	d050      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x11a>
 8003e9c:	2b60      	cmp	r3, #96	@ 0x60
 8003e9e:	d877      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b50      	cmp	r3, #80	@ 0x50
 8003ea2:	d03c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0xfa>
 8003ea4:	2b50      	cmp	r3, #80	@ 0x50
 8003ea6:	d873      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d058      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x13a>
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d86f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d064      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d86b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d060      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d867      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d05a      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	e062      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	f000 fd5b 	bl	8004994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
      break;
 8003ef6:	e04f      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	f000 fd44 	bl	8004994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1a:	609a      	str	r2, [r3, #8]
      break;
 8003f1c:	e03c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fc02 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2150      	movs	r1, #80	@ 0x50
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fd11 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e02c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fc5e 	bl	800480c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2160      	movs	r1, #96	@ 0x60
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fd01 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e01c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fbe2 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	@ 0x40
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fcf1 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e00c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f000 fce8 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e000      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e031      	b.n	800402e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fda:	6839      	ldr	r1, [r7, #0]
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 faaf 	bl	8004540 <TIM_SlaveTimer_SetConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e018      	b.n	800402e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800401a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d831      	bhi.n	80040b0 <HAL_TIM_ReadCapturedValue+0x78>
 800404c:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <HAL_TIM_ReadCapturedValue+0x1c>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004089 	.word	0x08004089
 8004058:	080040b1 	.word	0x080040b1
 800405c:	080040b1 	.word	0x080040b1
 8004060:	080040b1 	.word	0x080040b1
 8004064:	08004093 	.word	0x08004093
 8004068:	080040b1 	.word	0x080040b1
 800406c:	080040b1 	.word	0x080040b1
 8004070:	080040b1 	.word	0x080040b1
 8004074:	0800409d 	.word	0x0800409d
 8004078:	080040b1 	.word	0x080040b1
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080040b1 	.word	0x080040b1
 8004084:	080040a7 	.word	0x080040a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	60fb      	str	r3, [r7, #12]

      break;
 8004090:	e00f      	b.n	80040b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	60fb      	str	r3, [r7, #12]

      break;
 800409a:	e00a      	b.n	80040b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	60fb      	str	r3, [r7, #12]

      break;
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	60fb      	str	r3, [r7, #12]

      break;
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040b0:	bf00      	nop
  }

  return tmpreg;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3a      	ldr	r2, [pc, #232]	@ (800420c <TIM_Base_SetConfig+0xfc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a37      	ldr	r2, [pc, #220]	@ (8004210 <TIM_Base_SetConfig+0x100>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a36      	ldr	r2, [pc, #216]	@ (8004214 <TIM_Base_SetConfig+0x104>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <TIM_Base_SetConfig+0x108>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2b      	ldr	r2, [pc, #172]	@ (800420c <TIM_Base_SetConfig+0xfc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01b      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004168:	d017      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a28      	ldr	r2, [pc, #160]	@ (8004210 <TIM_Base_SetConfig+0x100>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <TIM_Base_SetConfig+0x104>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <TIM_Base_SetConfig+0x108>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a25      	ldr	r2, [pc, #148]	@ (800421c <TIM_Base_SetConfig+0x10c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <TIM_Base_SetConfig+0x110>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a23      	ldr	r2, [pc, #140]	@ (8004224 <TIM_Base_SetConfig+0x114>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0e      	ldr	r2, [pc, #56]	@ (800420c <TIM_Base_SetConfig+0xfc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]
  }
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800

08004228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0201 	bic.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1c      	ldr	r2, [pc, #112]	@ (80042f0 <TIM_OC1_SetConfig+0xc8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10c      	bne.n	800429e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0308 	bic.w	r3, r3, #8
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <TIM_OC1_SetConfig+0xc8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d111      	bne.n	80042ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000

080042f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f023 0210 	bic.w	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <TIM_OC2_SetConfig+0xd4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10d      	bne.n	8004370 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <TIM_OC2_SetConfig+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d113      	bne.n	80043a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800437e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000

080043cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <TIM_OC3_SetConfig+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10d      	bne.n	8004446 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <TIM_OC3_SetConfig+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d113      	bne.n	8004476 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40010000 	.word	0x40010000

080044a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	031b      	lsls	r3, r3, #12
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a10      	ldr	r2, [pc, #64]	@ (800453c <TIM_OC4_SetConfig+0x9c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d109      	bne.n	8004514 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b70      	cmp	r3, #112	@ 0x70
 8004588:	d01a      	beq.n	80045c0 <TIM_SlaveTimer_SetConfig+0x80>
 800458a:	2b70      	cmp	r3, #112	@ 0x70
 800458c:	d860      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 800458e:	2b60      	cmp	r3, #96	@ 0x60
 8004590:	d054      	beq.n	800463c <TIM_SlaveTimer_SetConfig+0xfc>
 8004592:	2b60      	cmp	r3, #96	@ 0x60
 8004594:	d85c      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 8004596:	2b50      	cmp	r3, #80	@ 0x50
 8004598:	d046      	beq.n	8004628 <TIM_SlaveTimer_SetConfig+0xe8>
 800459a:	2b50      	cmp	r3, #80	@ 0x50
 800459c:	d858      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d019      	beq.n	80045d6 <TIM_SlaveTimer_SetConfig+0x96>
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d854      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 80045a6:	2b30      	cmp	r3, #48	@ 0x30
 80045a8:	d055      	beq.n	8004656 <TIM_SlaveTimer_SetConfig+0x116>
 80045aa:	2b30      	cmp	r3, #48	@ 0x30
 80045ac:	d850      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d051      	beq.n	8004656 <TIM_SlaveTimer_SetConfig+0x116>
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d84c      	bhi.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04d      	beq.n	8004656 <TIM_SlaveTimer_SetConfig+0x116>
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d04b      	beq.n	8004656 <TIM_SlaveTimer_SetConfig+0x116>
 80045be:	e047      	b.n	8004650 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	f000 f9e0 	bl	8004994 <TIM_ETR_SetConfig>
      break;
 80045d4:	e040      	b.n	8004658 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d101      	bne.n	80045e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e03b      	b.n	800465a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004608:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	4313      	orrs	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
      break;
 8004626:	e017      	b.n	8004658 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	461a      	mov	r2, r3
 8004636:	f000 f87d 	bl	8004734 <TIM_TI1_ConfigInputStage>
      break;
 800463a:	e00d      	b.n	8004658 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004648:	461a      	mov	r2, r3
 800464a:	f000 f8df 	bl	800480c <TIM_TI2_ConfigInputStage>
      break;
 800464e:	e003      	b.n	8004658 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	e000      	b.n	8004658 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004656:	bf00      	nop
  }

  return status;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 0201 	bic.w	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a24      	ldr	r2, [pc, #144]	@ (8004720 <TIM_TI1_SetConfig+0xbc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_TI1_SetConfig+0x56>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d00f      	beq.n	80046ba <TIM_TI1_SetConfig+0x56>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a21      	ldr	r2, [pc, #132]	@ (8004724 <TIM_TI1_SetConfig+0xc0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_TI1_SetConfig+0x56>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a20      	ldr	r2, [pc, #128]	@ (8004728 <TIM_TI1_SetConfig+0xc4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_TI1_SetConfig+0x56>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <TIM_TI1_SetConfig+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_TI1_SetConfig+0x56>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <TIM_TI1_SetConfig+0xcc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <TIM_TI1_SetConfig+0x5a>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <TIM_TI1_SetConfig+0x5c>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e003      	b.n	80046de <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f003 030a 	and.w	r3, r3, #10
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40014000 	.word	0x40014000

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0210 	bic.w	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	031b      	lsls	r3, r3, #12
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004848:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f023 0303 	bic.w	r3, r3, #3
 8004898:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004922:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	b29b      	uxth	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004936:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	031b      	lsls	r3, r3, #12
 800493c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	f043 0307 	orr.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2201      	movs	r2, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e050      	b.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a84:	d013      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a16      	ldr	r2, [pc, #88]	@ (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a13      	ldr	r2, [pc, #76]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10c      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000

08004afc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e042      	b.n	8004bbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fc80 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f82b 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	@ 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	@ (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fbb0 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe fb97 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d08:	f7fb fa66 	bl	80001d8 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d9e:	f7fb fa1b 	bl	80001d8 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	@ 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e5a:	f7fb f9bd 	bl	80001d8 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	@ 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	@ 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e106      	b.n	800509c <UART_SetConfig+0x4d8>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f1c:	f7fb f95c 	bl	80001d8 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fba:	f7fb f90d 	bl	80001d8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b38      	ldr	r3, [pc, #224]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	@ 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	@ 0x32
 8004fd8:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe4:	441c      	add	r4, r3
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005004:	4641      	mov	r1, r8
 8005006:	1851      	adds	r1, r2, r1
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	4649      	mov	r1, r9
 800500c:	414b      	adcs	r3, r1
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501c:	4659      	mov	r1, fp
 800501e:	00cb      	lsls	r3, r1, #3
 8005020:	4651      	mov	r1, sl
 8005022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005026:	4651      	mov	r1, sl
 8005028:	00ca      	lsls	r2, r1, #3
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	4603      	mov	r3, r0
 8005030:	4642      	mov	r2, r8
 8005032:	189b      	adds	r3, r3, r2
 8005034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005036:	464b      	mov	r3, r9
 8005038:	460a      	mov	r2, r1
 800503a:	eb42 0303 	adc.w	r3, r2, r3
 800503e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	663b      	str	r3, [r7, #96]	@ 0x60
 800504a:	667a      	str	r2, [r7, #100]	@ 0x64
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005058:	4649      	mov	r1, r9
 800505a:	008b      	lsls	r3, r1, #2
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005062:	4641      	mov	r1, r8
 8005064:	008a      	lsls	r2, r1, #2
 8005066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800506a:	f7fb f8b5 	bl	80001d8 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	@ 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	3332      	adds	r3, #50	@ 0x32
 8005086:	4a08      	ldr	r2, [pc, #32]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4422      	add	r2, r4
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	@ (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	@ (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	@ (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 f826 	bl	8005120 <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08005180 	.word	0x08005180
 80050f8:	08005180 	.word	0x08005180
 80050fc:	08005180 	.word	0x08005180
 8005100:	08005184 	.word	0x08005184

08005104 <memcpy>:
 8005104:	440a      	add	r2, r1
 8005106:	4291      	cmp	r1, r2
 8005108:	f100 33ff 	add.w	r3, r0, #4294967295
 800510c:	d100      	bne.n	8005110 <memcpy+0xc>
 800510e:	4770      	bx	lr
 8005110:	b510      	push	{r4, lr}
 8005112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800511a:	4291      	cmp	r1, r2
 800511c:	d1f9      	bne.n	8005112 <memcpy+0xe>
 800511e:	bd10      	pop	{r4, pc}

08005120 <_init>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr

0800512c <_fini>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr
