
term_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800bf40  0800bf40  0000cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1d0  0800c1d0  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1d0  0800c1d0  0000d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1d8  0800c1d8  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1d8  0800c1d8  0000d1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1dc  0800c1dc  0000d1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c1e0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000070  0800c250  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800c250  0000e418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a4  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ba  00000000  00000000  00027944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0002ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdb  00000000  00000000  0002bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e5c  00000000  00000000  0002cf0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192f8  00000000  00000000  00046d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e93c  00000000  00000000  0006005f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe99b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad8  00000000  00000000  000fe9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001044b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bf28 	.word	0x0800bf28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800bf28 	.word	0x0800bf28

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b0af      	sub	sp, #188	@ 0xbc
 8000e94:	af2a      	add	r7, sp, #168	@ 0xa8
 8000e96:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000ea8:	687c      	ldr	r4, [r7, #4]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000eae:	f107 030e 	add.w	r3, r7, #14
 8000eb2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000eb8:	4668      	mov	r0, sp
 8000eba:	f104 0310 	add.w	r3, r4, #16
 8000ebe:	229c      	movs	r2, #156	@ 0x9c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f008 fbcb 	bl	800965c <memcpy>
 8000ec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eca:	f001 fbb6 	bl	800263a <bno055_read_regs>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <bno055_init+0x4c>
        return err;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	e0b6      	b.n	800104a <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ee0:	d001      	beq.n	8000ee6 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e0b1      	b.n	800104a <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fa74 	bl	80023d6 <bno055_set_opmode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <bno055_init+0x6c>
        return err;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	e0a6      	b.n	800104a <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f003 ff0f 	bl	8004d20 <HAL_Delay>
    bno055_reset(imu);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fb53 	bl	80025ae <bno055_reset>
    HAL_Delay(5000);
 8000f08:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f0c:	f003 ff08 	bl	8004d20 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f001 faee 	bl	80024f4 <bno055_set_pwr_mode>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <bno055_init+0x96>
        return err;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	e091      	b.n	800104a <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f003 fefa 	bl	8004d20 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 fbe7 	bl	8002702 <bno055_set_page>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <bno055_init+0xb2>
        return err;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	e083      	b.n	800104a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000f42:	200c      	movs	r0, #12
 8000f44:	f003 feec 	bl	8004d20 <HAL_Delay>
    bno055_on(imu);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 fb53 	bl	80025f4 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 fa3e 	bl	80023d6 <bno055_set_opmode>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <bno055_init+0xd8>
        return err;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	e070      	b.n	800104a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000f68:	2018      	movs	r0, #24
 8000f6a:	f003 fed9 	bl	8004d20 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a38      	ldr	r2, [pc, #224]	@ (8001054 <bno055_init+0x1c4>)
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a38      	ldr	r2, [pc, #224]	@ (8001058 <bno055_init+0x1c8>)
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a37      	ldr	r2, [pc, #220]	@ (800105c <bno055_init+0x1cc>)
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a37      	ldr	r2, [pc, #220]	@ (8001060 <bno055_init+0x1d0>)
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a36      	ldr	r2, [pc, #216]	@ (8001064 <bno055_init+0x1d4>)
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a36      	ldr	r2, [pc, #216]	@ (8001068 <bno055_init+0x1d8>)
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a35      	ldr	r2, [pc, #212]	@ (800106c <bno055_init+0x1dc>)
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a35      	ldr	r2, [pc, #212]	@ (8001070 <bno055_init+0x1e0>)
 8000f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a34      	ldr	r2, [pc, #208]	@ (8001074 <bno055_init+0x1e4>)
 8000fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a34      	ldr	r2, [pc, #208]	@ (8001078 <bno055_init+0x1e8>)
 8000fa8:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a33      	ldr	r2, [pc, #204]	@ (800107c <bno055_init+0x1ec>)
 8000fae:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a33      	ldr	r2, [pc, #204]	@ (8001080 <bno055_init+0x1f0>)
 8000fb4:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a32      	ldr	r2, [pc, #200]	@ (8001084 <bno055_init+0x1f4>)
 8000fba:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <bno055_init+0x1f8>)
 8000fc0:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <bno055_init+0x1fc>)
 8000fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <bno055_init+0x200>)
 8000fcc:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a30      	ldr	r2, [pc, #192]	@ (8001094 <bno055_init+0x204>)
 8000fd2:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <bno055_init+0x208>)
 8000fd8:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <bno055_init+0x20c>)
 8000fde:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <bno055_init+0x210>)
 8000fe4:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <bno055_init+0x214>)
 8000fea:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a2e      	ldr	r2, [pc, #184]	@ (80010a8 <bno055_init+0x218>)
 8000ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80010ac <bno055_init+0x21c>)
 8000ff8:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80010b0 <bno055_init+0x220>)
 8000ffe:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a2c      	ldr	r2, [pc, #176]	@ (80010b4 <bno055_init+0x224>)
 8001004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a2b      	ldr	r2, [pc, #172]	@ (80010b8 <bno055_init+0x228>)
 800100c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <bno055_init+0x22c>)
 8001014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a29      	ldr	r2, [pc, #164]	@ (80010c0 <bno055_init+0x230>)
 800101c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <bno055_init+0x234>)
 8001024:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <bno055_init+0x238>)
 800102c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <bno055_init+0x23c>)
 8001034:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	@ (80010d0 <bno055_init+0x240>)
 800103c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a24      	ldr	r2, [pc, #144]	@ (80010d4 <bno055_init+0x244>)
 8001044:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	080010d9 	.word	0x080010d9
 8001058:	08001141 	.word	0x08001141
 800105c:	080011c1 	.word	0x080011c1
 8001060:	08001241 	.word	0x08001241
 8001064:	080012c1 	.word	0x080012c1
 8001068:	0800138d 	.word	0x0800138d
 800106c:	0800140d 	.word	0x0800140d
 8001070:	0800148d 	.word	0x0800148d
 8001074:	0800150d 	.word	0x0800150d
 8001078:	080015d9 	.word	0x080015d9
 800107c:	08001659 	.word	0x08001659
 8001080:	080016d9 	.word	0x080016d9
 8001084:	08001759 	.word	0x08001759
 8001088:	08001825 	.word	0x08001825
 800108c:	08001891 	.word	0x08001891
 8001090:	080018fd 	.word	0x080018fd
 8001094:	08001969 	.word	0x08001969
 8001098:	08001a1d 	.word	0x08001a1d
 800109c:	08001aa1 	.word	0x08001aa1
 80010a0:	08001b25 	.word	0x08001b25
 80010a4:	08001ba9 	.word	0x08001ba9
 80010a8:	08001c75 	.word	0x08001c75
 80010ac:	08001cf9 	.word	0x08001cf9
 80010b0:	08001d7d 	.word	0x08001d7d
 80010b4:	08001e01 	.word	0x08001e01
 80010b8:	08001ecd 	.word	0x08001ecd
 80010bc:	08001f3d 	.word	0x08001f3d
 80010c0:	08001fad 	.word	0x08001fad
 80010c4:	0800201d 	.word	0x0800201d
 80010c8:	0800208d 	.word	0x0800208d
 80010cc:	08002169 	.word	0x08002169
 80010d0:	08002239 	.word	0x08002239
 80010d4:	08002307 	.word	0x08002307

080010d8 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b0af      	sub	sp, #188	@ 0xbc
 80010dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80010e6:	687c      	ldr	r4, [r7, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80010ec:	f107 030e 	add.w	r3, r7, #14
 80010f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80010f2:	2334      	movs	r3, #52	@ 0x34
 80010f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80010f6:	4668      	mov	r0, sp
 80010f8:	f104 0310 	add.w	r3, r4, #16
 80010fc:	229c      	movs	r2, #156	@ 0x9c
 80010fe:	4619      	mov	r1, r3
 8001100:	f008 faac 	bl	800965c <memcpy>
 8001104:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001108:	f001 fa97 	bl	800263a <bno055_read_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <bno055_temperature+0x42>
        return err;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	e00d      	b.n	8001136 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7bdb      	ldrb	r3, [r3, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <bno055_temperature+0x54>
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	e001      	b.n	8001130 <bno055_temperature+0x58>
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	b25b      	sxtb	r3, r3
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
	...

08001140 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b0af      	sub	sp, #188	@ 0xbc
 8001144:	af2a      	add	r7, sp, #168	@ 0xa8
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800114a:	687c      	ldr	r4, [r7, #4]
 800114c:	2302      	movs	r3, #2
 800114e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001156:	2308      	movs	r3, #8
 8001158:	9327      	str	r3, [sp, #156]	@ 0x9c
 800115a:	4668      	mov	r0, sp
 800115c:	f104 0310 	add.w	r3, r4, #16
 8001160:	229c      	movs	r2, #156	@ 0x9c
 8001162:	4619      	mov	r1, r3
 8001164:	f008 fa7a 	bl	800965c <memcpy>
 8001168:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800116c:	f001 fa65 	bl	800263a <bno055_read_regs>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <bno055_acc_x+0x3e>
        return err;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	e019      	b.n	80011b2 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800117e:	7b7b      	ldrb	r3, [r7, #13]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <bno055_acc_x+0x62>
 800119c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011bc <bno055_acc_x+0x7c>
 80011a0:	e001      	b.n	80011a6 <bno055_acc_x+0x66>
 80011a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80011a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011b0:	2300      	movs	r3, #0
};
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	42c80000 	.word	0x42c80000

080011c0 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0af      	sub	sp, #188	@ 0xbc
 80011c4:	af2a      	add	r7, sp, #168	@ 0xa8
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011ca:	687c      	ldr	r4, [r7, #4]
 80011cc:	2302      	movs	r3, #2
 80011ce:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011d6:	230a      	movs	r3, #10
 80011d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011da:	4668      	mov	r0, sp
 80011dc:	f104 0310 	add.w	r3, r4, #16
 80011e0:	229c      	movs	r2, #156	@ 0x9c
 80011e2:	4619      	mov	r1, r3
 80011e4:	f008 fa3a 	bl	800965c <memcpy>
 80011e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ec:	f001 fa25 	bl	800263a <bno055_read_regs>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <bno055_acc_y+0x3e>
        return err;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	e019      	b.n	8001232 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <bno055_acc_y+0x62>
 800121c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800123c <bno055_acc_y+0x7c>
 8001220:	e001      	b.n	8001226 <bno055_acc_y+0x66>
 8001222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001230:	2300      	movs	r3, #0
};
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	42c80000 	.word	0x42c80000

08001240 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b0af      	sub	sp, #188	@ 0xbc
 8001244:	af2a      	add	r7, sp, #168	@ 0xa8
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800124a:	687c      	ldr	r4, [r7, #4]
 800124c:	2302      	movs	r3, #2
 800124e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001256:	230c      	movs	r3, #12
 8001258:	9327      	str	r3, [sp, #156]	@ 0x9c
 800125a:	4668      	mov	r0, sp
 800125c:	f104 0310 	add.w	r3, r4, #16
 8001260:	229c      	movs	r2, #156	@ 0x9c
 8001262:	4619      	mov	r1, r3
 8001264:	f008 f9fa 	bl	800965c <memcpy>
 8001268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800126c:	f001 f9e5 	bl	800263a <bno055_read_regs>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <bno055_acc_z+0x3e>
        return err;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	e019      	b.n	80012b2 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <bno055_acc_z+0x62>
 800129c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012bc <bno055_acc_z+0x7c>
 80012a0:	e001      	b.n	80012a6 <bno055_acc_z+0x66>
 80012a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012b0:	2300      	movs	r3, #0
};
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	42c80000 	.word	0x42c80000

080012c0 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b0b1      	sub	sp, #196	@ 0xc4
 80012c4:	af2a      	add	r7, sp, #168	@ 0xa8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012ca:	687c      	ldr	r4, [r7, #4]
 80012cc:	2306      	movs	r3, #6
 80012ce:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012d6:	2308      	movs	r3, #8
 80012d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012da:	4668      	mov	r0, sp
 80012dc:	f104 0310 	add.w	r3, r4, #16
 80012e0:	229c      	movs	r2, #156	@ 0x9c
 80012e2:	4619      	mov	r1, r3
 80012e4:	f008 f9ba 	bl	800965c <memcpy>
 80012e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ec:	f001 f9a5 	bl	800263a <bno055_read_regs>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <bno055_acc+0x3e>
        return err;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	e03f      	b.n	800137e <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <bno055_acc+0x4a>
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <bno055_acc+0xc8>)
 8001308:	e001      	b.n	800130e <bno055_acc+0x4e>
 800130a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7a3b      	ldrb	r3, [r7, #8]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001326:	ed97 7a04 	vldr	s14, [r7, #16]
 800132a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	7abb      	ldrb	r3, [r7, #10]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21b      	sxth	r3, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	ed97 7a04 	vldr	s14, [r7, #16]
 800134e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21b      	sxth	r3, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800137c:	2300      	movs	r3, #0
};
 800137e:	4618      	mov	r0, r3
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	42c80000 	.word	0x42c80000

0800138c <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0af      	sub	sp, #188	@ 0xbc
 8001390:	af2a      	add	r7, sp, #168	@ 0xa8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001396:	687c      	ldr	r4, [r7, #4]
 8001398:	2302      	movs	r3, #2
 800139a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013a2:	2328      	movs	r3, #40	@ 0x28
 80013a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013a6:	4668      	mov	r0, sp
 80013a8:	f104 0310 	add.w	r3, r4, #16
 80013ac:	229c      	movs	r2, #156	@ 0x9c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f008 f954 	bl	800965c <memcpy>
 80013b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b8:	f001 f93f 	bl	800263a <bno055_read_regs>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <bno055_linear_acc_x+0x3e>
        return err;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	e019      	b.n	80013fe <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013ca:	7b7b      	ldrb	r3, [r7, #13]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <bno055_linear_acc_x+0x62>
 80013e8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001408 <bno055_linear_acc_x+0x7c>
 80013ec:	e001      	b.n	80013f2 <bno055_linear_acc_x+0x66>
 80013ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013fc:	2300      	movs	r3, #0
};
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	42c80000 	.word	0x42c80000

0800140c <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0af      	sub	sp, #188	@ 0xbc
 8001410:	af2a      	add	r7, sp, #168	@ 0xa8
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2302      	movs	r3, #2
 800141a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001422:	232a      	movs	r3, #42	@ 0x2a
 8001424:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	@ 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f008 f914 	bl	800965c <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f001 f8ff 	bl	800263a <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_linear_acc_y+0x3e>
        return err;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	e019      	b.n	800147e <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800144a:	7b7b      	ldrb	r3, [r7, #13]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <bno055_linear_acc_y+0x62>
 8001468:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001488 <bno055_linear_acc_y+0x7c>
 800146c:	e001      	b.n	8001472 <bno055_linear_acc_y+0x66>
 800146e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800147c:	2300      	movs	r3, #0
};
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	42c80000 	.word	0x42c80000

0800148c <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b0af      	sub	sp, #188	@ 0xbc
 8001490:	af2a      	add	r7, sp, #168	@ 0xa8
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001496:	687c      	ldr	r4, [r7, #4]
 8001498:	2302      	movs	r3, #2
 800149a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014a2:	232c      	movs	r3, #44	@ 0x2c
 80014a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014a6:	4668      	mov	r0, sp
 80014a8:	f104 0310 	add.w	r3, r4, #16
 80014ac:	229c      	movs	r2, #156	@ 0x9c
 80014ae:	4619      	mov	r1, r3
 80014b0:	f008 f8d4 	bl	800965c <memcpy>
 80014b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b8:	f001 f8bf 	bl	800263a <bno055_read_regs>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <bno055_linear_acc_z+0x3e>
        return err;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	e019      	b.n	80014fe <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014ca:	7b7b      	ldrb	r3, [r7, #13]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <bno055_linear_acc_z+0x62>
 80014e8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001508 <bno055_linear_acc_z+0x7c>
 80014ec:	e001      	b.n	80014f2 <bno055_linear_acc_z+0x66>
 80014ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014fc:	2300      	movs	r3, #0
};
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	42c80000 	.word	0x42c80000

0800150c <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b0b1      	sub	sp, #196	@ 0xc4
 8001510:	af2a      	add	r7, sp, #168	@ 0xa8
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001516:	687c      	ldr	r4, [r7, #4]
 8001518:	2306      	movs	r3, #6
 800151a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001522:	2328      	movs	r3, #40	@ 0x28
 8001524:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001526:	4668      	mov	r0, sp
 8001528:	f104 0310 	add.w	r3, r4, #16
 800152c:	229c      	movs	r2, #156	@ 0x9c
 800152e:	4619      	mov	r1, r3
 8001530:	f008 f894 	bl	800965c <memcpy>
 8001534:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001538:	f001 f87f 	bl	800263a <bno055_read_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <bno055_linear_acc+0x3e>
        return err;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	e03f      	b.n	80015ca <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <bno055_linear_acc+0x4a>
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <bno055_linear_acc+0xc8>)
 8001554:	e001      	b.n	800155a <bno055_linear_acc+0x4e>
 8001556:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800155a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800155c:	7a7b      	ldrb	r3, [r7, #9]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7a3b      	ldrb	r3, [r7, #8]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001572:	ed97 7a04 	vldr	s14, [r7, #16]
 8001576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7abb      	ldrb	r3, [r7, #10]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001596:	ed97 7a04 	vldr	s14, [r7, #16]
 800159a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80015be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80015c8:	2300      	movs	r3, #0
};
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	42c80000 	.word	0x42c80000

080015d8 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b0af      	sub	sp, #188	@ 0xbc
 80015dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015e2:	687c      	ldr	r4, [r7, #4]
 80015e4:	2302      	movs	r3, #2
 80015e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80015ee:	2314      	movs	r3, #20
 80015f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80015f2:	4668      	mov	r0, sp
 80015f4:	f104 0310 	add.w	r3, r4, #16
 80015f8:	229c      	movs	r2, #156	@ 0x9c
 80015fa:	4619      	mov	r1, r3
 80015fc:	f008 f82e 	bl	800965c <memcpy>
 8001600:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001604:	f001 f819 	bl	800263a <bno055_read_regs>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bno055_gyro_x+0x3e>
        return err;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	e019      	b.n	800164a <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <bno055_gyro_x+0x62>
 8001634:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001638:	e001      	b.n	800163e <bno055_gyro_x+0x66>
 800163a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001654 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800163e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001648:	2300      	movs	r3, #0
};
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	44610000 	.word	0x44610000

08001658 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b0af      	sub	sp, #188	@ 0xbc
 800165c:	af2a      	add	r7, sp, #168	@ 0xa8
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001662:	687c      	ldr	r4, [r7, #4]
 8001664:	2302      	movs	r3, #2
 8001666:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800166e:	2316      	movs	r3, #22
 8001670:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001672:	4668      	mov	r0, sp
 8001674:	f104 0310 	add.w	r3, r4, #16
 8001678:	229c      	movs	r2, #156	@ 0x9c
 800167a:	4619      	mov	r1, r3
 800167c:	f007 ffee 	bl	800965c <memcpy>
 8001680:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001684:	f000 ffd9 	bl	800263a <bno055_read_regs>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <bno055_gyro_y+0x3e>
        return err;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	e019      	b.n	80016ca <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <bno055_gyro_y+0x62>
 80016b4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80016b8:	e001      	b.n	80016be <bno055_gyro_y+0x66>
 80016ba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80016d4 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80016be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016c8:	2300      	movs	r3, #0
};
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	44610000 	.word	0x44610000

080016d8 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b0af      	sub	sp, #188	@ 0xbc
 80016dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80016e2:	687c      	ldr	r4, [r7, #4]
 80016e4:	2302      	movs	r3, #2
 80016e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80016ee:	2318      	movs	r3, #24
 80016f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80016f2:	4668      	mov	r0, sp
 80016f4:	f104 0310 	add.w	r3, r4, #16
 80016f8:	229c      	movs	r2, #156	@ 0x9c
 80016fa:	4619      	mov	r1, r3
 80016fc:	f007 ffae 	bl	800965c <memcpy>
 8001700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001704:	f000 ff99 	bl	800263a <bno055_read_regs>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <bno055_gyro_z+0x3e>
        return err;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	e019      	b.n	800174a <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	7b3b      	ldrb	r3, [r7, #12]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21b      	sxth	r3, r3
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <bno055_gyro_z+0x62>
 8001734:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001738:	e001      	b.n	800173e <bno055_gyro_z+0x66>
 800173a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001754 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001748:	2300      	movs	r3, #0
};
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	44610000 	.word	0x44610000

08001758 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b0b1      	sub	sp, #196	@ 0xc4
 800175c:	af2a      	add	r7, sp, #168	@ 0xa8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001762:	687c      	ldr	r4, [r7, #4]
 8001764:	2306      	movs	r3, #6
 8001766:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800176e:	2314      	movs	r3, #20
 8001770:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001772:	4668      	mov	r0, sp
 8001774:	f104 0310 	add.w	r3, r4, #16
 8001778:	229c      	movs	r2, #156	@ 0x9c
 800177a:	4619      	mov	r1, r3
 800177c:	f007 ff6e 	bl	800965c <memcpy>
 8001780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001784:	f000 ff59 	bl	800263a <bno055_read_regs>
 8001788:	4603      	mov	r3, r0
 800178a:	75fb      	strb	r3, [r7, #23]
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <bno055_gyro+0x3e>
        return err;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	e03f      	b.n	8001816 <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <bno055_gyro+0x4c>
 800179e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017a2:	e000      	b.n	80017a6 <bno055_gyro+0x4e>
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017a6:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80017a8:	7a7b      	ldrb	r3, [r7, #9]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	7a3b      	ldrb	r3, [r7, #8]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017be:	ed97 7a04 	vldr	s14, [r7, #16]
 80017c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	7abb      	ldrb	r3, [r7, #10]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80017e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	7b3b      	ldrb	r3, [r7, #12]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001806:	ed97 7a04 	vldr	s14, [r7, #16]
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	44610000 	.word	0x44610000

08001824 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b0af      	sub	sp, #188	@ 0xbc
 8001828:	af2a      	add	r7, sp, #168	@ 0xa8
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 800182e:	687c      	ldr	r4, [r7, #4]
 8001830:	2302      	movs	r3, #2
 8001832:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	9328      	str	r3, [sp, #160]	@ 0xa0
 800183a:	230e      	movs	r3, #14
 800183c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800183e:	4668      	mov	r0, sp
 8001840:	f104 0310 	add.w	r3, r4, #16
 8001844:	229c      	movs	r2, #156	@ 0x9c
 8001846:	4619      	mov	r1, r3
 8001848:	f007 ff08 	bl	800965c <memcpy>
 800184c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001850:	f000 fef3 	bl	800263a <bno055_read_regs>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <bno055_mag_x+0x3e>
        return err;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e012      	b.n	8001888 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21a      	sxth	r2, r3
 8001868:	7b3b      	ldrb	r3, [r7, #12]
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001878:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800187c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b0af      	sub	sp, #188	@ 0xbc
 8001894:	af2a      	add	r7, sp, #168	@ 0xa8
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800189a:	687c      	ldr	r4, [r7, #4]
 800189c:	2302      	movs	r3, #2
 800189e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80018a6:	2310      	movs	r3, #16
 80018a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80018aa:	4668      	mov	r0, sp
 80018ac:	f104 0310 	add.w	r3, r4, #16
 80018b0:	229c      	movs	r2, #156	@ 0x9c
 80018b2:	4619      	mov	r1, r3
 80018b4:	f007 fed2 	bl	800965c <memcpy>
 80018b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018bc:	f000 febd 	bl	800263a <bno055_read_regs>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <bno055_mag_y+0x3e>
        return err;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	e012      	b.n	80018f4 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21b      	sxth	r3, r3
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}

080018fc <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b0af      	sub	sp, #188	@ 0xbc
 8001900:	af2a      	add	r7, sp, #168	@ 0xa8
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001906:	687c      	ldr	r4, [r7, #4]
 8001908:	2302      	movs	r3, #2
 800190a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001912:	2312      	movs	r3, #18
 8001914:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001916:	4668      	mov	r0, sp
 8001918:	f104 0310 	add.w	r3, r4, #16
 800191c:	229c      	movs	r2, #156	@ 0x9c
 800191e:	4619      	mov	r1, r3
 8001920:	f007 fe9c 	bl	800965c <memcpy>
 8001924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001928:	f000 fe87 	bl	800263a <bno055_read_regs>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <bno055_mag_z+0x3e>
        return err;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	e012      	b.n	8001960 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21a      	sxth	r2, r3
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b0af      	sub	sp, #188	@ 0xbc
 800196c:	af2a      	add	r7, sp, #168	@ 0xa8
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001972:	687c      	ldr	r4, [r7, #4]
 8001974:	2306      	movs	r3, #6
 8001976:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800197e:	230e      	movs	r3, #14
 8001980:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001982:	4668      	mov	r0, sp
 8001984:	f104 0310 	add.w	r3, r4, #16
 8001988:	229c      	movs	r2, #156	@ 0x9c
 800198a:	4619      	mov	r1, r3
 800198c:	f007 fe66 	bl	800965c <memcpy>
 8001990:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001994:	f000 fe51 	bl	800263a <bno055_read_regs>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <bno055_mag+0x3e>
        return err;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	e036      	b.n	8001a14 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019a6:	7a7b      	ldrb	r3, [r7, #9]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	7a3b      	ldrb	r3, [r7, #8]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	7b3b      	ldrb	r3, [r7, #12]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a04:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001a12:	2300      	movs	r3, #0
};
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}

08001a1c <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b0b1      	sub	sp, #196	@ 0xc4
 8001a20:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001a26:	687c      	ldr	r4, [r7, #4]
 8001a28:	2302      	movs	r3, #2
 8001a2a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a32:	232e      	movs	r3, #46	@ 0x2e
 8001a34:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a36:	4668      	mov	r0, sp
 8001a38:	f104 0310 	add.w	r3, r4, #16
 8001a3c:	229c      	movs	r2, #156	@ 0x9c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f007 fe0c 	bl	800965c <memcpy>
 8001a44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a48:	f000 fdf7 	bl	800263a <bno055_read_regs>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	75fb      	strb	r3, [r7, #23]
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <bno055_gravity_x+0x3e>
        return err;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	e01b      	b.n	8001a92 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <bno055_gravity_x+0x4a>
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <bno055_gravity_x+0x80>)
 8001a64:	e001      	b.n	8001a6a <bno055_gravity_x+0x4e>
 8001a66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a6a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	7b3b      	ldrb	r3, [r7, #12]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a82:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	42c80000 	.word	0x42c80000

08001aa0 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b0b1      	sub	sp, #196	@ 0xc4
 8001aa4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001aaa:	687c      	ldr	r4, [r7, #4]
 8001aac:	2302      	movs	r3, #2
 8001aae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ab6:	2330      	movs	r3, #48	@ 0x30
 8001ab8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001aba:	4668      	mov	r0, sp
 8001abc:	f104 0310 	add.w	r3, r4, #16
 8001ac0:	229c      	movs	r2, #156	@ 0x9c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f007 fdca 	bl	800965c <memcpy>
 8001ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001acc:	f000 fdb5 	bl	800263a <bno055_read_regs>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <bno055_gravity_y+0x3e>
        return err;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	e01b      	b.n	8001b16 <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <bno055_gravity_y+0x4a>
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <bno055_gravity_y+0x80>)
 8001ae8:	e001      	b.n	8001aee <bno055_gravity_y+0x4e>
 8001aea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001aee:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001af0:	7b7b      	ldrb	r3, [r7, #13]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	7b3b      	ldrb	r3, [r7, #12]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	42c80000 	.word	0x42c80000

08001b24 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b0b1      	sub	sp, #196	@ 0xc4
 8001b28:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001b2e:	687c      	ldr	r4, [r7, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b3a:	2332      	movs	r3, #50	@ 0x32
 8001b3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b3e:	4668      	mov	r0, sp
 8001b40:	f104 0310 	add.w	r3, r4, #16
 8001b44:	229c      	movs	r2, #156	@ 0x9c
 8001b46:	4619      	mov	r1, r3
 8001b48:	f007 fd88 	bl	800965c <memcpy>
 8001b4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b50:	f000 fd73 	bl	800263a <bno055_read_regs>
 8001b54:	4603      	mov	r3, r0
 8001b56:	75fb      	strb	r3, [r7, #23]
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <bno055_gravity_z+0x3e>
        return err;
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	e01b      	b.n	8001b9a <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <bno055_gravity_z+0x4a>
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <bno055_gravity_z+0x80>)
 8001b6c:	e001      	b.n	8001b72 <bno055_gravity_z+0x4e>
 8001b6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b72:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	7b3b      	ldrb	r3, [r7, #12]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	42c80000 	.word	0x42c80000

08001ba8 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b0b1      	sub	sp, #196	@ 0xc4
 8001bac:	af2a      	add	r7, sp, #168	@ 0xa8
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001bb2:	687c      	ldr	r4, [r7, #4]
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bbe:	232e      	movs	r3, #46	@ 0x2e
 8001bc0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bc2:	4668      	mov	r0, sp
 8001bc4:	f104 0310 	add.w	r3, r4, #16
 8001bc8:	229c      	movs	r2, #156	@ 0x9c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f007 fd46 	bl	800965c <memcpy>
 8001bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bd4:	f000 fd31 	bl	800263a <bno055_read_regs>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <bno055_gravity+0x3e>
        return err;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	e03f      	b.n	8001c66 <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <bno055_gravity+0x4a>
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <bno055_gravity+0xc8>)
 8001bf0:	e001      	b.n	8001bf6 <bno055_gravity+0x4e>
 8001bf2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bf6:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001bf8:	7a7b      	ldrb	r3, [r7, #9]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	7a3b      	ldrb	r3, [r7, #8]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7abb      	ldrb	r3, [r7, #10]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001c40:	7b7b      	ldrb	r3, [r7, #13]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	7b3b      	ldrb	r3, [r7, #12]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	42c80000 	.word	0x42c80000

08001c74 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b0b1      	sub	sp, #196	@ 0xc4
 8001c78:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001c7e:	687c      	ldr	r4, [r7, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001c8a:	231a      	movs	r3, #26
 8001c8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001c8e:	4668      	mov	r0, sp
 8001c90:	f104 0310 	add.w	r3, r4, #16
 8001c94:	229c      	movs	r2, #156	@ 0x9c
 8001c96:	4619      	mov	r1, r3
 8001c98:	f007 fce0 	bl	800965c <memcpy>
 8001c9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ca0:	f000 fccb 	bl	800263a <bno055_read_regs>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	e01b      	b.n	8001cea <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <bno055_euler_yaw+0x4c>
 8001cba:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001cbe:	e000      	b.n	8001cc2 <bno055_euler_yaw+0x4e>
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cc2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	7b3b      	ldrb	r3, [r7, #12]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	44610000 	.word	0x44610000

08001cf8 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b0b1      	sub	sp, #196	@ 0xc4
 8001cfc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001d02:	687c      	ldr	r4, [r7, #4]
 8001d04:	2302      	movs	r3, #2
 8001d06:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d0e:	231c      	movs	r3, #28
 8001d10:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d12:	4668      	mov	r0, sp
 8001d14:	f104 0310 	add.w	r3, r4, #16
 8001d18:	229c      	movs	r2, #156	@ 0x9c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f007 fc9e 	bl	800965c <memcpy>
 8001d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d24:	f000 fc89 	bl	800263a <bno055_read_regs>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	75fb      	strb	r3, [r7, #23]
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <bno055_euler_roll+0x3e>
        return err;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	e01b      	b.n	8001d6e <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <bno055_euler_roll+0x4c>
 8001d3e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d42:	e000      	b.n	8001d46 <bno055_euler_roll+0x4e>
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d46:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	44610000 	.word	0x44610000

08001d7c <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b0b1      	sub	sp, #196	@ 0xc4
 8001d80:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001d86:	687c      	ldr	r4, [r7, #4]
 8001d88:	2302      	movs	r3, #2
 8001d8a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d92:	231e      	movs	r3, #30
 8001d94:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d96:	4668      	mov	r0, sp
 8001d98:	f104 0310 	add.w	r3, r4, #16
 8001d9c:	229c      	movs	r2, #156	@ 0x9c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f007 fc5c 	bl	800965c <memcpy>
 8001da4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da8:	f000 fc47 	bl	800263a <bno055_read_regs>
 8001dac:	4603      	mov	r3, r0
 8001dae:	75fb      	strb	r3, [r7, #23]
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <bno055_euler_pitch+0x3e>
        return err;
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	e01b      	b.n	8001df2 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <bno055_euler_pitch+0x4c>
 8001dc2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001dc6:	e000      	b.n	8001dca <bno055_euler_pitch+0x4e>
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001dcc:	7b7b      	ldrb	r3, [r7, #13]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	7b3b      	ldrb	r3, [r7, #12]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001de2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	44610000 	.word	0x44610000

08001e00 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b0b1      	sub	sp, #196	@ 0xc4
 8001e04:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001e0a:	687c      	ldr	r4, [r7, #4]
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e16:	231a      	movs	r3, #26
 8001e18:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e1a:	4668      	mov	r0, sp
 8001e1c:	f104 0310 	add.w	r3, r4, #16
 8001e20:	229c      	movs	r2, #156	@ 0x9c
 8001e22:	4619      	mov	r1, r3
 8001e24:	f007 fc1a 	bl	800965c <memcpy>
 8001e28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2c:	f000 fc05 	bl	800263a <bno055_read_regs>
 8001e30:	4603      	mov	r3, r0
 8001e32:	75fb      	strb	r3, [r7, #23]
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	e03f      	b.n	8001ebe <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <bno055_euler+0x4c>
 8001e46:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e4a:	e000      	b.n	8001e4e <bno055_euler+0x4e>
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e4e:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001e50:	7a7b      	ldrb	r3, [r7, #9]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	7a3b      	ldrb	r3, [r7, #8]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	7abb      	ldrb	r3, [r7, #10]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001e98:	7b7b      	ldrb	r3, [r7, #13]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eae:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	44610000 	.word	0x44610000

08001ecc <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b0af      	sub	sp, #188	@ 0xbc
 8001ed0:	af2a      	add	r7, sp, #168	@ 0xa8
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001ed6:	687c      	ldr	r4, [r7, #4]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ee6:	4668      	mov	r0, sp
 8001ee8:	f104 0310 	add.w	r3, r4, #16
 8001eec:	229c      	movs	r2, #156	@ 0x9c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f007 fbb4 	bl	800965c <memcpy>
 8001ef4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ef8:	f000 fb9f 	bl	800263a <bno055_read_regs>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <bno055_quaternion_w+0x3e>
        return err;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	e012      	b.n	8001f30 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f20:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001f38 <bno055_quaternion_w+0x6c>
 8001f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	46800000 	.word	0x46800000

08001f3c <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b0af      	sub	sp, #188	@ 0xbc
 8001f40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f46:	687c      	ldr	r4, [r7, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f52:	2322      	movs	r3, #34	@ 0x22
 8001f54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f56:	4668      	mov	r0, sp
 8001f58:	f104 0310 	add.w	r3, r4, #16
 8001f5c:	229c      	movs	r2, #156	@ 0x9c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f007 fb7c 	bl	800965c <memcpy>
 8001f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f68:	f000 fb67 	bl	800263a <bno055_read_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <bno055_quaternion_x+0x3e>
        return err;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	e012      	b.n	8001fa0 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f7a:	7b7b      	ldrb	r3, [r7, #13]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f90:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001fa8 <bno055_quaternion_x+0x6c>
 8001f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	46800000 	.word	0x46800000

08001fac <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b0af      	sub	sp, #188	@ 0xbc
 8001fb0:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001fb6:	687c      	ldr	r4, [r7, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fc2:	2324      	movs	r3, #36	@ 0x24
 8001fc4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fc6:	4668      	mov	r0, sp
 8001fc8:	f104 0310 	add.w	r3, r4, #16
 8001fcc:	229c      	movs	r2, #156	@ 0x9c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f007 fb44 	bl	800965c <memcpy>
 8001fd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fd8:	f000 fb2f 	bl	800263a <bno055_read_regs>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <bno055_quaternion_y+0x3e>
        return err;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	e012      	b.n	8002010 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001fea:	7b7b      	ldrb	r3, [r7, #13]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	7b3b      	ldrb	r3, [r7, #12]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002000:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002018 <bno055_quaternion_y+0x6c>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	46800000 	.word	0x46800000

0800201c <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b0af      	sub	sp, #188	@ 0xbc
 8002020:	af2a      	add	r7, sp, #168	@ 0xa8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002026:	687c      	ldr	r4, [r7, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002032:	2326      	movs	r3, #38	@ 0x26
 8002034:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002036:	4668      	mov	r0, sp
 8002038:	f104 0310 	add.w	r3, r4, #16
 800203c:	229c      	movs	r2, #156	@ 0x9c
 800203e:	4619      	mov	r1, r3
 8002040:	f007 fb0c 	bl	800965c <memcpy>
 8002044:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002048:	f000 faf7 	bl	800263a <bno055_read_regs>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <bno055_quaternion_z+0x3e>
        return err;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	e012      	b.n	8002080 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	7b3b      	ldrb	r3, [r7, #12]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002070:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002088 <bno055_quaternion_z+0x6c>
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	46800000 	.word	0x46800000

0800208c <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b0b1      	sub	sp, #196	@ 0xc4
 8002090:	af2a      	add	r7, sp, #168	@ 0xa8
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8002096:	687c      	ldr	r4, [r7, #4]
 8002098:	2308      	movs	r3, #8
 800209a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020a2:	2320      	movs	r3, #32
 80020a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020a6:	4668      	mov	r0, sp
 80020a8:	f104 0310 	add.w	r3, r4, #16
 80020ac:	229c      	movs	r2, #156	@ 0x9c
 80020ae:	4619      	mov	r1, r3
 80020b0:	f007 fad4 	bl	800965c <memcpy>
 80020b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020b8:	f000 fabf 	bl	800263a <bno055_read_regs>
 80020bc:	4603      	mov	r3, r0
 80020be:	75fb      	strb	r3, [r7, #23]
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <bno055_quaternion+0x3e>
        return err;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	e048      	b.n	800215c <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020ca:	7b7b      	ldrb	r3, [r7, #13]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	7b3b      	ldrb	r3, [r7, #12]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002164 <bno055_quaternion+0xd8>
 80020e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002104:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002164 <bno055_quaternion+0xd8>
 8002108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8002112:	7c7b      	ldrb	r3, [r7, #17]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b21a      	sxth	r2, r3
 8002118:	7c3b      	ldrb	r3, [r7, #16]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002164 <bno055_quaternion+0xd8>
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	7cbb      	ldrb	r3, [r7, #18]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002164 <bno055_quaternion+0xd8>
 8002150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	46800000 	.word	0x46800000

08002168 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b0af      	sub	sp, #188	@ 0xbc
 800216c:	af2a      	add	r7, sp, #168	@ 0xa8
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	460b      	mov	r3, r1
 800217c:	70bb      	strb	r3, [r7, #2]
 800217e:	4613      	mov	r3, r2
 8002180:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002182:	2101      	movs	r1, #1
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fabc 	bl	8002702 <bno055_set_page>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <bno055_acc_conf+0x30>
        return err;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	e04b      	b.n	8002230 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002198:	2100      	movs	r1, #0
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f91b 	bl	80023d6 <bno055_set_opmode>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <bno055_acc_conf+0x46>
        return err;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	e040      	b.n	8002230 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021ae:	200c      	movs	r0, #12
 80021b0:	f002 fdb6 	bl	8004d20 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	4313      	orrs	r3, r2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80021c4:	687c      	ldr	r4, [r7, #4]
 80021c6:	2301      	movs	r3, #1
 80021c8:	9329      	str	r3, [sp, #164]	@ 0xa4
 80021ca:	f107 030e 	add.w	r3, r7, #14
 80021ce:	9328      	str	r3, [sp, #160]	@ 0xa0
 80021d0:	2308      	movs	r3, #8
 80021d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021d4:	4668      	mov	r0, sp
 80021d6:	f104 0310 	add.w	r3, r4, #16
 80021da:	229c      	movs	r2, #156	@ 0x9c
 80021dc:	4619      	mov	r1, r3
 80021de:	f007 fa3d 	bl	800965c <memcpy>
 80021e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021e6:	f000 fa5e 	bl	80026a6 <bno055_write_regs>
 80021ea:	4603      	mov	r3, r0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <bno055_acc_conf+0x90>
        return err;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	e01b      	b.n	8002230 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8e9 	bl	80023d6 <bno055_set_opmode>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <bno055_acc_conf+0xaa>
        return err;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	e00e      	b.n	8002230 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002212:	2018      	movs	r0, #24
 8002214:	f002 fd84 	bl	8004d20 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa71 	bl	8002702 <bno055_set_page>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <bno055_acc_conf+0xc6>
        return err;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	e000      	b.n	8002230 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}

08002238 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b0af      	sub	sp, #188	@ 0xbc
 800223c:	af2a      	add	r7, sp, #168	@ 0xa8
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	461a      	mov	r2, r3
 8002246:	4603      	mov	r3, r0
 8002248:	70fb      	strb	r3, [r7, #3]
 800224a:	460b      	mov	r3, r1
 800224c:	70bb      	strb	r3, [r7, #2]
 800224e:	4613      	mov	r3, r2
 8002250:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002252:	2101      	movs	r1, #1
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fa54 	bl	8002702 <bno055_set_page>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <bno055_gyr_conf+0x30>
        return err;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	e04a      	b.n	80022fe <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8b3 	bl	80023d6 <bno055_set_opmode>
 8002270:	4603      	mov	r3, r0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <bno055_gyr_conf+0x46>
        return err;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	e03f      	b.n	80022fe <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800227e:	200c      	movs	r0, #12
 8002280:	f002 fd4e 	bl	8004d20 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	78bb      	ldrb	r3, [r7, #2]
 8002288:	4313      	orrs	r3, r2
 800228a:	b2db      	uxtb	r3, r3
 800228c:	733b      	strb	r3, [r7, #12]
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8002292:	687c      	ldr	r4, [r7, #4]
 8002294:	2302      	movs	r3, #2
 8002296:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800229e:	230a      	movs	r3, #10
 80022a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022a2:	4668      	mov	r0, sp
 80022a4:	f104 0310 	add.w	r3, r4, #16
 80022a8:	229c      	movs	r2, #156	@ 0x9c
 80022aa:	4619      	mov	r1, r3
 80022ac:	f007 f9d6 	bl	800965c <memcpy>
 80022b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022b4:	f000 f9f7 	bl	80026a6 <bno055_write_regs>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	e01b      	b.n	80022fe <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	791b      	ldrb	r3, [r3, #4]
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f882 	bl	80023d6 <bno055_set_opmode>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <bno055_gyr_conf+0xa8>
        return err;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	e00e      	b.n	80022fe <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022e0:	2018      	movs	r0, #24
 80022e2:	f002 fd1d 	bl	8004d20 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022e6:	2100      	movs	r1, #0
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fa0a 	bl	8002702 <bno055_set_page>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <bno055_gyr_conf+0xc4>
        return err;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	e000      	b.n	80022fe <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}

08002306 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b0af      	sub	sp, #188	@ 0xbc
 800230a:	af2a      	add	r7, sp, #168	@ 0xa8
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	4608      	mov	r0, r1
 8002310:	4611      	mov	r1, r2
 8002312:	461a      	mov	r2, r3
 8002314:	4603      	mov	r3, r0
 8002316:	70fb      	strb	r3, [r7, #3]
 8002318:	460b      	mov	r3, r1
 800231a:	70bb      	strb	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002320:	2101      	movs	r1, #1
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9ed 	bl	8002702 <bno055_set_page>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <bno055_mag_conf+0x30>
        return err;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	e04b      	b.n	80023ce <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f84c 	bl	80023d6 <bno055_set_opmode>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <bno055_mag_conf+0x46>
        return err;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	e040      	b.n	80023ce <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800234c:	200c      	movs	r0, #12
 800234e:	f002 fce7 	bl	8004d20 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	78bb      	ldrb	r3, [r7, #2]
 8002356:	4313      	orrs	r3, r2
 8002358:	b2da      	uxtb	r2, r3
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	4313      	orrs	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8002362:	687c      	ldr	r4, [r7, #4]
 8002364:	2301      	movs	r3, #1
 8002366:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002368:	f107 030e 	add.w	r3, r7, #14
 800236c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800236e:	2309      	movs	r3, #9
 8002370:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002372:	4668      	mov	r0, sp
 8002374:	f104 0310 	add.w	r3, r4, #16
 8002378:	229c      	movs	r2, #156	@ 0x9c
 800237a:	4619      	mov	r1, r3
 800237c:	f007 f96e 	bl	800965c <memcpy>
 8002380:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002384:	f000 f98f 	bl	80026a6 <bno055_write_regs>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <bno055_mag_conf+0x90>
        return err;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	e01b      	b.n	80023ce <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f81a 	bl	80023d6 <bno055_set_opmode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <bno055_mag_conf+0xaa>
        return err;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	e00e      	b.n	80023ce <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023b0:	2018      	movs	r0, #24
 80023b2:	f002 fcb5 	bl	8004d20 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023b6:	2100      	movs	r1, #0
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f9a2 	bl	8002702 <bno055_set_page>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <bno055_mag_conf+0xc6>
        return err;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	e000      	b.n	80023ce <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}

080023d6 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80023d6:	b590      	push	{r4, r7, lr}
 80023d8:	b0af      	sub	sp, #188	@ 0xbc
 80023da:	af2a      	add	r7, sp, #168	@ 0xa8
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80023e2:	687c      	ldr	r4, [r7, #4]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80023e8:	1cfb      	adds	r3, r7, #3
 80023ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 80023ec:	233d      	movs	r3, #61	@ 0x3d
 80023ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 80023f0:	4668      	mov	r0, sp
 80023f2:	f104 0310 	add.w	r3, r4, #16
 80023f6:	229c      	movs	r2, #156	@ 0x9c
 80023f8:	4619      	mov	r1, r3
 80023fa:	f007 f92f 	bl	800965c <memcpy>
 80023fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002402:	f000 f950 	bl	80026a6 <bno055_write_regs>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	e003      	b.n	800241c <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002414:	2018      	movs	r0, #24
 8002416:	f002 fc83 	bl	8004d20 <HAL_Delay>
    return BNO_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0af      	sub	sp, #188	@ 0xbc
 8002428:	af2a      	add	r7, sp, #168	@ 0xa8
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	70fb      	strb	r3, [r7, #3]
 8002436:	460b      	mov	r3, r1
 8002438:	70bb      	strb	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800243e:	2100      	movs	r1, #0
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffc8 	bl	80023d6 <bno055_set_opmode>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <bno055_set_unit+0x30>
        return err;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	e04b      	b.n	80024ec <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f953 	bl	8002702 <bno055_set_page>
 800245c:	4603      	mov	r3, r0
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <bno055_set_unit+0x46>
        return err;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	e040      	b.n	80024ec <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	78bb      	ldrb	r3, [r7, #2]
 800246e:	4313      	orrs	r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	787b      	ldrb	r3, [r7, #1]
 8002474:	4313      	orrs	r3, r2
 8002476:	b2da      	uxtb	r2, r3
 8002478:	f897 3020 	ldrb.w	r3, [r7, #32]
 800247c:	4313      	orrs	r3, r2
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8002482:	687c      	ldr	r4, [r7, #4]
 8002484:	2301      	movs	r3, #1
 8002486:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002488:	f107 030e 	add.w	r3, r7, #14
 800248c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800248e:	233b      	movs	r3, #59	@ 0x3b
 8002490:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002492:	4668      	mov	r0, sp
 8002494:	f104 0310 	add.w	r3, r4, #16
 8002498:	229c      	movs	r2, #156	@ 0x9c
 800249a:	4619      	mov	r1, r3
 800249c:	f007 f8de 	bl	800965c <memcpy>
 80024a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024a4:	f000 f8ff 	bl	80026a6 <bno055_write_regs>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <bno055_set_unit+0x92>
        return err;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	e01a      	b.n	80024ec <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	78ba      	ldrb	r2, [r7, #2]
 80024ba:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	787a      	ldrb	r2, [r7, #1]
 80024c0:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024c8:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	791b      	ldrb	r3, [r3, #4]
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff7d 	bl	80023d6 <bno055_set_opmode>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <bno055_set_unit+0xc6>
        return err;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	e000      	b.n	80024ec <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b0af      	sub	sp, #188	@ 0xbc
 80024f8:	af2a      	add	r7, sp, #168	@ 0xa8
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002506:	2304      	movs	r3, #4
 8002508:	e04d      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800250a:	2100      	movs	r1, #0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff62 	bl	80023d6 <bno055_set_opmode>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <bno055_set_pwr_mode+0x2c>
        return err;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	e042      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002520:	2100      	movs	r1, #0
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8ed 	bl	8002702 <bno055_set_page>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <bno055_set_pwr_mode+0x42>
        return err;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	e037      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8002536:	687c      	ldr	r4, [r7, #4]
 8002538:	2301      	movs	r3, #1
 800253a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800253c:	1cfb      	adds	r3, r7, #3
 800253e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002540:	233e      	movs	r3, #62	@ 0x3e
 8002542:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002544:	4668      	mov	r0, sp
 8002546:	f104 0310 	add.w	r3, r4, #16
 800254a:	229c      	movs	r2, #156	@ 0x9c
 800254c:	4619      	mov	r1, r3
 800254e:	f007 f885 	bl	800965c <memcpy>
 8002552:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002556:	f000 f8a6 	bl	80026a6 <bno055_write_regs>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	e01e      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800256e:	2100      	movs	r1, #0
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8c6 	bl	8002702 <bno055_set_page>
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <bno055_set_pwr_mode+0x90>
        return err;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	e010      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff23 	bl	80023d6 <bno055_set_opmode>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <bno055_set_pwr_mode+0xaa>
        return err;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	e003      	b.n	80025a6 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800259e:	2002      	movs	r0, #2
 80025a0:	f002 fbbe 	bl	8004d20 <HAL_Delay>
    return BNO_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80025ae:	b590      	push	{r4, r7, lr}
 80025b0:	b0af      	sub	sp, #188	@ 0xbc
 80025b2:	af2a      	add	r7, sp, #168	@ 0xa8
 80025b4:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80025ba:	687c      	ldr	r4, [r7, #4]
 80025bc:	2301      	movs	r3, #1
 80025be:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025c0:	f107 030f 	add.w	r3, r7, #15
 80025c4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025c6:	233f      	movs	r3, #63	@ 0x3f
 80025c8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025ca:	4668      	mov	r0, sp
 80025cc:	f104 0310 	add.w	r3, r4, #16
 80025d0:	229c      	movs	r2, #156	@ 0x9c
 80025d2:	4619      	mov	r1, r3
 80025d4:	f007 f842 	bl	800965c <memcpy>
 80025d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025dc:	f000 f863 	bl	80026a6 <bno055_write_regs>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <bno055_reset+0x3e>
    }
    return BNO_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b0af      	sub	sp, #188	@ 0xbc
 80025f8:	af2a      	add	r7, sp, #168	@ 0xa8
 80025fa:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002600:	687c      	ldr	r4, [r7, #4]
 8002602:	2301      	movs	r3, #1
 8002604:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002606:	f107 030f 	add.w	r3, r7, #15
 800260a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800260c:	233f      	movs	r3, #63	@ 0x3f
 800260e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002610:	4668      	mov	r0, sp
 8002612:	f104 0310 	add.w	r3, r4, #16
 8002616:	229c      	movs	r2, #156	@ 0x9c
 8002618:	4619      	mov	r1, r3
 800261a:	f007 f81f 	bl	800965c <memcpy>
 800261e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002622:	f000 f840 	bl	80026a6 <bno055_write_regs>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <bno055_on+0x3e>
    }
    return BNO_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}

0800263a <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 800263a:	b084      	sub	sp, #16
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af02      	add	r7, sp, #8
 8002642:	f107 0c10 	add.w	ip, r7, #16
 8002646:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 800264a:	6938      	ldr	r0, [r7, #16]
 800264c:	7dbb      	ldrb	r3, [r7, #22]
 800264e:	4619      	mov	r1, r3
 8002650:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2301      	movs	r3, #1
 800265c:	f003 fb50 	bl	8005d00 <HAL_I2C_Master_Transmit>
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 800266a:	2301      	movs	r3, #1
 800266c:	e014      	b.n	8002698 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800266e:	6938      	ldr	r0, [r7, #16]
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	4619      	mov	r1, r3
 8002674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002678:	b29b      	uxth	r3, r3
 800267a:	f04f 32ff 	mov.w	r2, #4294967295
 800267e:	9200      	str	r2, [sp, #0]
 8002680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002684:	f003 fc3a 	bl	8005efc <HAL_I2C_Master_Receive>
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a2:	b004      	add	sp, #16
 80026a4:	4770      	bx	lr

080026a6 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80026a6:	b084      	sub	sp, #16
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	f107 0418 	add.w	r4, r7, #24
 80026b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80026b6:	69b8      	ldr	r0, [r7, #24]
 80026b8:	7fbb      	ldrb	r3, [r7, #30]
 80026ba:	461d      	mov	r5, r3
 80026bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026c6:	b299      	uxth	r1, r3
 80026c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f04f 34ff 	mov.w	r4, #4294967295
 80026d2:	9402      	str	r4, [sp, #8]
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	4629      	mov	r1, r5
 80026e0:	f003 fe3e 	bl	8006360 <HAL_I2C_Mem_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026fe:	b004      	add	sp, #16
 8002700:	4770      	bx	lr

08002702 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002702:	b590      	push	{r4, r7, lr}
 8002704:	b0af      	sub	sp, #188	@ 0xbc
 8002706:	af2a      	add	r7, sp, #168	@ 0xa8
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7b5a      	ldrb	r2, [r3, #13]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <bno055_set_page+0x1a>
        return BNO_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e024      	b.n	8002766 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d901      	bls.n	8002726 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002722:	2302      	movs	r3, #2
 8002724:	e01f      	b.n	8002766 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002726:	687c      	ldr	r4, [r7, #4]
 8002728:	2301      	movs	r3, #1
 800272a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800272c:	1cfb      	adds	r3, r7, #3
 800272e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002730:	2307      	movs	r3, #7
 8002732:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002734:	4668      	mov	r0, sp
 8002736:	f104 0310 	add.w	r3, r4, #16
 800273a:	229c      	movs	r2, #156	@ 0x9c
 800273c:	4619      	mov	r1, r3
 800273e:	f006 ff8d 	bl	800965c <memcpy>
 8002742:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002746:	f7ff ffae 	bl	80026a6 <bno055_write_regs>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <bno055_set_page+0x56>
        return err;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	e006      	b.n	8002766 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 800275e:	2002      	movs	r0, #2
 8002760:	f002 fade 	bl	8004d20 <HAL_Delay>
    return BNO_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}

0800276e <reset_controller>:
 */

#include "controller.h"

void reset_controller(ControllerTypeDef* con)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	con->kp = 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	605a      	str	r2, [r3, #4]
	con->kd = 0;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
	con->ki = 0;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
	con->des_val = 0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
	con->first_time = 1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	771a      	strb	r2, [r3, #28]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <set_gains>:

void set_gains(ControllerTypeDef* con, float kp, float kd, float ki)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80027b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80027b8:	ed87 1a00 	vstr	s2, [r7]
	con->kp = kp;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	605a      	str	r2, [r3, #4]
	con->kd = kd;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
	con->ki = ki;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	60da      	str	r2, [r3, #12]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <set_target>:

void set_target(ControllerTypeDef* con, float des_val)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	ed87 0a00 	vstr	s0, [r7]
	con->des_val = des_val;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <get_output>:

float get_output(ControllerTypeDef* con, float curr_val)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	ed87 0a00 	vstr	s0, [r7]
	float prop_err, der_err;
	uint32_t diff_time;
	uint32_t curr_time = HAL_GetTick();
 8002804:	f002 fa80 	bl	8004d08 <HAL_GetTick>
 8002808:	4603      	mov	r3, r0
 800280a:	61fb      	str	r3, [r7, #28]
	if (con->first_time){
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7f1b      	ldrb	r3, [r3, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <get_output+0x44>
		prop_err = (con->des_val)-curr_val;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	edd7 7a00 	vldr	s15, [r7]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		der_err = 0;
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
		con->int_err = 0;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
		con->first_time = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	771a      	strb	r2, [r3, #28]
 800283a:	e02e      	b.n	800289a <get_output+0xa2>
	}
	else{
		diff_time = curr_time-(con->prev_time);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	61bb      	str	r3, [r7, #24]
		prop_err = (con->des_val)-curr_val;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	edd7 7a00 	vldr	s15, [r7]
 8002850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002854:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		der_err = (prop_err-(con->prev_err))/diff_time;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a05 	vldr	s15, [r3, #20]
 800285e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002862:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002874:	edc7 7a08 	vstr	s15, [r7, #32]
		con->int_err += prop_err*diff_time;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	ed93 7a04 	vldr	s14, [r3, #16]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002888:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800288c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	float p_output = (con->kp)*prop_err;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edd3 7a01 	vldr	s15, [r3, #4]
 80028a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	edc7 7a05 	vstr	s15, [r7, #20]
	float d_output = (con->kd)*der_err;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80028b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ba:	edc7 7a04 	vstr	s15, [r7, #16]
	float i_output = (con->ki)*(con->int_err);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a03 	vstr	s15, [r7, #12]
	float output = p_output+d_output+i_output;
 80028d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80028d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	edc7 7a02 	vstr	s15, [r7, #8]

	con->prev_err = prop_err;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ee:	615a      	str	r2, [r3, #20]
	con->prev_time = curr_time;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	619a      	str	r2, [r3, #24]
	return output;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	ee07 3a90 	vmov	s15, r3
}
 80028fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002900:	3728      	adds	r7, #40	@ 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <enable_enc>:
 */

#include <encoder_driver.h>

void enable_enc(Encoder_DriverTypeDef* enc)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(enc->tim_handle, TIM_CHANNEL_ALL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	213c      	movs	r1, #60	@ 0x3c
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fa43 	bl	8007da0 <HAL_TIM_Encoder_Start>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <set_zero>:
{
	HAL_TIM_Encoder_Stop(enc->tim_handle, TIM_CHANNEL_ALL);
}

void set_zero(Encoder_DriverTypeDef* enc)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	enc->tot_count = 0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
	enc->pos = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	f5ad 7d5a 	sub.w	sp, sp, #872	@ 0x368
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800294c:	f002 f976 	bl	8004c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002950:	f000 f952 	bl	8002bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002954:	f000 fc3e 	bl	80031d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002958:	f000 f9b6 	bl	8002cc8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800295c:	f000 fa24 	bl	8002da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002960:	f000 fac2 	bl	8002ee8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002964:	f000 fb94 	bl	8003090 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8002968:	f000 fc0a 	bl	8003180 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800296c:	f000 f9ee 	bl	8002d4c <MX_I2C1_Init>
  MX_TIM4_Init();
 8002970:	f000 fb3a 	bl	8002fe8 <MX_TIM4_Init>
  // Driver Initializations

  // Initializing the motor driver structure and enabling the motor
  volatile int32_t duty_percent;
  volatile int32_t duty_count;
  const int32_t pulse = 4799;
 8002974:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8002978:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
  Motor_DriverTypeDef mot = { .tim_handle = &htim2,
 800297c:	4b97      	ldr	r3, [pc, #604]	@ (8002bdc <main+0x298>)
 800297e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8002988:	2304      	movs	r3, #4
 800298a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800298e:	2308      	movs	r3, #8
 8002990:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002994:	230c      	movs	r3, #12
 8002996:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800299a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800299e:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358

  // Initializing the servo motor driver structure and enabling the servo
  float servo_current_position;
  uint32_t CCR;
  float servo_angle;
  Servo_DriverTypeDef servo = { .pwmHandle = &htim5,
 80029a2:	4b8f      	ldr	r3, [pc, #572]	@ (8002be0 <main+0x29c>)
 80029a4:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 80029a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								.timer_ARR = 1919999       };
  //enable_servo(&servo);


  // Initializing the Radio Receiver structure and enabling the channel for inputs
  RadioReciever_DriverTypeDef rad = { .tim_handle = &htim1,
 80029ae:	4b8d      	ldr	r3, [pc, #564]	@ (8002be4 <main+0x2a0>)
 80029b0:	f507 7445 	add.w	r4, r7, #788	@ 0x314
 80029b4:	461d      	mov	r5, r3
 80029b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initializing the Photoresistors' structure
  uint32_t photo1, photo2, photo3, photo4;
  uint32_t photo_buff[4];

  Photoresistor_DriverTypeDef photo = { .adc_handle = &hadc1,
 80029c2:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	4b84      	ldr	r3, [pc, #528]	@ (8002be8 <main+0x2a4>)
 80029d6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80029da:	2306      	movs	r3, #6
 80029dc:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80029e0:	2307      	movs	r3, #7
 80029e2:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80029e6:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 80029ea:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300


  // Initializing the Encoder structure
  // NOTE: The purchased Encoder for this project has one non-functional output, meaning it can only read one direction and not as a quadrature
  int32_t count;
  Encoder_DriverTypeDef enc = { .tim_handle = &htim4,
 80029ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002bec <main+0x2a8>)
 80029f0:	f507 7433 	add.w	r4, r7, #716	@ 0x2cc
 80029f4:	461d      	mov	r5, r3
 80029f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  volatile char my_message[200];


  // Initializing Gyroscope I2C structure
  // Source: https://github.com/d-mironov/Bosch-BNO055-STM32/blob/main/examples/simple/Src/main.c
  bno055_euler_t euler = {0, 0, 0};
 8002a02:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a06:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a14:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a22:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  error_bno err;
  volatile float gyro_angle_x = 0;
 8002a2c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a30:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
  volatile float gyro_angle_y = 0;
 8002a3a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a3e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  volatile float gyro_angle_z = 0;
 8002a48:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a4c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

  bno055_t bno = (bno055_t){ .i2c = &hi2c1,
 8002a56:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a5a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a5e:	4618      	mov	r0, r3
 8002a60:	23ac      	movs	r3, #172	@ 0xac
 8002a62:	461a      	mov	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f006 fdc7 	bl	80095f8 <memset>
 8002a6a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a6e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a72:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf0 <main+0x2ac>)
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a7a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a7e:	2208      	movs	r2, #8
 8002a80:	711a      	strb	r2, [r3, #4]
 8002a82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a86:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a8a:	2228      	movs	r2, #40	@ 0x28
 8002a8c:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
  */


  // Controller Initialization
  ControllerTypeDef con = { .des_val = 0,
 8002a8e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a92:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8002a96:	4618      	mov	r0, r3
 8002a98:	2320      	movs	r3, #32
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f006 fdab 	bl	80095f8 <memset>
 8002aa2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002aa6:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8002aaa:	2201      	movs	r2, #1
 8002aac:	771a      	strb	r2, [r3, #28]
							.prev_time = 0,
							.first_time = 1, };

  // Task Initializations

  INTERTASK_VARS intertask_vars = { .rc_trigger_flag = 0,
 8002aae:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ab2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <main+0x2b0>)
 8002ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  	  	  	  	  	  	  	  	  	  .rad_edge_flag = &rad_edge_flag,	// EDIT: This should be an address bc its set outside of the tasks by an interrupt. The interrupt does not actually update the value in this struct, so we need to read the value at the address that it's stored in
  	  	  	  	  	  	  	  	  	  .htim_cb = &htim_cb			   };

  TASK1 task1 = { .state = 0,
 8002abe:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ac2:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ace:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002ad2:	f507 7251 	add.w	r2, r7, #836	@ 0x344
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002adc:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002ae0:	f507 724d 	add.w	r2, r7, #820	@ 0x334
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002aea:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002aee:	f507 7245 	add.w	r2, r7, #788	@ 0x314
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002af8:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002afc:	f507 723b 	add.w	r2, r7, #748	@ 0x2ec
 8002b00:	611a      	str	r2, [r3, #16]
 8002b02:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b06:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002b0a:	f507 7233 	add.w	r2, r7, #716	@ 0x2cc
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b14:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002b18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002b1c:	619a      	str	r2, [r3, #24]
				  .rad = &rad,
				  .photo = &photo,
				  .enc = &enc,
  	  	  	  	  .gyro = &bno	   };

  TASK2 task2 = { .state = 0,
 8002b1e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b22:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b26:	4618      	mov	r0, r3
 8002b28:	2344      	movs	r3, #68	@ 0x44
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f006 fd63 	bl	80095f8 <memset>
 8002b32:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b36:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b3a:	f507 7251 	add.w	r2, r7, #836	@ 0x344
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b44:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b48:	f507 724d 	add.w	r2, r7, #820	@ 0x334
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b52:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b56:	f507 7245 	add.w	r2, r7, #788	@ 0x314
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b60:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b64:	f507 723b 	add.w	r2, r7, #748	@ 0x2ec
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b6e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b72:	f507 7233 	add.w	r2, r7, #716	@ 0x2cc
 8002b76:	615a      	str	r2, [r3, #20]
 8002b78:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b7c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b80:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b8a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b8e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002b92:	61da      	str	r2, [r3, #28]
 8002b94:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b98:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2020 	strb.w	r2, [r3, #32]
 8002ba2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ba6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002baa:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  prev_time = HAL_GetTick();
 8002bb0:	f002 f8aa 	bl	8004d08 <HAL_GetTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
  while (1)
  {
	  // FSM
	  main_task1(&task1, &intertask_vars);
 8002bba:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002bbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 f8b9 	bl	8003d3c <main_task1>
	  main_task2(&task2, &intertask_vars);
 8002bca:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002bce:	463b      	mov	r3, r7
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f96c 	bl	8003eb0 <main_task2>
	  main_task1(&task1, &intertask_vars);
 8002bd8:	bf00      	nop
 8002bda:	e7ee      	b.n	8002bba <main+0x276>
 8002bdc:	20000170 	.word	0x20000170
 8002be0:	0800bf40 	.word	0x0800bf40
 8002be4:	0800bf50 	.word	0x0800bf50
 8002be8:	2000008c 	.word	0x2000008c
 8002bec:	0800bf70 	.word	0x0800bf70
 8002bf0:	200000d4 	.word	0x200000d4
 8002bf4:	0800bf90 	.word	0x0800bf90

08002bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b094      	sub	sp, #80	@ 0x50
 8002bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfe:	f107 0320 	add.w	r3, r7, #32
 8002c02:	2230      	movs	r2, #48	@ 0x30
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f006 fcf6 	bl	80095f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	4b27      	ldr	r3, [pc, #156]	@ (8002cc0 <SystemClock_Config+0xc8>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <SystemClock_Config+0xc8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2c:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <SystemClock_Config+0xc8>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <SystemClock_Config+0xcc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a20      	ldr	r2, [pc, #128]	@ (8002cc4 <SystemClock_Config+0xcc>)
 8002c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <SystemClock_Config+0xcc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c68:	2304      	movs	r3, #4
 8002c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002c6c:	2360      	movs	r3, #96	@ 0x60
 8002c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c74:	2304      	movs	r3, #4
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c78:	f107 0320 	add.w	r3, r7, #32
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f885 	bl	8006d8c <HAL_RCC_OscConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c88:	f000 fb0a 	bl	80032a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c8c:	230f      	movs	r3, #15
 8002c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c90:	2302      	movs	r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 fae7 	bl	800727c <HAL_RCC_ClockConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002cb4:	f000 faf4 	bl	80032a0 <Error_Handler>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3750      	adds	r7, #80	@ 0x50
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cce:	463b      	mov	r3, r7
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002cdc:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <MX_ADC1_Init+0x7c>)
 8002cde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002ce2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d48 <MX_ADC1_Init+0x80>)
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d16:	2204      	movs	r2, #4
 8002d18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d22:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d28:	4805      	ldr	r0, [pc, #20]	@ (8002d40 <MX_ADC1_Init+0x78>)
 8002d2a:	f002 f81d 	bl	8004d68 <HAL_ADC_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d34:	f000 fab4 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	2000008c 	.word	0x2000008c
 8002d44:	40012000 	.word	0x40012000
 8002d48:	0f000001 	.word	0x0f000001

08002d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <MX_I2C1_Init+0x54>)
 8002d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d58:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <MX_I2C1_Init+0x58>)
 8002d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	@ (8002d9c <MX_I2C1_Init+0x50>)
 8002d8a:	f002 fe75 	bl	8005a78 <HAL_I2C_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d94:	f000 fa84 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200000d4 	.word	0x200000d4
 8002da0:	40005400 	.word	0x40005400
 8002da4:	000186a0 	.word	0x000186a0

08002da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b090      	sub	sp, #64	@ 0x40
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002de2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002de4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee4 <MX_TIM1_Init+0x13c>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8002de8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002dea:	225f      	movs	r2, #95	@ 0x5f
 8002dec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002df6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e02:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b35      	ldr	r3, [pc, #212]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e0e:	4834      	ldr	r0, [pc, #208]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e10:	f004 fc54 	bl	80076bc <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e1a:	f000 fa41 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e22:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e28:	4619      	mov	r1, r3
 8002e2a:	482d      	ldr	r0, [pc, #180]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e2c:	f005 fa94 	bl	8008358 <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002e36:	f000 fa33 	bl	80032a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002e3a:	4829      	ldr	r0, [pc, #164]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e3c:	f004 fd96 	bl	800796c <HAL_TIM_IC_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002e46:	f000 fa2b 	bl	80032a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002e4e:	2350      	movs	r3, #80	@ 0x50
 8002e50:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	481e      	ldr	r0, [pc, #120]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e66:	f005 fb3e 	bl	80084e6 <HAL_TIM_SlaveConfigSynchro>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002e70:	f000 fa16 	bl	80032a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4814      	ldr	r0, [pc, #80]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002e8e:	f005 f905 	bl	800809c <HAL_TIM_IC_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002e98:	f000 fa02 	bl	80032a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002eae:	f005 f8f5 	bl	800809c <HAL_TIM_IC_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002eb8:	f000 f9f2 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <MX_TIM1_Init+0x138>)
 8002eca:	f006 f843 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002ed4:	f000 f9e4 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ed8:	bf00      	nop
 8002eda:	3740      	adds	r7, #64	@ 0x40
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000128 	.word	0x20000128
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	@ 0x38
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efc:	f107 0320 	add.w	r3, r7, #32
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f06:	1d3b      	adds	r3, r7, #4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	615a      	str	r2, [r3, #20]
 8002f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f18:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f20:	4b30      	ldr	r3, [pc, #192]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f2e:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002f32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f40:	4828      	ldr	r0, [pc, #160]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f42:	f004 fbbb 	bl	80076bc <HAL_TIM_Base_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002f4c:	f000 f9a8 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4821      	ldr	r0, [pc, #132]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f5e:	f005 f9fb 	bl	8008358 <HAL_TIM_ConfigClockSource>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002f68:	f000 f99a 	bl	80032a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f6c:	481d      	ldr	r0, [pc, #116]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f6e:	f004 fbf4 	bl	800775a <HAL_TIM_PWM_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002f78:	f000 f992 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f84:	f107 0320 	add.w	r3, r7, #32
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4816      	ldr	r0, [pc, #88]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002f8c:	f005 ffe2 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002f96:	f000 f983 	bl	80032a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f9a:	2360      	movs	r3, #96	@ 0x60
 8002f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002fb2:	f005 f90f 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002fbc:	f000 f970 	bl	80032a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4807      	ldr	r0, [pc, #28]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002fc8:	f005 f904 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002fd2:	f000 f965 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fd6:	4803      	ldr	r0, [pc, #12]	@ (8002fe4 <MX_TIM2_Init+0xfc>)
 8002fd8:	f000 fdb4 	bl	8003b44 <HAL_TIM_MspPostInit>

}
 8002fdc:	bf00      	nop
 8002fde:	3738      	adds	r7, #56	@ 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000170 	.word	0x20000170

08002fe8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	@ 0x30
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	2224      	movs	r2, #36	@ 0x24
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 fafe 	bl	80095f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003004:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003006:	4a21      	ldr	r2, [pc, #132]	@ (800308c <MX_TIM4_Init+0xa4>)
 8003008:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800300a:	4b1f      	ldr	r3, [pc, #124]	@ (8003088 <MX_TIM4_Init+0xa0>)
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003016:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800301c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301e:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003024:	4b18      	ldr	r3, [pc, #96]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800302a:	2303      	movs	r3, #3
 800302c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003032:	2301      	movs	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003042:	2301      	movs	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	4619      	mov	r1, r3
 8003054:	480c      	ldr	r0, [pc, #48]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003056:	f004 fdfd 	bl	8007c54 <HAL_TIM_Encoder_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003060:	f000 f91e 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	4619      	mov	r1, r3
 8003070:	4805      	ldr	r0, [pc, #20]	@ (8003088 <MX_TIM4_Init+0xa0>)
 8003072:	f005 ff6f 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800307c:	f000 f910 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	3730      	adds	r7, #48	@ 0x30
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200001b8 	.word	0x200001b8
 800308c:	40000800 	.word	0x40000800

08003090 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	@ 0x38
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a4:	f107 0320 	add.w	r3, r7, #32
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
 80030bc:	615a      	str	r2, [r3, #20]
 80030be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <MX_TIM5_Init+0xe8>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80030c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1919999;
 80030d2:	4b28      	ldr	r3, [pc, #160]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030d4:	4a29      	ldr	r2, [pc, #164]	@ (800317c <MX_TIM5_Init+0xec>)
 80030d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030de:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80030e4:	4823      	ldr	r0, [pc, #140]	@ (8003174 <MX_TIM5_Init+0xe4>)
 80030e6:	f004 fae9 	bl	80076bc <HAL_TIM_Base_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80030f0:	f000 f8d6 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80030fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030fe:	4619      	mov	r1, r3
 8003100:	481c      	ldr	r0, [pc, #112]	@ (8003174 <MX_TIM5_Init+0xe4>)
 8003102:	f005 f929 	bl	8008358 <HAL_TIM_ConfigClockSource>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800310c:	f000 f8c8 	bl	80032a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003110:	4818      	ldr	r0, [pc, #96]	@ (8003174 <MX_TIM5_Init+0xe4>)
 8003112:	f004 fb22 	bl	800775a <HAL_TIM_PWM_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800311c:	f000 f8c0 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003128:	f107 0320 	add.w	r3, r7, #32
 800312c:	4619      	mov	r1, r3
 800312e:	4811      	ldr	r0, [pc, #68]	@ (8003174 <MX_TIM5_Init+0xe4>)
 8003130:	f005 ff10 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800313a:	f000 f8b1 	bl	80032a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313e:	2360      	movs	r3, #96	@ 0x60
 8003140:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	220c      	movs	r2, #12
 8003152:	4619      	mov	r1, r3
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <MX_TIM5_Init+0xe4>)
 8003156:	f005 f83d 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8003160:	f000 f89e 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003164:	4803      	ldr	r0, [pc, #12]	@ (8003174 <MX_TIM5_Init+0xe4>)
 8003166:	f000 fced 	bl	8003b44 <HAL_TIM_MspPostInit>

}
 800316a:	bf00      	nop
 800316c:	3738      	adds	r7, #56	@ 0x38
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000200 	.word	0x20000200
 8003178:	40000c00 	.word	0x40000c00
 800317c:	001d4bff 	.word	0x001d4bff

08003180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 8003186:	4a12      	ldr	r2, [pc, #72]	@ (80031d0 <MX_USART2_UART_Init+0x50>)
 8003188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 800318c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003192:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800319e:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 80031a6:	2208      	movs	r2, #8
 80031a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031aa:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80031b6:	4805      	ldr	r0, [pc, #20]	@ (80031cc <MX_USART2_UART_Init+0x4c>)
 80031b8:	f005 ff4e 	bl	8009058 <HAL_HalfDuplex_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031c2:	f000 f86d 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000248 	.word	0x20000248
 80031d0:	40004400 	.word	0x40004400

080031d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <MX_GPIO_Init+0x94>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <MX_GPIO_Init+0x94>)
 80031f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <MX_GPIO_Init+0x94>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <MX_GPIO_Init+0x94>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <MX_GPIO_Init+0x94>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <MX_GPIO_Init+0x94>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <MX_GPIO_Init+0x94>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <MX_GPIO_Init+0x94>)
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	6313      	str	r3, [r2, #48]	@ 0x30
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <MX_GPIO_Init+0x94>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800323e:	2303      	movs	r3, #3
 8003240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800324e:	2302      	movs	r3, #2
 8003250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	4619      	mov	r1, r3
 8003258:	4804      	ldr	r0, [pc, #16]	@ (800326c <MX_GPIO_Init+0x98>)
 800325a:	f002 fa89 	bl	8005770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800325e:	bf00      	nop
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40020400 	.word	0x40020400

08003270 <HAL_TIM_IC_CaptureCallback>:
}*/

// Callback Functions

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	rad_edge_flag = 1;
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <HAL_TIM_IC_CaptureCallback+0x28>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
	htim_cb = *htim;
 800327e:	4a07      	ldr	r2, [pc, #28]	@ (800329c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	2348      	movs	r3, #72	@ 0x48
 8003288:	461a      	mov	r2, r3
 800328a:	f006 f9e7 	bl	800965c <memcpy>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002d8 	.word	0x200002d8
 800329c:	20000290 	.word	0x20000290

080032a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032a4:	b672      	cpsid	i
}
 80032a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <Error_Handler+0x8>

080032ac <enable_mot>:
 */


#include "motor_driver.h"

void enable_mot(Motor_DriverTypeDef* mot, uint32_t motor_num){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if(motor_num == 1){
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10f      	bne.n	80032dc <enable_mot+0x30>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f004 faa0 	bl	800780c <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f004 fa98 	bl	800780c <HAL_TIM_PWM_Start>
	}
	if(motor_num == 2){
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d10f      	bne.n	8003302 <enable_mot+0x56>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel3);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f004 fa8d 	bl	800780c <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel4);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f004 fa85 	bl	800780c <HAL_TIM_PWM_Start>
	}
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <set_PWM_percent>:
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel3);
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel4);
	}
}

void set_PWM_percent(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_cycle){
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
	int32_t duty_count = (duty_cycle*(mot->pulse))/100;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <set_PWM_percent+0x34>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	617b      	str	r3, [r7, #20]
	set_PWM(mot, motor_num, duty_count);
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f807 	bl	8003344 <set_PWM>
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	51eb851f 	.word	0x51eb851f

08003344 <set_PWM>:

void set_PWM(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_count){
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	if (motor_num == 1){
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d11c      	bne.n	8003390 <set_PWM+0x4c>
		if (duty_count <= 0){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dc0b      	bgt.n	8003374 <set_PWM+0x30>
			(*(mot->tim_handle)).Instance->CCR1 = -duty_count;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	425a      	negs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = 0;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel3,0);
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel4,duty_count);
		}
	}
}
 8003372:	e02c      	b.n	80033ce <set_PWM+0x8a>
		else if (duty_count >= 0){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db29      	blt.n	80033ce <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR1 = 0;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = duty_count;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800338e:	e01e      	b.n	80033ce <set_PWM+0x8a>
	else if (motor_num == 2){
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d11b      	bne.n	80033ce <set_PWM+0x8a>
		if (duty_count <= 0){
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	dc0b      	bgt.n	80033b4 <set_PWM+0x70>
			(*(mot->tim_handle)).Instance->CCR3 = -duty_count;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	425a      	negs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = 0;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033b2:	e00c      	b.n	80033ce <set_PWM+0x8a>
		else if (duty_count >= 0){
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db09      	blt.n	80033ce <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR3 = 0;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <ADC_Select_CH1>:
 *      Author: cadre
 */

#include "photoresistor_driver.h"

void ADC_Select_CH1(Photoresistor_DriverTypeDef* photo){
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_4;
 80033f0:	2304      	movs	r3, #4
 80033f2:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f107 0208 	add.w	r2, r7, #8
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fe72 	bl	80050f0 <HAL_ADC_ConfigChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <ADC_Select_CH1+0x3c>
    	 Error_Handler();
 8003412:	f7ff ff45 	bl	80032a0 <Error_Handler>
     }
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <ADC_Select_CH2>:

void ADC_Select_CH2 (Photoresistor_DriverTypeDef* photo){
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_5;
 8003434:	2305      	movs	r3, #5
 8003436:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f107 0208 	add.w	r2, r7, #8
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fe50 	bl	80050f0 <HAL_ADC_ConfigChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <ADC_Select_CH2+0x3c>
    	 Error_Handler();
 8003456:	f7ff ff23 	bl	80032a0 <Error_Handler>
     }
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <ADC_Select_CH3>:

void ADC_Select_CH3 (Photoresistor_DriverTypeDef* photo){
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_6;
 8003478:	2306      	movs	r3, #6
 800347a:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 800347c:	2301      	movs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f107 0208 	add.w	r2, r7, #8
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fe2e 	bl	80050f0 <HAL_ADC_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <ADC_Select_CH3+0x3c>
    	 Error_Handler();
 800349a:	f7ff ff01 	bl	80032a0 <Error_Handler>
     }
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <ADC_Select_CH4>:

void ADC_Select_CH4 (Photoresistor_DriverTypeDef* photo){
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
     sConfig.Channel = ADC_CHANNEL_7;
 80034bc:	2307      	movs	r3, #7
 80034be:	60bb      	str	r3, [r7, #8]
     sConfig.Rank = 1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
     if (HAL_ADC_ConfigChannel((photo->adc_handle), &sConfig) != HAL_OK){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f107 0208 	add.w	r2, r7, #8
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fe0c 	bl	80050f0 <HAL_ADC_ConfigChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <ADC_Select_CH4+0x3c>
    	 Error_Handler();
 80034de:	f7ff fedf 	bl	80032a0 <Error_Handler>
     }
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <get_photo_value>:

uint32_t get_photo_value(Photoresistor_DriverTypeDef* photo, uint8_t num)
{
 80034ea:	b590      	push	{r4, r7, lr}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
	if (num == 1){
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <get_photo_value+0x18>
		 ADC_Select_CH1(photo);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff6c 	bl	80033da <ADC_Select_CH1>
	}
	if (num == 2){
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d102      	bne.n	800350e <get_photo_value+0x24>
		 ADC_Select_CH2(photo);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff88 	bl	800341e <ADC_Select_CH2>
	}
	if (num == 3){
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d102      	bne.n	800351a <get_photo_value+0x30>
		 ADC_Select_CH3(photo);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ffa4 	bl	8003462 <ADC_Select_CH3>
	}
	if (num == 4){
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d102      	bne.n	8003526 <get_photo_value+0x3c>
		 ADC_Select_CH4(photo);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ffc0 	bl	80034a6 <ADC_Select_CH4>
	}
	  HAL_ADC_Start(photo->adc_handle);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fc60 	bl	8004df0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(photo->adc_handle, 1000);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fd40 	bl	8004fbe <HAL_ADC_PollForConversion>
	  photo->photo_results[(num-1)] = HAL_ADC_GetValue(photo->adc_handle);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800354c:	3b01      	subs	r3, #1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	18d4      	adds	r4, r2, r3
 8003552:	4608      	mov	r0, r1
 8003554:	f001 fdbe 	bl	80050d4 <HAL_ADC_GetValue>
 8003558:	4603      	mov	r3, r0
 800355a:	6023      	str	r3, [r4, #0]
	  HAL_ADC_Stop(photo->adc_handle);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fcf9 	bl	8004f58 <HAL_ADC_Stop>
	  return photo->photo_results[(num-1)];
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003570:	3b01      	subs	r3, #1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bd90      	pop	{r4, r7, pc}

08003580 <get_photo_diff>:

uint32_t get_photo_diff(Photoresistor_DriverTypeDef* photo, uint8_t num1, uint8_t num2)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
 800358c:	4613      	mov	r3, r2
 800358e:	70bb      	strb	r3, [r7, #2]
	uint32_t photo_result1 = get_photo_value(photo,num1);
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffa8 	bl	80034ea <get_photo_value>
 800359a:	60f8      	str	r0, [r7, #12]
	uint32_t photo_result2 = get_photo_value(photo,num2);
 800359c:	78bb      	ldrb	r3, [r7, #2]
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ffa2 	bl	80034ea <get_photo_value>
 80035a6:	60b8      	str	r0, [r7, #8]
	return (photo_result1-photo_result2);
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <enable_rad>:
 */

#include <radio_reciever_driver.h>

void enable_rad(RadioReciever_DriverTypeDef* rad)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	// Enabling the rising/falling edge interrupt
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f004 fa29 	bl	8007a20 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel2);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f004 fa21 	bl	8007a20 <HAL_TIM_IC_Start_IT>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <get_pulse>:
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel1);
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel2);
}

uint16_t get_pulse(RadioReciever_DriverTypeDef* rad)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
	if (rad->pulse_recieve_flag){
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d038      	beq.n	8003668 <get_pulse+0x82>
		// Calculate pulse width (in us) w/ overflow
		if (rad->IC_Fall < rad->IC_Rise){
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	89da      	ldrh	r2, [r3, #14]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	899b      	ldrh	r3, [r3, #12]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20a      	bcs.n	8003618 <get_pulse+0x32>
			rad->IC_Diff = (0xffff - rad->IC_Rise) + rad->IC_Fall;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	89da      	ldrh	r2, [r3, #14]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	899b      	ldrh	r3, [r3, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	821a      	strh	r2, [r3, #16]
 8003616:	e007      	b.n	8003628 <get_pulse+0x42>
		}
		else{
			rad->IC_Diff = rad->IC_Fall - rad->IC_Rise;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	89da      	ldrh	r2, [r3, #14]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	899b      	ldrh	r3, [r3, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	821a      	strh	r2, [r3, #16]
		}
		// Manage invalid values
		if (rad->IC_Diff < (2000*(1+rad->tol)) || rad->IC_Diff > (1000*(1-rad->tol))){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8a1b      	ldrh	r3, [r3, #16]
 800362c:	4619      	mov	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8a9b      	ldrh	r3, [r3, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	4299      	cmp	r1, r3
 800363e:	db0c      	blt.n	800365a <get_pulse+0x74>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8a1b      	ldrh	r3, [r3, #16]
 8003644:	4619      	mov	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8a9b      	ldrh	r3, [r3, #20]
 800364a:	f1c3 0301 	rsb	r3, r3, #1
 800364e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4299      	cmp	r1, r3
 8003658:	dd03      	ble.n	8003662 <get_pulse+0x7c>
			rad->pulse_width = rad->IC_Diff;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8a1a      	ldrh	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	825a      	strh	r2, [r3, #18]
		}
		rad->pulse_recieve_flag = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
	}
	return rad->pulse_width;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8a5b      	ldrh	r3, [r3, #18]
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <read_pulse>:

void read_pulse(RadioReciever_DriverTypeDef* rad, TIM_HandleTypeDef* htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	if (htim->Instance == rad->tim_handle->Instance && !(rad->pulse_recieve_flag)){
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d11e      	bne.n	80036ce <read_pulse+0x56>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11a      	bne.n	80036ce <read_pulse+0x56>
		if (rad->rise_flag){
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <read_pulse+0x50>
			rad->IC_Rise = 0;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	819a      	strh	r2, [r3, #12]
			rad->IC_Fall = HAL_TIM_ReadCapturedValue(htim, rad->tim_channel2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	f004 ff5d 	bl	800856c <HAL_TIM_ReadCapturedValue>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	81da      	strh	r2, [r3, #14]
			rad->pulse_recieve_flag = 1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	619a      	str	r2, [r3, #24]
			rad->rise_flag = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	61da      	str	r2, [r3, #28]
		}
		else{
			rad->rise_flag = 1;
		}
	}
}
 80036c6:	e002      	b.n	80036ce <read_pulse+0x56>
			rad->rise_flag = 1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	61da      	str	r2, [r3, #28]
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <enable_servo>:
 *      Author: evananthony
 */

#include "servo_driver.h"

void enable_servo(Servo_DriverTypeDef* servo){
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	// Enables servo motor PWM output channel
	HAL_TIM_PWM_Start(servo->pwmHandle, servo->timer_ch);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f004 f88f 	bl	800780c <HAL_TIM_PWM_Start>

}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <servo_get_position>:
	// Disables servo motor PWM output channel
	HAL_TIM_PWM_Stop(servo->pwmHandle, servo->timer_ch);

}

float servo_get_position(Servo_DriverTypeDef* servo){
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	// Gets the current position of the servo relative to the initial position
	float position;
	float PW = (((float)(servo->current_CCR)*20)/(float)(servo->timer_ARR + 1));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003710:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003726:	edc7 7a03 	vstr	s15, [r7, #12]
	position = (90*PW) - 135 + 5;
 800372a:	edd7 7a03 	vldr	s15, [r7, #12]
 800372e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003760 <servo_get_position+0x68>
 8003732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003736:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003764 <servo_get_position+0x6c>
 800373a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800373e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003746:	edc7 7a02 	vstr	s15, [r7, #8]
	return position;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	ee07 3a90 	vmov	s15, r3
}
 8003750:	eeb0 0a67 	vmov.f32	s0, s15
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	42b40000 	.word	0x42b40000
 8003764:	43070000 	.word	0x43070000

08003768 <servo_set_position>:

void servo_set_position(Servo_DriverTypeDef* servo, float angle){
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	ed87 0a00 	vstr	s0, [r7]
	// Sets the current position of the servo to an angle from -90 to 90 degrees
	float PW = (angle + 135 - 5) / 90;
 8003774:	edd7 7a00 	vldr	s15, [r7]
 8003778:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003840 <servo_set_position+0xd8>
 800377c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003780:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003784:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003788:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8003844 <servo_set_position+0xdc>
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	edc7 7a03 	vstr	s15, [r7, #12]
	float CCR = (PW * (servo->timer_ARR + 1)) / 20;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037aa:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80037ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b2:	edc7 7a02 	vstr	s15, [r7, #8]
	servo->current_CCR = (uint32_t)CCR;
 80037b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037be:	ee17 2a90 	vmov	r2, s15
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <servo_set_position+0x7c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037dc:	ee17 2a90 	vmov	r2, s15
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037e2:	e027      	b.n	8003834 <servo_set_position+0xcc>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d10a      	bne.n	8003802 <servo_set_position+0x9a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fa:	ee17 3a90 	vmov	r3, s15
 80037fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003800:	e018      	b.n	8003834 <servo_set_position+0xcc>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d10a      	bne.n	8003820 <servo_set_position+0xb8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	edd7 7a02 	vldr	s15, [r7, #8]
 8003814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003818:	ee17 3a90 	vmov	r3, s15
 800381c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800381e:	e009      	b.n	8003834 <servo_set_position+0xcc>
	__HAL_TIM_SET_COMPARE(servo->pwmHandle, servo->timer_ch, CCR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	edd7 7a02 	vldr	s15, [r7, #8]
 800382a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382e:	ee17 3a90 	vmov	r3, s15
 8003832:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	43070000 	.word	0x43070000
 8003844:	42b40000 	.word	0x42b40000

08003848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_MspInit+0x4c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	4a0f      	ldr	r2, [pc, #60]	@ (8003894 <HAL_MspInit+0x4c>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800385c:	6453      	str	r3, [r2, #68]	@ 0x44
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_MspInit+0x4c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <HAL_MspInit+0x4c>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <HAL_MspInit+0x4c>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_MspInit+0x4c>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <HAL_ADC_MspInit+0x7c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d127      	bne.n	800390a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ca:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	4a0e      	ldr	r2, [pc, #56]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_ADC_MspInit+0x80>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038f2:	23f0      	movs	r3, #240	@ 0xf0
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038f6:	2303      	movs	r3, #3
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	@ (800391c <HAL_ADC_MspInit+0x84>)
 8003906:	f001 ff33 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800390a:	bf00      	nop
 800390c:	3728      	adds	r7, #40	@ 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40012000 	.word	0x40012000
 8003918:	40023800 	.word	0x40023800
 800391c:	40020000 	.word	0x40020000

08003920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	@ 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	@ (80039a4 <HAL_I2C_MspInit+0x84>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12c      	bne.n	800399c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800395e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003964:	2312      	movs	r3, #18
 8003966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	2303      	movs	r3, #3
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003970:	2304      	movs	r3, #4
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	480c      	ldr	r0, [pc, #48]	@ (80039ac <HAL_I2C_MspInit+0x8c>)
 800397c:	f001 fef8 	bl	8005770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	4a07      	ldr	r2, [pc, #28]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 800398a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800398e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_I2C_MspInit+0x88>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800399c:	bf00      	nop
 800399e:	3728      	adds	r7, #40	@ 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40005400 	.word	0x40005400
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020400 	.word	0x40020400

080039b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08c      	sub	sp, #48	@ 0x30
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <HAL_TIM_Base_MspInit+0xe4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d135      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4a2f      	ldr	r2, [pc, #188]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fe:	4b26      	ldr	r3, [pc, #152]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	481d      	ldr	r0, [pc, #116]	@ (8003a9c <HAL_TIM_Base_MspInit+0xec>)
 8003a28:	f001 fea2 	bl	8005770 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	201b      	movs	r0, #27
 8003a32:	f001 fe66 	bl	8005702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003a36:	201b      	movs	r0, #27
 8003a38:	f001 fe7f 	bl	800573a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003a3c:	e026      	b.n	8003a8c <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a46:	d10e      	bne.n	8003a66 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	4a11      	ldr	r2, [pc, #68]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
}
 8003a64:	e012      	b.n	8003a8c <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM5)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <HAL_TIM_Base_MspInit+0xf0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10d      	bne.n	8003a8c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	4a07      	ldr	r2, [pc, #28]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_TIM_Base_MspInit+0xe8>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3730      	adds	r7, #48	@ 0x30
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	40000c00 	.word	0x40000c00

08003aa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	@ 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <HAL_TIM_Encoder_MspInit+0x94>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d133      	bne.n	8003b2e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	4b1c      	ldr	r3, [pc, #112]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad6:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b15      	ldr	r3, [pc, #84]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003aec:	f043 0302 	orr.w	r3, r3, #2
 8003af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_TIM_Encoder_MspInit+0x98>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afe:	23c0      	movs	r3, #192	@ 0xc0
 8003b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4619      	mov	r1, r3
 8003b18:	4809      	ldr	r0, [pc, #36]	@ (8003b40 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003b1a:	f001 fe29 	bl	8005770 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2100      	movs	r1, #0
 8003b22:	201e      	movs	r0, #30
 8003b24:	f001 fded 	bl	8005702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b28:	201e      	movs	r0, #30
 8003b2a:	f001 fe06 	bl	800573a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	@ 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020400 	.word	0x40020400

08003b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d11e      	bne.n	8003ba4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b76:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b82:	2303      	movs	r3, #3
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b92:	2301      	movs	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4816      	ldr	r0, [pc, #88]	@ (8003bf8 <HAL_TIM_MspPostInit+0xb4>)
 8003b9e:	f001 fde7 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003ba2:	e022      	b.n	8003bea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a14      	ldr	r2, [pc, #80]	@ (8003bfc <HAL_TIM_MspPostInit+0xb8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d11d      	bne.n	8003bea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_TIM_MspPostInit+0xb0>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bca:	2308      	movs	r3, #8
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	4804      	ldr	r0, [pc, #16]	@ (8003bf8 <HAL_TIM_MspPostInit+0xb4>)
 8003be6:	f001 fdc3 	bl	8005770 <HAL_GPIO_Init>
}
 8003bea:	bf00      	nop
 8003bec:	3728      	adds	r7, #40	@ 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40000c00 	.word	0x40000c00

08003c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <HAL_UART_MspInit+0x84>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d12b      	bne.n	8003c7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a10      	ldr	r2, [pc, #64]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c5e:	2312      	movs	r3, #18
 8003c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4619      	mov	r1, r3
 8003c74:	4805      	ldr	r0, [pc, #20]	@ (8003c8c <HAL_UART_MspInit+0x8c>)
 8003c76:	f001 fd7b 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	@ 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40004400 	.word	0x40004400
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000

08003c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <NMI_Handler+0x4>

08003c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <HardFault_Handler+0x4>

08003ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <MemManage_Handler+0x4>

08003ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <BusFault_Handler+0x4>

08003cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <UsageFault_Handler+0x4>

08003cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce6:	f000 fffb 	bl	8004ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cf4:	4802      	ldr	r0, [pc, #8]	@ (8003d00 <TIM1_CC_IRQHandler+0x10>)
 8003cf6:	f004 f8e1 	bl	8007ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000128 	.word	0x20000128

08003d04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <TIM4_IRQHandler+0x10>)
 8003d0a:	f004 f8d7 	bl	8007ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200001b8 	.word	0x200001b8

08003d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <SystemInit+0x20>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <SystemInit+0x20>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <main_task1>:
 */

#include <task1.h>

void main_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	if(task->state == 0){
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <main_task1+0x1c>
		state0_task1(task, intertask_vars);
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f816 	bl	8003d82 <state0_task1>
		state1_task1(task, intertask_vars);
	}
	else if(task->state == 2){
		state2_task1(task, intertask_vars);
	}
}
 8003d56:	e010      	b.n	8003d7a <main_task1+0x3e>
	else if(task->state == 1){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d104      	bne.n	8003d6a <main_task1+0x2e>
		state1_task1(task, intertask_vars);
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f81e 	bl	8003da4 <state1_task1>
}
 8003d68:	e007      	b.n	8003d7a <main_task1+0x3e>
	else if(task->state == 2){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d103      	bne.n	8003d7a <main_task1+0x3e>
		state2_task1(task, intertask_vars);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f83d 	bl	8003df4 <state2_task1>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <state0_task1>:

void state0_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
	// Initializing the radio receiver
	enable_rad(task->rad);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fc10 	bl	80035b6 <enable_rad>
	task->state = 1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <state1_task1>:

void state1_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
	// Reading the value of the Radio Receiver after each period
	if (*(intertask_vars->rad_edge_flag)){
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <state1_task1+0x2c>
		read_pulse(task->rad, intertask_vars->htim_cb); // EDIT: This should work bc the address is stored in htim_cb within the interstae_vars struct, not the value. So when the value is changed in the interrupt in main, it should read the value at the register
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7ff fc58 	bl	8003678 <read_pulse>
		*(intertask_vars->rad_edge_flag) = 0;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
	}
	// Checking if the value is greater than 50% of its max (1750)
	if (get_pulse_percent(task->rad) > 50){
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f835 	bl	8003e44 <get_pulse_percent>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b32      	cmp	r3, #50	@ 0x32
 8003dde:	dd05      	ble.n	8003dec <state1_task1+0x48>
		intertask_vars->rc_trigger_flag = 1;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
		task->state = 2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	701a      	strb	r2, [r3, #0]
	}
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <state2_task1>:

void state2_task1(TASK1* task, INTERTASK_VARS* intertask_vars)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	// Reading the value of the Radio Receiver after each period
	if (*(intertask_vars->rad_edge_flag)){
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <state2_task1+0x2c>
		read_pulse(task->rad, intertask_vars->htim_cb); // EDIT: This should work bc the address is stored in htim_cb within the interstae_vars struct, not the value. So when the value is changed in the interrupt in main, it should read the value at the register
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff fc30 	bl	8003678 <read_pulse>
		*(intertask_vars->rad_edge_flag) = 0;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	}
	// Checking if the value is less than 50% of its max (1750)
	if (get_pulse_percent(task->rad) < 50){
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f80d 	bl	8003e44 <get_pulse_percent>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b31      	cmp	r3, #49	@ 0x31
 8003e2e:	dc05      	bgt.n	8003e3c <state2_task1+0x48>
		intertask_vars->rc_trigger_flag = 0;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
		task->state = 1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
	}
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <get_pulse_percent>:

int32_t get_pulse_percent(RadioReciever_DriverTypeDef* rad)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	  // Calculates the radio pulse as a percent
	  uint32_t pulse_rad = get_pulse(rad);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fbca 	bl	80035e6 <get_pulse>
 8003e52:	4603      	mov	r3, r0
 8003e54:	60fb      	str	r3, [r7, #12]
	  if (abs(pulse_rad) < 10){
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f113 0f09 	cmn.w	r3, #9
 8003e5c:	db05      	blt.n	8003e6a <get_pulse_percent+0x26>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b09      	cmp	r3, #9
 8003e62:	dc02      	bgt.n	8003e6a <get_pulse_percent+0x26>
		  pulse_rad = 1509;
 8003e64:	f240 53e5 	movw	r3, #1509	@ 0x5e5
 8003e68:	60fb      	str	r3, [r7, #12]
	  }
	  int32_t duty_percent = (int32_t)((pulse_rad-1509)*100)/513;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2264      	movs	r2, #100	@ 0x64
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	f5a3 3313 	sub.w	r3, r3, #150528	@ 0x24c00
 8003e76:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003eac <get_pulse_percent+0x68>)
 8003e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003e80:	1212      	asrs	r2, r2, #8
 8003e82:	17db      	asrs	r3, r3, #31
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	60bb      	str	r3, [r7, #8]
	  if (duty_percent > 100){
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	dd02      	ble.n	8003e94 <get_pulse_percent+0x50>
		  duty_percent = 100;
 8003e8e:	2364      	movs	r3, #100	@ 0x64
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	e006      	b.n	8003ea2 <get_pulse_percent+0x5e>
	  }
	  else if (duty_percent < -100){
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8003e9a:	da02      	bge.n	8003ea2 <get_pulse_percent+0x5e>
		  duty_percent = -100;
 8003e9c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8003ea0:	60bb      	str	r3, [r7, #8]
	  }
	  return duty_percent;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	7fc01ff1 	.word	0x7fc01ff1

08003eb0 <main_task2>:
 */

#include <task2.h>

void main_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	if(task->state == 0){
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <main_task2+0x1c>
		state0_task2(task, intertask_vars);
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f855 	bl	8003f74 <state0_task2>
		state8_task2(task, intertask_vars);
	}
	else if(task->state == 9){
		state9_task2(task, intertask_vars);
	}
}
 8003eca:	e04f      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 1){
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d104      	bne.n	8003ede <main_task2+0x2e>
		state1_task2(task, intertask_vars);
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f88a 	bl	8003ff0 <state1_task2>
}
 8003edc:	e046      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 2){
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d104      	bne.n	8003ef0 <main_task2+0x40>
		state2_task2(task, intertask_vars);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f893 	bl	8004014 <state2_task2>
}
 8003eee:	e03d      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 3){
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d104      	bne.n	8003f02 <main_task2+0x52>
		state3_task2(task, intertask_vars);
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f948 	bl	8004190 <state3_task2>
}
 8003f00:	e034      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 4){
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d104      	bne.n	8003f14 <main_task2+0x64>
		state4_task2(task, intertask_vars);
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9c1 	bl	8004294 <state4_task2>
}
 8003f12:	e02b      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 5){
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d104      	bne.n	8003f26 <main_task2+0x76>
		state5_task2(task, intertask_vars);
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa54 	bl	80043cc <state5_task2>
}
 8003f24:	e022      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 6){
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d104      	bne.n	8003f38 <main_task2+0x88>
		state6_task2(task, intertask_vars);
 8003f2e:	6839      	ldr	r1, [r7, #0]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fae9 	bl	8004508 <state6_task2>
}
 8003f36:	e019      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 7){
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b07      	cmp	r3, #7
 8003f3e:	d104      	bne.n	8003f4a <main_task2+0x9a>
		state7_task2(task, intertask_vars);
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb30 	bl	80045a8 <state7_task2>
}
 8003f48:	e010      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 8){
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d104      	bne.n	8003f5c <main_task2+0xac>
		state8_task2(task, intertask_vars);
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fbd7 	bl	8004708 <state8_task2>
}
 8003f5a:	e007      	b.n	8003f6c <main_task2+0xbc>
	else if(task->state == 9){
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d103      	bne.n	8003f6c <main_task2+0xbc>
		state9_task2(task, intertask_vars);
 8003f64:	6839      	ldr	r1, [r7, #0]
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fbe6 	bl	8004738 <state9_task2>
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <state0_task2>:

void state0_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	// Initializing the motor
	enable_mot(task->mot,1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f991 	bl	80032ac <enable_mot>
	set_PWM_percent(task->mot, 1, 0);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f9ba 	bl	800330c <set_PWM_percent>

	// Initializng the servo
	enable_servo(task->servo);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fb9a 	bl	80036d6 <enable_servo>

	// Initializing the photoresistors

	// Initializing the encoder
	enable_enc(task->enc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fcad 	bl	8002906 <enable_enc>
	set_zero(task->enc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fcb6 	bl	8002922 <set_zero>

	// Initializing the IMU gyroscope
	bno055_init(task->gyro);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc ff68 	bl	8000e90 <bno055_init>
	HAL_Delay(100);
 8003fc0:	2064      	movs	r0, #100	@ 0x64
 8003fc2:	f000 fead 	bl	8004d20 <HAL_Delay>
	bno055_set_unit(task->gyro, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6998      	ldr	r0, [r3, #24]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f7fe fa26 	bl	8002424 <bno055_set_unit>
	task->state = 1;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]

	// Initializing the controller
	reset_controller(task->con);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fbc3 	bl	800276e <reset_controller>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <state1_task2>:

void state1_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	if (intertask_vars->rc_trigger_flag){
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <state1_task2+0x18>
		task->state = 2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	701a      	strb	r2, [r3, #0]
	}
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <state2_task2>:

void state2_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <state2_task2+0x1a>
		task->state = 8;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2208      	movs	r2, #8
 800402a:	701a      	strb	r2, [r3, #0]
				task->high_light = curr_light;
				task->high_angle = pitch_angle;
			}
		}
	}
}
 800402c:	e0a5      	b.n	800417a <state2_task2+0x166>
		if (task->init_controller){
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01b      	beq.n	8004070 <state2_task2+0x5c>
			reset_controller(task->con);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fb96 	bl	800276e <reset_controller>
			set_gains(task->con, 0.1, 0, 0);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8004184 <state2_task2+0x170>
 800404a:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8004184 <state2_task2+0x170>
 800404e:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8004188 <state2_task2+0x174>
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fba8 	bl	80027a8 <set_gains>
			set_target(task->con, 355);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800418c <state2_task2+0x178>
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fbba 	bl	80027da <set_target>
			task->init_controller = 0;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800406e:	e084      	b.n	800417a <state2_task2+0x166>
			bno055_euler(task->gyro, task->euler);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7fd fec0 	bl	8001e00 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]
			float output = get_output(task->con, pitch_angle);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fbb1 	bl	80027f8 <get_output>
 8004096:	ed87 0a04 	vstr	s0, [r7, #16]
			set_PWM(task->mot, 1, output);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	edd7 7a04 	vldr	s15, [r7, #16]
 80040a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f949 	bl	8003344 <set_PWM>
			if (abs(pitch_angle - 355) < 5){
 80040b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80040b6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800418c <state2_task2+0x178>
 80040ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040be:	ee17 0a90 	vmov	r0, s15
 80040c2:	f7fc f9ed 	bl	80004a0 <__aeabi_f2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	ec43 2b10 	vmov	d0, r2, r3
 80040ce:	f005 fa8f 	bl	80095f0 <abs>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	dc3a      	bgt.n	800414e <state2_task2+0x13a>
				uint32_t curr_time = HAL_GetTick();
 80040d8:	f000 fe16 	bl	8004d08 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]
				if (!task->within_range){
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <state2_task2+0xe8>
					task->end_time = curr_time + 100;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80040fa:	e02c      	b.n	8004156 <state2_task2+0x142>
				else if (curr_time > task->end_time && task->within_range){
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	429a      	cmp	r2, r3
 8004104:	d927      	bls.n	8004156 <state2_task2+0x142>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <state2_task2+0x142>
					task->within_range = 0;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff f90f 	bl	8003344 <set_PWM>
					servo_set_position(task->servo, 0);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8004184 <state2_task2+0x170>
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fb1a 	bl	8003768 <servo_set_position>
					reset_controller(task->con);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fb18 	bl	800276e <reset_controller>
					task->init_controller = 1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 3;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e003      	b.n	8004156 <state2_task2+0x142>
				task->within_range = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			uint32_t curr_light = get_photo_value(task->photo, 1); // NOTE: Use the photoresistor on the top when vertical?
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff f9c4 	bl	80034ea <get_photo_value>
 8004162:	60b8      	str	r0, [r7, #8]
			if (curr_light > task->high_light){
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	d905      	bls.n	800417a <state2_task2+0x166>
				task->high_light = curr_light;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
				task->high_angle = pitch_angle;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800417a:	bf00      	nop
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	00000000 	.word	0x00000000
 8004188:	3dcccccd 	.word	0x3dcccccd
 800418c:	43b18000 	.word	0x43b18000

08004190 <state3_task2>:

void state3_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <state3_task2+0x1a>
		task->state = 8;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	701a      	strb	r2, [r3, #0]
				task->init_controller = 1;
				task->state = 4;
			}
		}
	}
}
 80041a8:	e06b      	b.n	8004282 <state3_task2+0xf2>
		if (task->init_controller){
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01e      	beq.n	80041f2 <state3_task2+0x62>
			reset_controller(task->con);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fad8 	bl	800276e <reset_controller>
			set_gains(task->con, 0.1, 0, 0);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 800428c <state3_task2+0xfc>
 80041c6:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800428c <state3_task2+0xfc>
 80041ca:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8004290 <state3_task2+0x100>
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe faea 	bl	80027a8 <set_gains>
			set_target(task->con, task->high_angle);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80041de:	eeb0 0a67 	vmov.f32	s0, s15
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fe faf9 	bl	80027da <set_target>
			task->init_controller = 0;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2020 	strb.w	r2, [r3, #32]
}
 80041f0:	e047      	b.n	8004282 <state3_task2+0xf2>
			bno055_euler(task->gyro, task->euler);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fd fdff 	bl	8001e00 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	60fb      	str	r3, [r7, #12]
			float output = get_output(task->con, pitch_angle);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe faf0 	bl	80027f8 <get_output>
 8004218:	ed87 0a02 	vstr	s0, [r7, #8]
			set_PWM(task->mot, 1, output);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	edd7 7a02 	vldr	s15, [r7, #8]
 8004224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004228:	ee17 2a90 	vmov	r2, s15
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f888 	bl	8003344 <set_PWM>
			if (abs(pitch_angle - task->high_angle) < 10){
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800423a:	ed97 7a03 	vldr	s14, [r7, #12]
 800423e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004242:	ee17 0a90 	vmov	r0, s15
 8004246:	f7fc f92b 	bl	80004a0 <__aeabi_f2d>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	ec43 2b10 	vmov	d0, r2, r3
 8004252:	f005 f9cd 	bl	80095f0 <abs>
 8004256:	4603      	mov	r3, r0
 8004258:	2b09      	cmp	r3, #9
 800425a:	dc12      	bgt.n	8004282 <state3_task2+0xf2>
				set_PWM(task->mot, 1, 0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff f86d 	bl	8003344 <set_PWM>
				reset_controller(task->con);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fa7d 	bl	800276e <reset_controller>
				task->init_controller = 1;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2020 	strb.w	r2, [r3, #32]
				task->state = 4;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2204      	movs	r2, #4
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	00000000 	.word	0x00000000
 8004290:	3dcccccd 	.word	0x3dcccccd

08004294 <state4_task2>:

void state4_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <state4_task2+0x1a>
		task->state = 8;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2208      	movs	r2, #8
 80042aa:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 80042ac:	e086      	b.n	80043bc <state4_task2+0x128>
		if (task->init_controller){
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <state4_task2+0x5c>
			reset_controller(task->con);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fa56 	bl	800276e <reset_controller>
			set_gains(task->con, 0.1, 0, 0);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 80043c4 <state4_task2+0x130>
 80042ca:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80043c4 <state4_task2+0x130>
 80042ce:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80043c8 <state4_task2+0x134>
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fa68 	bl	80027a8 <set_gains>
			set_target(task->con, 0);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 80043c4 <state4_task2+0x130>
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fa7a 	bl	80027da <set_target>
			task->init_controller = 0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]
}
 80042ee:	e065      	b.n	80043bc <state4_task2+0x128>
			float voltage_dif = get_photo_diff(task->photo, 1, 2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2202      	movs	r2, #2
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff f941 	bl	8003580 <get_photo_diff>
 80042fe:	ee07 0a90 	vmov	s15, r0
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	edc7 7a05 	vstr	s15, [r7, #20]
			float output = get_output(task->con, voltage_dif);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fa70 	bl	80027f8 <get_output>
 8004318:	ed87 0a04 	vstr	s0, [r7, #16]
			set_PWM(task->mot, 1, output);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	edd7 7a04 	vldr	s15, [r7, #16]
 8004324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004328:	ee17 2a90 	vmov	r2, s15
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f808 	bl	8003344 <set_PWM>
			if (abs(voltage_dif) < 50){
 8004334:	6978      	ldr	r0, [r7, #20]
 8004336:	f7fc f8b3 	bl	80004a0 <__aeabi_f2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	ec43 2b10 	vmov	d0, r2, r3
 8004342:	f005 f955 	bl	80095f0 <abs>
 8004346:	4603      	mov	r3, r0
 8004348:	2b31      	cmp	r3, #49	@ 0x31
 800434a:	dc33      	bgt.n	80043b4 <state4_task2+0x120>
				uint32_t curr_time = HAL_GetTick();
 800434c:	f000 fcdc 	bl	8004d08 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]
				if (!task->within_range){
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <state4_task2+0xdc>
					task->end_time = curr_time + 100;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800436e:	e025      	b.n	80043bc <state4_task2+0x128>
				else if (curr_time > task->end_time && task->within_range){
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d920      	bls.n	80043bc <state4_task2+0x128>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01b      	beq.n	80043bc <state4_task2+0x128>
					task->within_range = 0;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe ffd5 	bl	8003344 <set_PWM>
					reset_controller(task->con);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe f9e5 	bl	800276e <reset_controller>
					task->init_controller = 1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 5;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2205      	movs	r2, #5
 80043b0:	701a      	strb	r2, [r3, #0]
}
 80043b2:	e003      	b.n	80043bc <state4_task2+0x128>
				task->within_range = 0;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	00000000 	.word	0x00000000
 80043c8:	3dcccccd 	.word	0x3dcccccd

080043cc <state5_task2>:

void state5_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <state5_task2+0x1a>
		task->state = 8;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2208      	movs	r2, #8
 80043e2:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 80043e4:	e087      	b.n	80044f6 <state5_task2+0x12a>
		if (task->init_controller){
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <state5_task2+0x5c>
			reset_controller(task->con);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe f9ba 	bl	800276e <reset_controller>
			set_gains(task->con, 0.01, 0, 0);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	ed9f 1a40 	vldr	s2, [pc, #256]	@ 8004500 <state5_task2+0x134>
 8004402:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8004500 <state5_task2+0x134>
 8004406:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8004504 <state5_task2+0x138>
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe f9cc 	bl	80027a8 <set_gains>
			set_target(task->con, 0);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004500 <state5_task2+0x134>
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f9de 	bl	80027da <set_target>
			task->init_controller = 0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004426:	e066      	b.n	80044f6 <state5_task2+0x12a>
			float voltage_dif = get_photo_diff(task->photo, 1, 3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2203      	movs	r2, #3
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff f8a5 	bl	8003580 <get_photo_diff>
 8004436:	ee07 0a90 	vmov	s15, r0
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	edc7 7a05 	vstr	s15, [r7, #20]
			float output = get_output(task->con, voltage_dif);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	ed97 0a05 	vldr	s0, [r7, #20]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe f9d4 	bl	80027f8 <get_output>
 8004450:	ed87 0a04 	vstr	s0, [r7, #16]
			float servo_current_position = servo_get_position(task->servo);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f94d 	bl	80036f8 <servo_get_position>
 800445e:	ed87 0a03 	vstr	s0, [r7, #12]
			servo_set_position(task->servo, servo_current_position+output);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	ed97 7a03 	vldr	s14, [r7, #12]
 800446a:	edd7 7a04 	vldr	s15, [r7, #16]
 800446e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004472:	eeb0 0a67 	vmov.f32	s0, s15
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff f976 	bl	8003768 <servo_set_position>
			if (abs(voltage_dif) < 50){
 800447c:	6978      	ldr	r0, [r7, #20]
 800447e:	f7fc f80f 	bl	80004a0 <__aeabi_f2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	ec43 2b10 	vmov	d0, r2, r3
 800448a:	f005 f8b1 	bl	80095f0 <abs>
 800448e:	4603      	mov	r3, r0
 8004490:	2b31      	cmp	r3, #49	@ 0x31
 8004492:	dc2c      	bgt.n	80044ee <state5_task2+0x122>
				uint32_t curr_time = HAL_GetTick();
 8004494:	f000 fc38 	bl	8004d08 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]
				if (!task->within_range){
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <state5_task2+0xec>
					task->end_time = curr_time + 100;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80044b6:	e01e      	b.n	80044f6 <state5_task2+0x12a>
				else if (curr_time > task->end_time && task->within_range){
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d919      	bls.n	80044f6 <state5_task2+0x12a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d014      	beq.n	80044f6 <state5_task2+0x12a>
					task->within_range = 0;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					reset_controller(task->con);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe f948 	bl	800276e <reset_controller>
					task->init_controller = 1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 6;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2206      	movs	r2, #6
 80044ea:	701a      	strb	r2, [r3, #0]
}
 80044ec:	e003      	b.n	80044f6 <state5_task2+0x12a>
				task->within_range = 0;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00000000 	.word	0x00000000
 8004504:	3c23d70a 	.word	0x3c23d70a

08004508 <state6_task2>:

void state6_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b08d      	sub	sp, #52	@ 0x34
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <state6_task2+0x1a>
		task->state = 8;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2208      	movs	r2, #8
 800451e:	701a      	strb	r2, [r3, #0]
										  .z = 10  };
		// z is the motor yaw angle, x is the servo pitch angle.
		task->reflect_angle = get_reflect_angle(&light_source_angle, &target_position, &heliostat_position);
		task->state = 7;
	}
}
 8004520:	e039      	b.n	8004596 <state6_task2+0x8e>
		bno055_euler(task->gyro, task->euler);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7fd fc67 	bl	8001e00 <bno055_euler>
		VectorTypeDef light_source_angle = { .x = task->euler->pitch,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
											 .z = task->euler->yaw };
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	689b      	ldr	r3, [r3, #8]
		VectorTypeDef light_source_angle = { .x = task->euler->pitch,
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VectorTypeDef target_position = { .x = 10,
 8004548:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <state6_task2+0x98>)
 800454a:	f107 0318 	add.w	r3, r7, #24
 800454e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		VectorTypeDef heliostat_position = { .x = 0,
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <state6_task2+0x9c>)
 8004562:	617b      	str	r3, [r7, #20]
		task->reflect_angle = get_reflect_angle(&light_source_angle, &target_position, &heliostat_position);
 8004564:	687c      	ldr	r4, [r7, #4]
 8004566:	f107 020c 	add.w	r2, r7, #12
 800456a:	f107 0118 	add.w	r1, r7, #24
 800456e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f982 	bl	800487c <get_reflect_angle>
 8004578:	eef0 6a40 	vmov.f32	s13, s0
 800457c:	eeb0 7a60 	vmov.f32	s14, s1
 8004580:	eef0 7a41 	vmov.f32	s15, s2
 8004584:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
 8004588:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
 800458c:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
		task->state = 7;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2207      	movs	r2, #7
 8004594:	701a      	strb	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3734      	adds	r7, #52	@ 0x34
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop
 80045a0:	0800bf9c 	.word	0x0800bf9c
 80045a4:	41200000 	.word	0x41200000

080045a8 <state7_task2>:

void state7_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <state7_task2+0x1a>
		task->state = 8;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2208      	movs	r2, #8
 80045be:	701a      	strb	r2, [r3, #0]
			else{
				task->within_range = 0;
			}
		}
	}
}
 80045c0:	e09a      	b.n	80046f8 <state7_task2+0x150>
		if (task->init_controller){
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01e      	beq.n	800460a <state7_task2+0x62>
			reset_controller(task->con);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe f8cc 	bl	800276e <reset_controller>
			set_gains(task->con, 0.1, 0, 0);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 8004700 <state7_task2+0x158>
 80045de:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8004700 <state7_task2+0x158>
 80045e2:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8004704 <state7_task2+0x15c>
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe f8de 	bl	80027a8 <set_gains>
			set_target(task->con, task->reflect_angle.z);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80045f6:	eeb0 0a67 	vmov.f32	s0, s15
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7fe f8ed 	bl	80027da <set_target>
			task->init_controller = 0;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004608:	e076      	b.n	80046f8 <state7_task2+0x150>
			bno055_euler(task->gyro, task->euler);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fd fbf3 	bl	8001e00 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	617b      	str	r3, [r7, #20]
			float output = get_output(task->con, pitch_angle);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	ed97 0a05 	vldr	s0, [r7, #20]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe f8e4 	bl	80027f8 <get_output>
 8004630:	ed87 0a04 	vstr	s0, [r7, #16]
			set_PWM(task->mot, 1, output);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	edd7 7a04 	vldr	s15, [r7, #16]
 800463c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004640:	ee17 2a90 	vmov	r2, s15
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fe7c 	bl	8003344 <set_PWM>
			if (abs(pitch_angle - task->reflect_angle.z) < 5){
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004652:	ed97 7a05 	vldr	s14, [r7, #20]
 8004656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465a:	ee17 0a90 	vmov	r0, s15
 800465e:	f7fb ff1f 	bl	80004a0 <__aeabi_f2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	ec43 2b10 	vmov	d0, r2, r3
 800466a:	f004 ffc1 	bl	80095f0 <abs>
 800466e:	4603      	mov	r3, r0
 8004670:	2b04      	cmp	r3, #4
 8004672:	dc3d      	bgt.n	80046f0 <state7_task2+0x148>
				uint32_t curr_time = HAL_GetTick();
 8004674:	f000 fb48 	bl	8004d08 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]
				if (!task->within_range){
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <state7_task2+0xf0>
					task->end_time = curr_time + 100;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8004696:	e02f      	b.n	80046f8 <state7_task2+0x150>
				else if (curr_time > task->end_time && task->within_range){
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d92a      	bls.n	80046f8 <state7_task2+0x150>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d025      	beq.n	80046f8 <state7_task2+0x150>
					task->within_range = 0;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fe41 	bl	8003344 <set_PWM>
					servo_set_position(task->servo, task->reflect_angle.x);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80046cc:	eeb0 0a67 	vmov.f32	s0, s15
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7ff f849 	bl	8003768 <servo_set_position>
					reset_controller(task->con);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe f847 	bl	800276e <reset_controller>
					task->init_controller = 1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 7;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2207      	movs	r2, #7
 80046ec:	701a      	strb	r2, [r3, #0]
}
 80046ee:	e003      	b.n	80046f8 <state7_task2+0x150>
				task->within_range = 0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80046f8:	bf00      	nop
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	00000000 	.word	0x00000000
 8004704:	3dcccccd 	.word	0x3dcccccd

08004708 <state8_task2>:

void state8_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
	if (intertask_vars->rc_trigger_flag){
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <state8_task2+0x18>
		task->state = 9;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2209      	movs	r2, #9
 800471e:	701a      	strb	r2, [r3, #0]
	}
	set_PWM(task->mot, 1, 0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fe0b 	bl	8003344 <set_PWM>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <state9_task2>:

void state9_task2(TASK2* task, INTERTASK_VARS* intertask_vars)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	if (!intertask_vars->rc_trigger_flag){
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <state9_task2+0x1a>
		task->state = 8;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	701a      	strb	r2, [r3, #0]
				task->within_range = 0;
			}
		}
	}

}
 8004750:	e08c      	b.n	800486c <state9_task2+0x134>
		if (task->init_controller){
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <state9_task2+0x5c>
			reset_controller(task->con);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe f804 	bl	800276e <reset_controller>
			set_gains(task->con, 0.1, 0, 0);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8004874 <state9_task2+0x13c>
 800476e:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8004874 <state9_task2+0x13c>
 8004772:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8004878 <state9_task2+0x140>
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe f816 	bl	80027a8 <set_gains>
			set_target(task->con, 0);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8004874 <state9_task2+0x13c>
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe f828 	bl	80027da <set_target>
			task->init_controller = 0;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004792:	e06b      	b.n	800486c <state9_task2+0x134>
			bno055_euler(task->gyro, task->euler);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fd fb2e 	bl	8001e00 <bno055_euler>
			float pitch_angle = task->euler->yaw;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	617b      	str	r3, [r7, #20]
			float output = get_output(task->con, pitch_angle);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	ed97 0a05 	vldr	s0, [r7, #20]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe f81f 	bl	80027f8 <get_output>
 80047ba:	ed87 0a04 	vstr	s0, [r7, #16]
			set_PWM(task->mot, 1, output);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80047c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ca:	ee17 2a90 	vmov	r2, s15
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe fdb7 	bl	8003344 <set_PWM>
			if (abs(pitch_angle) < 5){
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7fb fe62 	bl	80004a0 <__aeabi_f2d>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	ec43 2b10 	vmov	d0, r2, r3
 80047e4:	f004 ff04 	bl	80095f0 <abs>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	dc3a      	bgt.n	8004864 <state9_task2+0x12c>
				uint32_t curr_time = HAL_GetTick();
 80047ee:	f000 fa8b 	bl	8004d08 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]
				if (!task->within_range){
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <state9_task2+0xda>
					task->end_time = curr_time + 100;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c
					task->within_range = 1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8004810:	e02c      	b.n	800486c <state9_task2+0x134>
				else if (curr_time > task->end_time && task->within_range){
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	429a      	cmp	r2, r3
 800481a:	d927      	bls.n	800486c <state9_task2+0x134>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d022      	beq.n	800486c <state9_task2+0x134>
					task->within_range = 0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					set_PWM(task->mot, 1, 0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fd84 	bl	8003344 <set_PWM>
					servo_set_position(task->servo, 0);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004874 <state9_task2+0x13c>
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ff8f 	bl	8003768 <servo_set_position>
					reset_controller(task->con);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd ff8d 	bl	800276e <reset_controller>
					task->init_controller = 1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2020 	strb.w	r2, [r3, #32]
					task->state = 1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
}
 8004862:	e003      	b.n	800486c <state9_task2+0x134>
				task->within_range = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800486c:	bf00      	nop
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	00000000 	.word	0x00000000
 8004878:	3dcccccd 	.word	0x3dcccccd

0800487c <get_reflect_angle>:

VectorTypeDef get_reflect_angle(VectorTypeDef* light_source_angle, VectorTypeDef* target_position, VectorTypeDef* heliostat_position)
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b0a2      	sub	sp, #136	@ 0x88
 8004880:	af00      	add	r7, sp, #0
 8004882:	61f8      	str	r0, [r7, #28]
 8004884:	61b9      	str	r1, [r7, #24]
 8004886:	617a      	str	r2, [r7, #20]
    // Generating a unit vector from the light source angles
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe07 	bl	80004a0 <__aeabi_f2d>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	ec43 2b10 	vmov	d0, r2, r3
 800489a:	f004 fff1 	bl	8009880 <cos>
 800489e:	ec55 4b10 	vmov	r4, r5, d0
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fdfa 	bl	80004a0 <__aeabi_f2d>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	ec43 2b10 	vmov	d0, r2, r3
 80048b4:	f005 f840 	bl	8009938 <sin>
 80048b8:	ec53 2b10 	vmov	r2, r3, d0
 80048bc:	4620      	mov	r0, r4
 80048be:	4629      	mov	r1, r5
 80048c0:	f7fb fe46 	bl	8000550 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	f7fc f918 	bl	8000b00 <__aeabi_d2f>
 80048d0:	4603      	mov	r3, r0
 80048d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                         .y = sin(light_source_angle->z)*sin(light_source_angle->x),
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fb fde1 	bl	80004a0 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	ec43 2b10 	vmov	d0, r2, r3
 80048e6:	f005 f827 	bl	8009938 <sin>
 80048ea:	ec55 4b10 	vmov	r4, r5, d0
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fdd4 	bl	80004a0 <__aeabi_f2d>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	ec43 2b10 	vmov	d0, r2, r3
 8004900:	f005 f81a 	bl	8009938 <sin>
 8004904:	ec53 2b10 	vmov	r2, r3, d0
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fb fe20 	bl	8000550 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f7fc f8f2 	bl	8000b00 <__aeabi_d2f>
 800491c:	4603      	mov	r3, r0
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 800491e:	663b      	str	r3, [r7, #96]	@ 0x60
                                         .z = cos(light_source_angle->x)                                   };
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7fb fdbb 	bl	80004a0 <__aeabi_f2d>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	ec43 2b10 	vmov	d0, r2, r3
 8004932:	f004 ffa5 	bl	8009880 <cos>
 8004936:	ec53 2b10 	vmov	r2, r3, d0
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	f7fc f8df 	bl	8000b00 <__aeabi_d2f>
 8004942:	4603      	mov	r3, r0
    VectorTypeDef light_source_vector = {.x = cos(light_source_angle->z)*sin(light_source_angle->x),
 8004944:	667b      	str	r3, [r7, #100]	@ 0x64
    // Generating a unit vector from the target-to-heliostat positions
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	ed93 7a00 	vldr	s14, [r3]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004956:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
                                .y = (target_position->y)-(heliostat_position->y),
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	edd3 7a01 	vldr	s15, [r3, #4]
 8004966:	ee77 7a67 	vsub.f32	s15, s14, s15
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 800496a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
                                .z = (target_position->z)-(heliostat_position->z) };
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	ed93 7a02 	vldr	s14, [r3, #8]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	edd3 7a02 	vldr	s15, [r3, #8]
 800497a:	ee77 7a67 	vsub.f32	s15, s14, s15
    VectorTypeDef target_dif = {.x = (target_position->x)-(heliostat_position->x),
 800497e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float target_vector_mag = get_mag(&target_dif);
 8004982:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f8d2 	bl	8004b30 <get_mag>
 800498c:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 8004990:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8004994:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8004998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
                                   .y = target_dif.y/target_vector_mag,
 80049a0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80049a4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 80049ac:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
                                   .z = target_dif.z/target_vector_mag };
 80049b0:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80049b4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef target_vector = {.x = target_dif.x/target_vector_mag,
 80049bc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Calculating the normal vector of the mirror to reflect the light source to the target
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 80049c0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80049c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80049c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049cc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                                        .y = light_source_vector.y+target_vector.y,
 80049d0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80049d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80049d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 80049dc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
                                        .z = light_source_vector.z+target_vector.z };
 80049e0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80049e4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80049e8:	ee77 7a27 	vadd.f32	s15, s14, s15
    VectorTypeDef reflect_vector_dir = {.x = light_source_vector.x+target_vector.x,
 80049ec:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float reflect_vector_dir_mag = get_mag(&reflect_vector_dir);
 80049f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f89b 	bl	8004b30 <get_mag>
 80049fa:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 80049fe:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004a02:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                                    .y = reflect_vector_dir.y/reflect_vector_dir_mag,
 8004a0e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8004a12:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 8004a1a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                                    .z = reflect_vector_dir.z/reflect_vector_dir_mag };
 8004a1e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8004a22:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
    VectorTypeDef reflect_vector = {.x = reflect_vector_dir.x/reflect_vector_dir_mag,
 8004a2a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calculating the pitch and yaw angles to produce the mirror normal vector
    float theta = acos(reflect_vector.z);
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd35 	bl	80004a0 <__aeabi_f2d>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	ec43 2b10 	vmov	d0, r2, r3
 8004a3e:	f004 fe1b 	bl	8009678 <acos>
 8004a42:	ec53 2b10 	vmov	r2, r3, d0
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fc f859 	bl	8000b00 <__aeabi_d2f>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float phi1 = acos(reflect_vector.x/sin(theta));
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fd23 	bl	80004a0 <__aeabi_f2d>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004a60:	f7fb fd1e 	bl	80004a0 <__aeabi_f2d>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	ec43 2b10 	vmov	d0, r2, r3
 8004a6c:	f004 ff64 	bl	8009938 <sin>
 8004a70:	ec53 2b10 	vmov	r2, r3, d0
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fe94 	bl	80007a4 <__aeabi_ddiv>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	ec43 2b17 	vmov	d7, r2, r3
 8004a84:	eeb0 0a47 	vmov.f32	s0, s14
 8004a88:	eef0 0a67 	vmov.f32	s1, s15
 8004a8c:	f004 fdf4 	bl	8009678 <acos>
 8004a90:	ec53 2b10 	vmov	r2, r3, d0
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fc f832 	bl	8000b00 <__aeabi_d2f>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
    float phi2 = asin(reflect_vector.y/sin(theta));
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fb fcfc 	bl	80004a0 <__aeabi_f2d>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460d      	mov	r5, r1
 8004aac:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004aae:	f7fb fcf7 	bl	80004a0 <__aeabi_f2d>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	ec43 2b10 	vmov	d0, r2, r3
 8004aba:	f004 ff3d 	bl	8009938 <sin>
 8004abe:	ec53 2b10 	vmov	r2, r3, d0
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb fe6d 	bl	80007a4 <__aeabi_ddiv>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	ec43 2b17 	vmov	d7, r2, r3
 8004ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ad6:	eef0 0a67 	vmov.f32	s1, s15
 8004ada:	f004 fe01 	bl	80096e0 <asin>
 8004ade:	ec53 2b10 	vmov	r2, r3, d0
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f7fc f80b 	bl	8000b00 <__aeabi_d2f>
 8004aea:	4603      	mov	r3, r0
 8004aec:	677b      	str	r3, [r7, #116]	@ 0x74

    // Generating an angle vector to store phi and theta (phi1 and phi2, with no rounding error, should be the same)
    VectorTypeDef reflect_angle = {.x = theta,
 8004aee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
                                   .y = phi1,
                                   .z = phi2  };

    return reflect_angle;
 8004afa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004afe:	f107 0220 	add.w	r2, r7, #32
 8004b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0e:	ee06 1a90 	vmov	s13, r1
 8004b12:	ee07 2a10 	vmov	s14, r2
 8004b16:	ee07 3a90 	vmov	s15, r3
}
 8004b1a:	eeb0 0a66 	vmov.f32	s0, s13
 8004b1e:	eef0 0a47 	vmov.f32	s1, s14
 8004b22:	eeb0 1a67 	vmov.f32	s2, s15
 8004b26:	3788      	adds	r7, #136	@ 0x88
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2c:	0000      	movs	r0, r0
	...

08004b30 <get_mag>:

#include <math.h>
#include "vector.h"

float get_mag(VectorTypeDef* vect)
{
 8004b30:	b5b0      	push	{r4, r5, r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    float mag = sqrt(pow(vect->x,2)+pow(vect->y,2)+pow(vect->z,2));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcaf 	bl	80004a0 <__aeabi_f2d>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8004be0 <get_mag+0xb0>
 8004b4a:	ec43 2b10 	vmov	d0, r2, r3
 8004b4e:	f004 fdfb 	bl	8009748 <pow>
 8004b52:	ec55 4b10 	vmov	r4, r5, d0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fb fca0 	bl	80004a0 <__aeabi_f2d>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8004be0 <get_mag+0xb0>
 8004b68:	ec43 2b10 	vmov	d0, r2, r3
 8004b6c:	f004 fdec 	bl	8009748 <pow>
 8004b70:	ec53 2b10 	vmov	r2, r3, d0
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fb34 	bl	80001e4 <__adddf3>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb fc89 	bl	80004a0 <__aeabi_f2d>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8004be0 <get_mag+0xb0>
 8004b96:	ec43 2b10 	vmov	d0, r2, r3
 8004b9a:	f004 fdd5 	bl	8009748 <pow>
 8004b9e:	ec53 2b10 	vmov	r2, r3, d0
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	f7fb fb1d 	bl	80001e4 <__adddf3>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	ec43 2b17 	vmov	d7, r2, r3
 8004bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bb6:	eef0 0a67 	vmov.f32	s1, s15
 8004bba:	f004 fe35 	bl	8009828 <sqrt>
 8004bbe:	ec53 2b10 	vmov	r2, r3, d0
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f7fb ff9b 	bl	8000b00 <__aeabi_d2f>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	60fb      	str	r3, [r7, #12]
    return mag;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	ee07 3a90 	vmov	s15, r3
}
 8004bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bde:	bf00      	nop
 8004be0:	00000000 	.word	0x00000000
 8004be4:	40000000 	.word	0x40000000

08004be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bec:	f7ff f894 	bl	8003d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bf0:	480c      	ldr	r0, [pc, #48]	@ (8004c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bf2:	490d      	ldr	r1, [pc, #52]	@ (8004c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf8:	e002      	b.n	8004c00 <LoopCopyDataInit>

08004bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bfe:	3304      	adds	r3, #4

08004c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c04:	d3f9      	bcc.n	8004bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c06:	4a0a      	ldr	r2, [pc, #40]	@ (8004c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c08:	4c0a      	ldr	r4, [pc, #40]	@ (8004c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c0c:	e001      	b.n	8004c12 <LoopFillZerobss>

08004c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c10:	3204      	adds	r2, #4

08004c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c14:	d3fb      	bcc.n	8004c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c16:	f004 fcfd 	bl	8009614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c1a:	f7fd fe93 	bl	8002944 <main>
  bx  lr    
 8004c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004c2c:	0800c1e0 	.word	0x0800c1e0
  ldr r2, =_sbss
 8004c30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004c34:	20000418 	.word	0x20000418

08004c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c38:	e7fe      	b.n	8004c38 <ADC_IRQHandler>
	...

08004c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c40:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <HAL_Init+0x40>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0d      	ldr	r2, [pc, #52]	@ (8004c7c <HAL_Init+0x40>)
 8004c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_Init+0x40>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <HAL_Init+0x40>)
 8004c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c58:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <HAL_Init+0x40>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a07      	ldr	r2, [pc, #28]	@ (8004c7c <HAL_Init+0x40>)
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c64:	2003      	movs	r0, #3
 8004c66:	f000 fd41 	bl	80056ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c6a:	200f      	movs	r0, #15
 8004c6c:	f000 f808 	bl	8004c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c70:	f7fe fdea 	bl	8003848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023c00 	.word	0x40023c00

08004c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <HAL_InitTick+0x54>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_InitTick+0x58>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd59 	bl	8005756 <HAL_SYSTICK_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00e      	b.n	8004ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b0f      	cmp	r3, #15
 8004cb2:	d80a      	bhi.n	8004cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	f000 fd21 	bl	8005702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cc0:	4a06      	ldr	r2, [pc, #24]	@ (8004cdc <HAL_InitTick+0x5c>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	20000008 	.word	0x20000008
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <HAL_IncTick+0x20>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_IncTick+0x24>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	4a04      	ldr	r2, [pc, #16]	@ (8004d04 <HAL_IncTick+0x24>)
 8004cf2:	6013      	str	r3, [r2, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000008 	.word	0x20000008
 8004d04:	200002dc 	.word	0x200002dc

08004d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	@ (8004d1c <HAL_GetTick+0x14>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	200002dc 	.word	0x200002dc

08004d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d28:	f7ff ffee 	bl	8004d08 <HAL_GetTick>
 8004d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d005      	beq.n	8004d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <HAL_Delay+0x44>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d46:	bf00      	nop
 8004d48:	f7ff ffde 	bl	8004d08 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d8f7      	bhi.n	8004d48 <HAL_Delay+0x28>
  {
  }
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000008 	.word	0x20000008

08004d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e033      	b.n	8004de6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fe fd86 	bl	8003898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d118      	bne.n	8004dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004dae:	f023 0302 	bic.w	r3, r3, #2
 8004db2:	f043 0202 	orr.w	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 faca 	bl	8005354 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dd6:	e001      	b.n	8004ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_Start+0x1a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e097      	b.n	8004f3a <HAL_ADC_Start+0x14a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d018      	beq.n	8004e52 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e30:	4b45      	ldr	r3, [pc, #276]	@ (8004f48 <HAL_ADC_Start+0x158>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a45      	ldr	r2, [pc, #276]	@ (8004f4c <HAL_ADC_Start+0x15c>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0c9a      	lsrs	r2, r3, #18
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004e44:	e002      	b.n	8004e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f9      	bne.n	8004e46 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d15f      	bne.n	8004f20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9e:	d106      	bne.n	8004eae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	f023 0206 	bic.w	r2, r3, #6
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44
 8004eac:	e002      	b.n	8004eb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ebc:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <HAL_ADC_Start+0x160>)
 8004ebe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004ec8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d129      	bne.n	8004f38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	e020      	b.n	8004f38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a16      	ldr	r2, [pc, #88]	@ (8004f54 <HAL_ADC_Start+0x164>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d11b      	bne.n	8004f38 <HAL_ADC_Start+0x148>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d114      	bne.n	8004f38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	e00b      	b.n	8004f38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	f043 0210 	orr.w	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f30:	f043 0201 	orr.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	431bde83 	.word	0x431bde83
 8004f50:	40012300 	.word	0x40012300
 8004f54:	40012000 	.word	0x40012000

08004f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_Stop+0x16>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e021      	b.n	8004fb2 <HAL_ADC_Stop+0x5a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d113      	bne.n	8005004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d10b      	bne.n	8005004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e063      	b.n	80050cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005004:	f7ff fe80 	bl	8004d08 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800500a:	e021      	b.n	8005050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d01d      	beq.n	8005050 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_ADC_PollForConversion+0x6c>
 800501a:	f7ff fe75 	bl	8004d08 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d212      	bcs.n	8005050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d00b      	beq.n	8005050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e03d      	b.n	80050cc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d1d6      	bne.n	800500c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0212 	mvn.w	r2, #18
 8005066:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d123      	bne.n	80050ca <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11f      	bne.n	80050ca <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d111      	bne.n	80050ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_ADC_ConfigChannel+0x1c>
 8005108:	2302      	movs	r3, #2
 800510a:	e113      	b.n	8005334 <HAL_ADC_ConfigChannel+0x244>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b09      	cmp	r3, #9
 800511a:	d925      	bls.n	8005168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68d9      	ldr	r1, [r3, #12]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	3b1e      	subs	r3, #30
 8005132:	2207      	movs	r2, #7
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43da      	mvns	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	400a      	ands	r2, r1
 8005140:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68d9      	ldr	r1, [r3, #12]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	4618      	mov	r0, r3
 8005154:	4603      	mov	r3, r0
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4403      	add	r3, r0
 800515a:	3b1e      	subs	r3, #30
 800515c:	409a      	lsls	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e022      	b.n	80051ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6919      	ldr	r1, [r3, #16]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	2207      	movs	r2, #7
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	400a      	ands	r2, r1
 800518a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6919      	ldr	r1, [r3, #16]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	4618      	mov	r0, r3
 800519e:	4603      	mov	r3, r0
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4403      	add	r3, r0
 80051a4:	409a      	lsls	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d824      	bhi.n	8005200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	3b05      	subs	r3, #5
 80051c8:	221f      	movs	r2, #31
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43da      	mvns	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	400a      	ands	r2, r1
 80051d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4618      	mov	r0, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	3b05      	subs	r3, #5
 80051f2:	fa00 f203 	lsl.w	r2, r0, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80051fe:	e04c      	b.n	800529a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d824      	bhi.n	8005252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	3b23      	subs	r3, #35	@ 0x23
 800521a:	221f      	movs	r2, #31
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43da      	mvns	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	400a      	ands	r2, r1
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	4618      	mov	r0, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	3b23      	subs	r3, #35	@ 0x23
 8005244:	fa00 f203 	lsl.w	r2, r0, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005250:	e023      	b.n	800529a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	3b41      	subs	r3, #65	@ 0x41
 8005264:	221f      	movs	r2, #31
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	400a      	ands	r2, r1
 8005272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	4618      	mov	r0, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b41      	subs	r3, #65	@ 0x41
 800528e:	fa00 f203 	lsl.w	r2, r0, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800529a:	4b29      	ldr	r3, [pc, #164]	@ (8005340 <HAL_ADC_ConfigChannel+0x250>)
 800529c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a28      	ldr	r2, [pc, #160]	@ (8005344 <HAL_ADC_ConfigChannel+0x254>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d10f      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x1d8>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b12      	cmp	r3, #18
 80052ae:	d10b      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <HAL_ADC_ConfigChannel+0x254>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12b      	bne.n	800532a <HAL_ADC_ConfigChannel+0x23a>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <HAL_ADC_ConfigChannel+0x258>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <HAL_ADC_ConfigChannel+0x1f4>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b11      	cmp	r3, #17
 80052e2:	d122      	bne.n	800532a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a11      	ldr	r2, [pc, #68]	@ (8005348 <HAL_ADC_ConfigChannel+0x258>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005306:	4b11      	ldr	r3, [pc, #68]	@ (800534c <HAL_ADC_ConfigChannel+0x25c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a11      	ldr	r2, [pc, #68]	@ (8005350 <HAL_ADC_ConfigChannel+0x260>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0c9a      	lsrs	r2, r3, #18
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800531c:	e002      	b.n	8005324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3b01      	subs	r3, #1
 8005322:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f9      	bne.n	800531e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012300 	.word	0x40012300
 8005344:	40012000 	.word	0x40012000
 8005348:	10000012 	.word	0x10000012
 800534c:	20000000 	.word	0x20000000
 8005350:	431bde83 	.word	0x431bde83

08005354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800535c:	4b79      	ldr	r3, [pc, #484]	@ (8005544 <ADC_Init+0x1f0>)
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	021a      	lsls	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e6:	4a58      	ldr	r2, [pc, #352]	@ (8005548 <ADC_Init+0x1f4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800541c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	e00f      	b.n	8005452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005450:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0202 	bic.w	r2, r2, #2
 8005460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6899      	ldr	r1, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7e1b      	ldrb	r3, [r3, #24]
 800546c:	005a      	lsls	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800549e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	3b01      	subs	r3, #1
 80054ac:	035a      	lsls	r2, r3, #13
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	e007      	b.n	80054c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80054d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	051a      	lsls	r2, r3, #20
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800550a:	025a      	lsls	r2, r3, #9
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6899      	ldr	r1, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	029a      	lsls	r2, r3, #10
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40012300 	.word	0x40012300
 8005548:	0f000001 	.word	0x0f000001

0800554c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800557e:	4a04      	ldr	r2, [pc, #16]	@ (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	60d3      	str	r3, [r2, #12]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005598:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <__NVIC_GetPriorityGrouping+0x18>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 0307 	and.w	r3, r3, #7
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db0b      	blt.n	80055da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	4907      	ldr	r1, [pc, #28]	@ (80055e8 <__NVIC_EnableIRQ+0x38>)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2001      	movs	r0, #1
 80055d2:	fa00 f202 	lsl.w	r2, r0, r2
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e100 	.word	0xe000e100

080055ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	6039      	str	r1, [r7, #0]
 80055f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	db0a      	blt.n	8005616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	490c      	ldr	r1, [pc, #48]	@ (8005638 <__NVIC_SetPriority+0x4c>)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	440b      	add	r3, r1
 8005610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005614:	e00a      	b.n	800562c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4908      	ldr	r1, [pc, #32]	@ (800563c <__NVIC_SetPriority+0x50>)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	3b04      	subs	r3, #4
 8005624:	0112      	lsls	r2, r2, #4
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	440b      	add	r3, r1
 800562a:	761a      	strb	r2, [r3, #24]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000e100 	.word	0xe000e100
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	@ 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f1c3 0307 	rsb	r3, r3, #7
 800565a:	2b04      	cmp	r3, #4
 800565c:	bf28      	it	cs
 800565e:	2304      	movcs	r3, #4
 8005660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3304      	adds	r3, #4
 8005666:	2b06      	cmp	r3, #6
 8005668:	d902      	bls.n	8005670 <NVIC_EncodePriority+0x30>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3b03      	subs	r3, #3
 800566e:	e000      	b.n	8005672 <NVIC_EncodePriority+0x32>
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	401a      	ands	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005688:	f04f 31ff 	mov.w	r1, #4294967295
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	43d9      	mvns	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	4313      	orrs	r3, r2
         );
}
 800569a:	4618      	mov	r0, r3
 800569c:	3724      	adds	r7, #36	@ 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056b8:	d301      	bcc.n	80056be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ba:	2301      	movs	r3, #1
 80056bc:	e00f      	b.n	80056de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <SysTick_Config+0x40>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056c6:	210f      	movs	r1, #15
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	f7ff ff8e 	bl	80055ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <SysTick_Config+0x40>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056d6:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <SysTick_Config+0x40>)
 80056d8:	2207      	movs	r2, #7
 80056da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	e000e010 	.word	0xe000e010

080056ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff29 	bl	800554c <__NVIC_SetPriorityGrouping>
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	4603      	mov	r3, r0
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005714:	f7ff ff3e 	bl	8005594 <__NVIC_GetPriorityGrouping>
 8005718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff ff8e 	bl	8005640 <NVIC_EncodePriority>
 8005724:	4602      	mov	r2, r0
 8005726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572a:	4611      	mov	r1, r2
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff5d 	bl	80055ec <__NVIC_SetPriority>
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	4603      	mov	r3, r0
 8005742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff ff31 	bl	80055b0 <__NVIC_EnableIRQ>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ffa2 	bl	80056a8 <SysTick_Config>
 8005764:	4603      	mov	r3, r0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	@ 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e159      	b.n	8005a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800578c:	2201      	movs	r2, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4013      	ands	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f040 8148 	bne.w	8005a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d005      	beq.n	80057c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d130      	bne.n	8005824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057f8:	2201      	movs	r2, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 0201 	and.w	r2, r3, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b03      	cmp	r3, #3
 800582e:	d017      	beq.n	8005860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d123      	bne.n	80058b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	08da      	lsrs	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3208      	adds	r2, #8
 8005874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	220f      	movs	r2, #15
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	69b9      	ldr	r1, [r7, #24]
 80058b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2203      	movs	r2, #3
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a2 	beq.w	8005a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4b57      	ldr	r3, [pc, #348]	@ (8005a58 <HAL_GPIO_Init+0x2e8>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	4a56      	ldr	r2, [pc, #344]	@ (8005a58 <HAL_GPIO_Init+0x2e8>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005904:	6453      	str	r3, [r2, #68]	@ 0x44
 8005906:	4b54      	ldr	r3, [pc, #336]	@ (8005a58 <HAL_GPIO_Init+0x2e8>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005912:	4a52      	ldr	r2, [pc, #328]	@ (8005a5c <HAL_GPIO_Init+0x2ec>)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	3302      	adds	r3, #2
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	220f      	movs	r2, #15
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a49      	ldr	r2, [pc, #292]	@ (8005a60 <HAL_GPIO_Init+0x2f0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_Init+0x202>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a48      	ldr	r2, [pc, #288]	@ (8005a64 <HAL_GPIO_Init+0x2f4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_Init+0x1fe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a47      	ldr	r2, [pc, #284]	@ (8005a68 <HAL_GPIO_Init+0x2f8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_Init+0x1fa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a46      	ldr	r2, [pc, #280]	@ (8005a6c <HAL_GPIO_Init+0x2fc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_Init+0x1f6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a45      	ldr	r2, [pc, #276]	@ (8005a70 <HAL_GPIO_Init+0x300>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_Init+0x1f2>
 800595e:	2304      	movs	r3, #4
 8005960:	e008      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005962:	2307      	movs	r3, #7
 8005964:	e006      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_Init+0x204>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_Init+0x204>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005972:	2300      	movs	r3, #0
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005984:	4935      	ldr	r1, [pc, #212]	@ (8005a5c <HAL_GPIO_Init+0x2ec>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	3302      	adds	r3, #2
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005992:	4b38      	ldr	r3, [pc, #224]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e0:	4a24      	ldr	r2, [pc, #144]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a10:	4b18      	ldr	r3, [pc, #96]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a34:	4a0f      	ldr	r2, [pc, #60]	@ (8005a74 <HAL_GPIO_Init+0x304>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	f67f aea2 	bls.w	800578c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	@ 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40013c00 	.word	0x40013c00

08005a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e12b      	b.n	8005ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fd ff3e 	bl	8003920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2224      	movs	r2, #36	@ 0x24
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005adc:	f001 fdc6 	bl	800766c <HAL_RCC_GetPCLK1Freq>
 8005ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4a81      	ldr	r2, [pc, #516]	@ (8005cec <HAL_I2C_Init+0x274>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d807      	bhi.n	8005afc <HAL_I2C_Init+0x84>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a80      	ldr	r2, [pc, #512]	@ (8005cf0 <HAL_I2C_Init+0x278>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	bf94      	ite	ls
 8005af4:	2301      	movls	r3, #1
 8005af6:	2300      	movhi	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e006      	b.n	8005b0a <HAL_I2C_Init+0x92>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a7d      	ldr	r2, [pc, #500]	@ (8005cf4 <HAL_I2C_Init+0x27c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bf94      	ite	ls
 8005b04:	2301      	movls	r3, #1
 8005b06:	2300      	movhi	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e0e7      	b.n	8005ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a78      	ldr	r2, [pc, #480]	@ (8005cf8 <HAL_I2C_Init+0x280>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	0c9b      	lsrs	r3, r3, #18
 8005b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a6a      	ldr	r2, [pc, #424]	@ (8005cec <HAL_I2C_Init+0x274>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d802      	bhi.n	8005b4c <HAL_I2C_Init+0xd4>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	e009      	b.n	8005b60 <HAL_I2C_Init+0xe8>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	4a69      	ldr	r2, [pc, #420]	@ (8005cfc <HAL_I2C_Init+0x284>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	3301      	adds	r3, #1
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	495c      	ldr	r1, [pc, #368]	@ (8005cec <HAL_I2C_Init+0x274>)
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	d819      	bhi.n	8005bb4 <HAL_I2C_Init+0x13c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1e59      	subs	r1, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b94:	400b      	ands	r3, r1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_I2C_Init+0x138>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1e59      	subs	r1, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bae:	e051      	b.n	8005c54 <HAL_I2C_Init+0x1dc>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	e04f      	b.n	8005c54 <HAL_I2C_Init+0x1dc>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d111      	bne.n	8005be0 <HAL_I2C_Init+0x168>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1e58      	subs	r0, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	440b      	add	r3, r1
 8005bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf0c      	ite	eq
 8005bd8:	2301      	moveq	r3, #1
 8005bda:	2300      	movne	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e012      	b.n	8005c06 <HAL_I2C_Init+0x18e>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1e58      	subs	r0, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	0099      	lsls	r1, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_I2C_Init+0x196>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e022      	b.n	8005c54 <HAL_I2C_Init+0x1dc>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10e      	bne.n	8005c34 <HAL_I2C_Init+0x1bc>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1e58      	subs	r0, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6859      	ldr	r1, [r3, #4]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	440b      	add	r3, r1
 8005c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c32:	e00f      	b.n	8005c54 <HAL_I2C_Init+0x1dc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1e58      	subs	r0, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	0099      	lsls	r1, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	6809      	ldr	r1, [r1, #0]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6911      	ldr	r1, [r2, #16]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68d2      	ldr	r2, [r2, #12]
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	000186a0 	.word	0x000186a0
 8005cf0:	001e847f 	.word	0x001e847f
 8005cf4:	003d08ff 	.word	0x003d08ff
 8005cf8:	431bde83 	.word	0x431bde83
 8005cfc:	10624dd3 	.word	0x10624dd3

08005d00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	817b      	strh	r3, [r7, #10]
 8005d10:	4613      	mov	r3, r2
 8005d12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7fe fff8 	bl	8004d08 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	f040 80e0 	bne.w	8005ee8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2319      	movs	r3, #25
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4970      	ldr	r1, [pc, #448]	@ (8005ef4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fdf4 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0d3      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_I2C_Master_Transmit+0x50>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e0cc      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d007      	beq.n	8005d76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	@ 0x21
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2210      	movs	r2, #16
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	893a      	ldrh	r2, [r7, #8]
 8005da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a50      	ldr	r2, [pc, #320]	@ (8005ef8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005db8:	8979      	ldrh	r1, [r7, #10]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fbc8 	bl	8006554 <I2C_MasterRequestWrite>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e08d      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005de4:	e066      	b.n	8005eb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	6a39      	ldr	r1, [r7, #32]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 feb2 	bl	8006b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d107      	bne.n	8005e0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e06b      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d11b      	bne.n	8005e88 <HAL_I2C_Master_Transmit+0x188>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	6a39      	ldr	r1, [r7, #32]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fea9 	bl	8006be4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00d      	beq.n	8005eb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d107      	bne.n	8005eb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e01a      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d194      	bne.n	8005de6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e000      	b.n	8005eea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ee8:	2302      	movs	r3, #2
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	00100002 	.word	0x00100002
 8005ef8:	ffff0000 	.word	0xffff0000

08005efc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	@ 0x30
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	607a      	str	r2, [r7, #4]
 8005f06:	461a      	mov	r2, r3
 8005f08:	460b      	mov	r3, r1
 8005f0a:	817b      	strh	r3, [r7, #10]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f10:	f7fe fefa 	bl	8004d08 <HAL_GetTick>
 8005f14:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	f040 8217 	bne.w	8006352 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2319      	movs	r3, #25
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	497c      	ldr	r1, [pc, #496]	@ (8006120 <HAL_I2C_Master_Receive+0x224>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fcf6 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e20a      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_I2C_Master_Receive+0x50>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e203      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d007      	beq.n	8005f72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2222      	movs	r2, #34	@ 0x22
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	893a      	ldrh	r2, [r7, #8]
 8005fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8006124 <HAL_I2C_Master_Receive+0x228>)
 8005fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fb4:	8979      	ldrh	r1, [r7, #10]
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fb4c 	bl	8006658 <I2C_MasterRequestRead>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e1c4      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d113      	bne.n	8005ffa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e198      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d11b      	bne.n	800603a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e178      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603e:	2b02      	cmp	r3, #2
 8006040:	d11b      	bne.n	800607a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	e158      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060a0:	e144      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	f200 80f1 	bhi.w	800628e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d123      	bne.n	80060fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fddb 	bl	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e145      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060fa:	e117      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006100:	2b02      	cmp	r3, #2
 8006102:	d14e      	bne.n	80061a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	2200      	movs	r2, #0
 800610c:	4906      	ldr	r1, [pc, #24]	@ (8006128 <HAL_I2C_Master_Receive+0x22c>)
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fc06 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e11a      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
 800611e:	bf00      	nop
 8006120:	00100002 	.word	0x00100002
 8006124:	ffff0000 	.word	0xffff0000
 8006128:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061a0:	e0c4      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	2200      	movs	r2, #0
 80061aa:	496c      	ldr	r1, [pc, #432]	@ (800635c <HAL_I2C_Master_Receive+0x460>)
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fbb7 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0cb      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	4955      	ldr	r1, [pc, #340]	@ (800635c <HAL_I2C_Master_Receive+0x460>)
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fb89 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e09d      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800628c:	e04e      	b.n	800632c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fcee 	bl	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e058      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d124      	bne.n	800632c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d107      	bne.n	80062fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f aeb6 	bne.w	80060a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e000      	b.n	8006354 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006352:	2302      	movs	r3, #2
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	@ 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	00010004 	.word	0x00010004

08006360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	461a      	mov	r2, r3
 800636e:	4603      	mov	r3, r0
 8006370:	817b      	strh	r3, [r7, #10]
 8006372:	460b      	mov	r3, r1
 8006374:	813b      	strh	r3, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800637a:	f7fe fcc5 	bl	8004d08 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b20      	cmp	r3, #32
 800638a:	f040 80d9 	bne.w	8006540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2319      	movs	r3, #25
 8006394:	2201      	movs	r2, #1
 8006396:	496d      	ldr	r1, [pc, #436]	@ (800654c <HAL_I2C_Mem_Write+0x1ec>)
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fac1 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0cc      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_I2C_Mem_Write+0x56>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e0c5      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d007      	beq.n	80063dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2221      	movs	r2, #33	@ 0x21
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2240      	movs	r2, #64	@ 0x40
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800640c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a4d      	ldr	r2, [pc, #308]	@ (8006550 <HAL_I2C_Mem_Write+0x1f0>)
 800641c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641e:	88f8      	ldrh	r0, [r7, #6]
 8006420:	893a      	ldrh	r2, [r7, #8]
 8006422:	8979      	ldrh	r1, [r7, #10]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4603      	mov	r3, r0
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f9e0 	bl	80067f4 <I2C_RequestMemoryWrite>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d052      	beq.n	80064e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e081      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb86 	bl	8006b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00d      	beq.n	800646a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	2b04      	cmp	r3, #4
 8006454:	d107      	bne.n	8006466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06b      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d11b      	bne.n	80064e0 <HAL_I2C_Mem_Write+0x180>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d017      	beq.n	80064e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1aa      	bne.n	800643e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb79 	bl	8006be4 <I2C_WaitOnBTFFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800650e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e016      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	00100002 	.word	0x00100002
 8006550:	ffff0000 	.word	0xffff0000

08006554 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	460b      	mov	r3, r1
 8006562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d006      	beq.n	800657e <I2C_MasterRequestWrite+0x2a>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d003      	beq.n	800657e <I2C_MasterRequestWrite+0x2a>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800657c:	d108      	bne.n	8006590 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e00b      	b.n	80065a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	2b12      	cmp	r3, #18
 8006596:	d107      	bne.n	80065a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f9b3 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ce:	d103      	bne.n	80065d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e035      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065e4:	d108      	bne.n	80065f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e6:	897b      	ldrh	r3, [r7, #10]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	e01b      	b.n	8006630 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	11db      	asrs	r3, r3, #7
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f063 030f 	orn	r3, r3, #15
 8006608:	b2da      	uxtb	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	490e      	ldr	r1, [pc, #56]	@ (8006650 <I2C_MasterRequestWrite+0xfc>)
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f9fc 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e010      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006626:	897b      	ldrh	r3, [r7, #10]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4907      	ldr	r1, [pc, #28]	@ (8006654 <I2C_MasterRequestWrite+0x100>)
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f9ec 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	00010008 	.word	0x00010008
 8006654:	00010002 	.word	0x00010002

08006658 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800667c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d006      	beq.n	8006692 <I2C_MasterRequestRead+0x3a>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d003      	beq.n	8006692 <I2C_MasterRequestRead+0x3a>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006690:	d108      	bne.n	80066a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e00b      	b.n	80066bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	2b11      	cmp	r3, #17
 80066aa:	d107      	bne.n	80066bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f929 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e2:	d103      	bne.n	80066ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e079      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f8:	d108      	bne.n	800670c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066fa:	897b      	ldrh	r3, [r7, #10]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	611a      	str	r2, [r3, #16]
 800670a:	e05f      	b.n	80067cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	11db      	asrs	r3, r3, #7
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0306 	and.w	r3, r3, #6
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f063 030f 	orn	r3, r3, #15
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4930      	ldr	r1, [pc, #192]	@ (80067ec <I2C_MasterRequestRead+0x194>)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f972 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e054      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	b2da      	uxtb	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4929      	ldr	r1, [pc, #164]	@ (80067f0 <I2C_MasterRequestRead+0x198>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f962 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e044      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800677e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f8c7 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a6:	d103      	bne.n	80067b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e017      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067b4:	897b      	ldrh	r3, [r7, #10]
 80067b6:	11db      	asrs	r3, r3, #7
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0306 	and.w	r3, r3, #6
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f063 030e 	orn	r3, r3, #14
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4907      	ldr	r1, [pc, #28]	@ (80067f0 <I2C_MasterRequestRead+0x198>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f91e 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	00010008 	.word	0x00010008
 80067f0:	00010002 	.word	0x00010002

080067f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4603      	mov	r3, r0
 8006804:	817b      	strh	r3, [r7, #10]
 8006806:	460b      	mov	r3, r1
 8006808:	813b      	strh	r3, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800681c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2200      	movs	r2, #0
 8006826:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f878 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006844:	d103      	bne.n	800684e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800684c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e05f      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	492d      	ldr	r1, [pc, #180]	@ (800691c <I2C_RequestMemoryWrite+0x128>)
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f8d3 	bl	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e04c      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006890:	6a39      	ldr	r1, [r7, #32]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f95e 	bl	8006b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d107      	bne.n	80068b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e02b      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d105      	bne.n	80068cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068c0:	893b      	ldrh	r3, [r7, #8]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	611a      	str	r2, [r3, #16]
 80068ca:	e021      	b.n	8006910 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068cc:	893b      	ldrh	r3, [r7, #8]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f938 	bl	8006b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d107      	bne.n	8006902 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e005      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006906:	893b      	ldrh	r3, [r7, #8]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	00010002 	.word	0x00010002

08006920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006930:	e048      	b.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d044      	beq.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fe f9e5 	bl	8004d08 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d139      	bne.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10d      	bne.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x56>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	43da      	mvns	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf0c      	ite	eq
 800696c:	2301      	moveq	r3, #1
 800696e:	2300      	movne	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	e00c      	b.n	8006990 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	43da      	mvns	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	d116      	bne.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e023      	b.n	8006a0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d10d      	bne.n	80069ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	43da      	mvns	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	e00c      	b.n	8006a04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	43da      	mvns	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d093      	beq.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a22:	e071      	b.n	8006b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a32:	d123      	bne.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e067      	b.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d041      	beq.n	8006b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a84:	f7fe f940 	bl	8004d08 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d302      	bcc.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d136      	bne.n	8006b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10c      	bne.n	8006abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	43da      	mvns	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e00b      	b.n	8006ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	43da      	mvns	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e021      	b.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d10c      	bne.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e00b      	b.n	8006b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	43da      	mvns	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f47f af6d 	bne.w	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b60:	e034      	b.n	8006bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f8e3 	bl	8006d2e <I2C_IsAcknowledgeFailed>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e034      	b.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d028      	beq.n	8006bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7a:	f7fe f8c5 	bl	8004d08 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11d      	bne.n	8006bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9a:	2b80      	cmp	r3, #128	@ 0x80
 8006b9c:	d016      	beq.n	8006bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e007      	b.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd6:	2b80      	cmp	r3, #128	@ 0x80
 8006bd8:	d1c3      	bne.n	8006b62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bf0:	e034      	b.n	8006c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f89b 	bl	8006d2e <I2C_IsAcknowledgeFailed>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e034      	b.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d028      	beq.n	8006c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7fe f87d 	bl	8004d08 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11d      	bne.n	8006c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d016      	beq.n	8006c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	f043 0220 	orr.w	r2, r3, #32
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e007      	b.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d1c3      	bne.n	8006bf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c80:	e049      	b.n	8006d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d119      	bne.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0210 	mvn.w	r2, #16
 8006c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e030      	b.n	8006d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc4:	f7fe f820 	bl	8004d08 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d11d      	bne.n	8006d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	d016      	beq.n	8006d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e007      	b.n	8006d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b40      	cmp	r3, #64	@ 0x40
 8006d22:	d1ae      	bne.n	8006c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d44:	d11b      	bne.n	8006d7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	f043 0204 	orr.w	r2, r3, #4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e267      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d075      	beq.n	8006e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006daa:	4b88      	ldr	r3, [pc, #544]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 030c 	and.w	r3, r3, #12
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d00c      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db6:	4b85      	ldr	r3, [pc, #532]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d112      	bne.n	8006de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc2:	4b82      	ldr	r3, [pc, #520]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dce:	d10b      	bne.n	8006de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d05b      	beq.n	8006e94 <HAL_RCC_OscConfig+0x108>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d157      	bne.n	8006e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e242      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df0:	d106      	bne.n	8006e00 <HAL_RCC_OscConfig+0x74>
 8006df2:	4b76      	ldr	r3, [pc, #472]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a75      	ldr	r2, [pc, #468]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e01d      	b.n	8006e3c <HAL_RCC_OscConfig+0xb0>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCC_OscConfig+0x98>
 8006e0a:	4b70      	ldr	r3, [pc, #448]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6f      	ldr	r2, [pc, #444]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	4b6d      	ldr	r3, [pc, #436]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a6c      	ldr	r2, [pc, #432]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e00b      	b.n	8006e3c <HAL_RCC_OscConfig+0xb0>
 8006e24:	4b69      	ldr	r3, [pc, #420]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a68      	ldr	r2, [pc, #416]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	4b66      	ldr	r3, [pc, #408]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a65      	ldr	r2, [pc, #404]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d013      	beq.n	8006e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e44:	f7fd ff60 	bl	8004d08 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e4c:	f7fd ff5c 	bl	8004d08 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b64      	cmp	r3, #100	@ 0x64
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e207      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCC_OscConfig+0xc0>
 8006e6a:	e014      	b.n	8006e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6c:	f7fd ff4c 	bl	8004d08 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e74:	f7fd ff48 	bl	8004d08 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b64      	cmp	r3, #100	@ 0x64
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e1f3      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e86:	4b51      	ldr	r3, [pc, #324]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0xe8>
 8006e92:	e000      	b.n	8006e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d063      	beq.n	8006f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eae:	4b47      	ldr	r3, [pc, #284]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d11c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eba:	4b44      	ldr	r3, [pc, #272]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d116      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec6:	4b41      	ldr	r3, [pc, #260]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <HAL_RCC_OscConfig+0x152>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e1c7      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ede:	4b3b      	ldr	r3, [pc, #236]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4937      	ldr	r1, [pc, #220]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef2:	e03a      	b.n	8006f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d020      	beq.n	8006f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006efc:	4b34      	ldr	r3, [pc, #208]	@ (8006fd0 <HAL_RCC_OscConfig+0x244>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f02:	f7fd ff01 	bl	8004d08 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f0a:	f7fd fefd 	bl	8004d08 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e1a8      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f28:	4b28      	ldr	r3, [pc, #160]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4925      	ldr	r1, [pc, #148]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	600b      	str	r3, [r1, #0]
 8006f3c:	e015      	b.n	8006f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f3e:	4b24      	ldr	r3, [pc, #144]	@ (8006fd0 <HAL_RCC_OscConfig+0x244>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fd fee0 	bl	8004d08 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f4c:	f7fd fedc 	bl	8004d08 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e187      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d036      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f7e:	4b15      	ldr	r3, [pc, #84]	@ (8006fd4 <HAL_RCC_OscConfig+0x248>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f84:	f7fd fec0 	bl	8004d08 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f8c:	f7fd febc 	bl	8004d08 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e167      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_RCC_OscConfig+0x240>)
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x200>
 8006faa:	e01b      	b.n	8006fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fac:	4b09      	ldr	r3, [pc, #36]	@ (8006fd4 <HAL_RCC_OscConfig+0x248>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fb2:	f7fd fea9 	bl	8004d08 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb8:	e00e      	b.n	8006fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fba:	f7fd fea5 	bl	8004d08 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d907      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e150      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	42470000 	.word	0x42470000
 8006fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd8:	4b88      	ldr	r3, [pc, #544]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8006fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1ea      	bne.n	8006fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8097 	beq.w	8007120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ff6:	4b81      	ldr	r3, [pc, #516]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10f      	bne.n	8007022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007002:	2300      	movs	r3, #0
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	4b7d      	ldr	r3, [pc, #500]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	4a7c      	ldr	r2, [pc, #496]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800700c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007010:	6413      	str	r3, [r2, #64]	@ 0x40
 8007012:	4b7a      	ldr	r3, [pc, #488]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800701a:	60bb      	str	r3, [r7, #8]
 800701c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007022:	4b77      	ldr	r3, [pc, #476]	@ (8007200 <HAL_RCC_OscConfig+0x474>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d118      	bne.n	8007060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800702e:	4b74      	ldr	r3, [pc, #464]	@ (8007200 <HAL_RCC_OscConfig+0x474>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a73      	ldr	r2, [pc, #460]	@ (8007200 <HAL_RCC_OscConfig+0x474>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703a:	f7fd fe65 	bl	8004d08 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007042:	f7fd fe61 	bl	8004d08 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e10c      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007054:	4b6a      	ldr	r3, [pc, #424]	@ (8007200 <HAL_RCC_OscConfig+0x474>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d106      	bne.n	8007076 <HAL_RCC_OscConfig+0x2ea>
 8007068:	4b64      	ldr	r3, [pc, #400]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706c:	4a63      	ldr	r2, [pc, #396]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	6713      	str	r3, [r2, #112]	@ 0x70
 8007074:	e01c      	b.n	80070b0 <HAL_RCC_OscConfig+0x324>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b05      	cmp	r3, #5
 800707c:	d10c      	bne.n	8007098 <HAL_RCC_OscConfig+0x30c>
 800707e:	4b5f      	ldr	r3, [pc, #380]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007082:	4a5e      	ldr	r2, [pc, #376]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007084:	f043 0304 	orr.w	r3, r3, #4
 8007088:	6713      	str	r3, [r2, #112]	@ 0x70
 800708a:	4b5c      	ldr	r3, [pc, #368]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708e:	4a5b      	ldr	r2, [pc, #364]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6713      	str	r3, [r2, #112]	@ 0x70
 8007096:	e00b      	b.n	80070b0 <HAL_RCC_OscConfig+0x324>
 8007098:	4b58      	ldr	r3, [pc, #352]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709c:	4a57      	ldr	r2, [pc, #348]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a4:	4b55      	ldr	r3, [pc, #340]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 80070a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a8:	4a54      	ldr	r2, [pc, #336]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 80070aa:	f023 0304 	bic.w	r3, r3, #4
 80070ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d015      	beq.n	80070e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b8:	f7fd fe26 	bl	8004d08 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070be:	e00a      	b.n	80070d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c0:	f7fd fe22 	bl	8004d08 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e0cb      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d6:	4b49      	ldr	r3, [pc, #292]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0ee      	beq.n	80070c0 <HAL_RCC_OscConfig+0x334>
 80070e2:	e014      	b.n	800710e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e4:	f7fd fe10 	bl	8004d08 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ea:	e00a      	b.n	8007102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ec:	f7fd fe0c 	bl	8004d08 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e0b5      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007102:	4b3e      	ldr	r3, [pc, #248]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1ee      	bne.n	80070ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d105      	bne.n	8007120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007114:	4b39      	ldr	r3, [pc, #228]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	4a38      	ldr	r2, [pc, #224]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800711a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800711e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80a1 	beq.w	800726c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800712a:	4b34      	ldr	r3, [pc, #208]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b08      	cmp	r3, #8
 8007134:	d05c      	beq.n	80071f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d141      	bne.n	80071c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713e:	4b31      	ldr	r3, [pc, #196]	@ (8007204 <HAL_RCC_OscConfig+0x478>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fd fde0 	bl	8004d08 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714c:	f7fd fddc 	bl	8004d08 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e087      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715e:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69da      	ldr	r2, [r3, #28]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007178:	019b      	lsls	r3, r3, #6
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	3b01      	subs	r3, #1
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	491b      	ldr	r1, [pc, #108]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 8007190:	4313      	orrs	r3, r2
 8007192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007194:	4b1b      	ldr	r3, [pc, #108]	@ (8007204 <HAL_RCC_OscConfig+0x478>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719a:	f7fd fdb5 	bl	8004d08 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a2:	f7fd fdb1 	bl	8004d08 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e05c      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b4:	4b11      	ldr	r3, [pc, #68]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCC_OscConfig+0x416>
 80071c0:	e054      	b.n	800726c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c2:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <HAL_RCC_OscConfig+0x478>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7fd fd9e 	bl	8004d08 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fd fd9a 	bl	8004d08 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e045      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCC_OscConfig+0x470>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x444>
 80071ee:	e03d      	b.n	800726c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e038      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
 80071fc:	40023800 	.word	0x40023800
 8007200:	40007000 	.word	0x40007000
 8007204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007208:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <HAL_RCC_OscConfig+0x4ec>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d028      	beq.n	8007268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007220:	429a      	cmp	r2, r3
 8007222:	d121      	bne.n	8007268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800722e:	429a      	cmp	r2, r3
 8007230:	d11a      	bne.n	8007268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800723e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007240:	4293      	cmp	r3, r2
 8007242:	d111      	bne.n	8007268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d107      	bne.n	8007268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800

0800727c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0cc      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007290:	4b68      	ldr	r3, [pc, #416]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d90c      	bls.n	80072b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729e:	4b65      	ldr	r3, [pc, #404]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a6:	4b63      	ldr	r3, [pc, #396]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0b8      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d020      	beq.n	8007306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072d0:	4b59      	ldr	r3, [pc, #356]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4a58      	ldr	r2, [pc, #352]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072e8:	4b53      	ldr	r3, [pc, #332]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	4a52      	ldr	r2, [pc, #328]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072f4:	4b50      	ldr	r3, [pc, #320]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	494d      	ldr	r1, [pc, #308]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	4313      	orrs	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d044      	beq.n	800739c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731a:	4b47      	ldr	r3, [pc, #284]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d119      	bne.n	800735a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e07f      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007336:	2b03      	cmp	r3, #3
 8007338:	d107      	bne.n	800734a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733a:	4b3f      	ldr	r3, [pc, #252]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e06f      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734a:	4b3b      	ldr	r3, [pc, #236]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e067      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800735a:	4b37      	ldr	r3, [pc, #220]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 0203 	bic.w	r2, r3, #3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4934      	ldr	r1, [pc, #208]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800736c:	f7fd fccc 	bl	8004d08 <HAL_GetTick>
 8007370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007372:	e00a      	b.n	800738a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007374:	f7fd fcc8 	bl	8004d08 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e04f      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738a:	4b2b      	ldr	r3, [pc, #172]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 020c 	and.w	r2, r3, #12
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	429a      	cmp	r2, r3
 800739a:	d1eb      	bne.n	8007374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800739c:	4b25      	ldr	r3, [pc, #148]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d20c      	bcs.n	80073c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073aa:	4b22      	ldr	r3, [pc, #136]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b2:	4b20      	ldr	r3, [pc, #128]	@ (8007434 <HAL_RCC_ClockConfig+0x1b8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d001      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e032      	b.n	800742a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d0:	4b19      	ldr	r3, [pc, #100]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4916      	ldr	r1, [pc, #88]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d009      	beq.n	8007402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ee:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	490e      	ldr	r1, [pc, #56]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007402:	f000 f821 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 8007406:	4602      	mov	r2, r0
 8007408:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <HAL_RCC_ClockConfig+0x1bc>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	490a      	ldr	r1, [pc, #40]	@ (800743c <HAL_RCC_ClockConfig+0x1c0>)
 8007414:	5ccb      	ldrb	r3, [r1, r3]
 8007416:	fa22 f303 	lsr.w	r3, r2, r3
 800741a:	4a09      	ldr	r2, [pc, #36]	@ (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 800741c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800741e:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7fd fc2c 	bl	8004c80 <HAL_InitTick>

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40023c00 	.word	0x40023c00
 8007438:	40023800 	.word	0x40023800
 800743c:	0800bfa8 	.word	0x0800bfa8
 8007440:	20000000 	.word	0x20000000
 8007444:	20000004 	.word	0x20000004

08007448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800744c:	b094      	sub	sp, #80	@ 0x50
 800744e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	647b      	str	r3, [r7, #68]	@ 0x44
 8007454:	2300      	movs	r3, #0
 8007456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007458:	2300      	movs	r3, #0
 800745a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007460:	4b79      	ldr	r3, [pc, #484]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d00d      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0x40>
 800746c:	2b08      	cmp	r3, #8
 800746e:	f200 80e1 	bhi.w	8007634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x34>
 8007476:	2b04      	cmp	r3, #4
 8007478:	d003      	beq.n	8007482 <HAL_RCC_GetSysClockFreq+0x3a>
 800747a:	e0db      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800747c:	4b73      	ldr	r3, [pc, #460]	@ (800764c <HAL_RCC_GetSysClockFreq+0x204>)
 800747e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007480:	e0db      	b.n	800763a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007482:	4b73      	ldr	r3, [pc, #460]	@ (8007650 <HAL_RCC_GetSysClockFreq+0x208>)
 8007484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007486:	e0d8      	b.n	800763a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007488:	4b6f      	ldr	r3, [pc, #444]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007490:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007492:	4b6d      	ldr	r3, [pc, #436]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d063      	beq.n	8007566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800749e:	4b6a      	ldr	r3, [pc, #424]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	099b      	lsrs	r3, r3, #6
 80074a4:	2200      	movs	r2, #0
 80074a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074b2:	2300      	movs	r3, #0
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074ba:	4622      	mov	r2, r4
 80074bc:	462b      	mov	r3, r5
 80074be:	f04f 0000 	mov.w	r0, #0
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	0159      	lsls	r1, r3, #5
 80074c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074cc:	0150      	lsls	r0, r2, #5
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4621      	mov	r1, r4
 80074d4:	1a51      	subs	r1, r2, r1
 80074d6:	6139      	str	r1, [r7, #16]
 80074d8:	4629      	mov	r1, r5
 80074da:	eb63 0301 	sbc.w	r3, r3, r1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ec:	4659      	mov	r1, fp
 80074ee:	018b      	lsls	r3, r1, #6
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074f6:	4651      	mov	r1, sl
 80074f8:	018a      	lsls	r2, r1, #6
 80074fa:	4651      	mov	r1, sl
 80074fc:	ebb2 0801 	subs.w	r8, r2, r1
 8007500:	4659      	mov	r1, fp
 8007502:	eb63 0901 	sbc.w	r9, r3, r1
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800751a:	4690      	mov	r8, r2
 800751c:	4699      	mov	r9, r3
 800751e:	4623      	mov	r3, r4
 8007520:	eb18 0303 	adds.w	r3, r8, r3
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	462b      	mov	r3, r5
 8007528:	eb49 0303 	adc.w	r3, r9, r3
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800753a:	4629      	mov	r1, r5
 800753c:	024b      	lsls	r3, r1, #9
 800753e:	4621      	mov	r1, r4
 8007540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007544:	4621      	mov	r1, r4
 8007546:	024a      	lsls	r2, r1, #9
 8007548:	4610      	mov	r0, r2
 800754a:	4619      	mov	r1, r3
 800754c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754e:	2200      	movs	r2, #0
 8007550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007558:	f7f9 fb22 	bl	8000ba0 <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4613      	mov	r3, r2
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007564:	e058      	b.n	8007618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007566:	4b38      	ldr	r3, [pc, #224]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	099b      	lsrs	r3, r3, #6
 800756c:	2200      	movs	r2, #0
 800756e:	4618      	mov	r0, r3
 8007570:	4611      	mov	r1, r2
 8007572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	2300      	movs	r3, #0
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
 800757c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	0159      	lsls	r1, r3, #5
 800758e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007592:	0150      	lsls	r0, r2, #5
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4641      	mov	r1, r8
 800759a:	ebb2 0a01 	subs.w	sl, r2, r1
 800759e:	4649      	mov	r1, r9
 80075a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075b8:	ebb2 040a 	subs.w	r4, r2, sl
 80075bc:	eb63 050b 	sbc.w	r5, r3, fp
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	00eb      	lsls	r3, r5, #3
 80075ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ce:	00e2      	lsls	r2, r4, #3
 80075d0:	4614      	mov	r4, r2
 80075d2:	461d      	mov	r5, r3
 80075d4:	4643      	mov	r3, r8
 80075d6:	18e3      	adds	r3, r4, r3
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	464b      	mov	r3, r9
 80075dc:	eb45 0303 	adc.w	r3, r5, r3
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ee:	4629      	mov	r1, r5
 80075f0:	028b      	lsls	r3, r1, #10
 80075f2:	4621      	mov	r1, r4
 80075f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075f8:	4621      	mov	r1, r4
 80075fa:	028a      	lsls	r2, r1, #10
 80075fc:	4610      	mov	r0, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007602:	2200      	movs	r2, #0
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	61fa      	str	r2, [r7, #28]
 8007608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800760c:	f7f9 fac8 	bl	8000ba0 <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4613      	mov	r3, r2
 8007616:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007618:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x200>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	0c1b      	lsrs	r3, r3, #16
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	3301      	adds	r3, #1
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007628:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800762a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007632:	e002      	b.n	800763a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <HAL_RCC_GetSysClockFreq+0x204>)
 8007636:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800763a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800763c:	4618      	mov	r0, r3
 800763e:	3750      	adds	r7, #80	@ 0x50
 8007640:	46bd      	mov	sp, r7
 8007642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800
 800764c:	00f42400 	.word	0x00f42400
 8007650:	007a1200 	.word	0x007a1200

08007654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007658:	4b03      	ldr	r3, [pc, #12]	@ (8007668 <HAL_RCC_GetHCLKFreq+0x14>)
 800765a:	681b      	ldr	r3, [r3, #0]
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000000 	.word	0x20000000

0800766c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007670:	f7ff fff0 	bl	8007654 <HAL_RCC_GetHCLKFreq>
 8007674:	4602      	mov	r2, r0
 8007676:	4b05      	ldr	r3, [pc, #20]	@ (800768c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	0a9b      	lsrs	r3, r3, #10
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	4903      	ldr	r1, [pc, #12]	@ (8007690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007682:	5ccb      	ldrb	r3, [r1, r3]
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007688:	4618      	mov	r0, r3
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40023800 	.word	0x40023800
 8007690:	0800bfb8 	.word	0x0800bfb8

08007694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007698:	f7ff ffdc 	bl	8007654 <HAL_RCC_GetHCLKFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	0b5b      	lsrs	r3, r3, #13
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	4903      	ldr	r1, [pc, #12]	@ (80076b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40023800 	.word	0x40023800
 80076b8:	0800bfb8 	.word	0x0800bfb8

080076bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e041      	b.n	8007752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fc f964 	bl	80039b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f000 ffa2 	bl	8008644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e041      	b.n	80077f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f839 	bl	80077f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3304      	adds	r3, #4
 8007796:	4619      	mov	r1, r3
 8007798:	4610      	mov	r0, r2
 800779a:	f000 ff53 	bl	8008644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_TIM_PWM_Start+0x24>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e022      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d109      	bne.n	800784a <HAL_TIM_PWM_Start+0x3e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b01      	cmp	r3, #1
 8007840:	bf14      	ite	ne
 8007842:	2301      	movne	r3, #1
 8007844:	2300      	moveq	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	e015      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d109      	bne.n	8007864 <HAL_TIM_PWM_Start+0x58>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e008      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e068      	b.n	8007950 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <HAL_TIM_PWM_Start+0x82>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800788c:	e013      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d104      	bne.n	800789e <HAL_TIM_PWM_Start+0x92>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800789c:	e00b      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_PWM_Start+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078ac:	e003      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 fb22 	bl	8008f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a23      	ldr	r2, [pc, #140]	@ (8007958 <HAL_TIM_PWM_Start+0x14c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d107      	bne.n	80078de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007958 <HAL_TIM_PWM_Start+0x14c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <HAL_TIM_PWM_Start+0x10e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f0:	d013      	beq.n	800791a <HAL_TIM_PWM_Start+0x10e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a19      	ldr	r2, [pc, #100]	@ (800795c <HAL_TIM_PWM_Start+0x150>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <HAL_TIM_PWM_Start+0x10e>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a17      	ldr	r2, [pc, #92]	@ (8007960 <HAL_TIM_PWM_Start+0x154>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_TIM_PWM_Start+0x10e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	@ (8007964 <HAL_TIM_PWM_Start+0x158>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <HAL_TIM_PWM_Start+0x10e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a14      	ldr	r2, [pc, #80]	@ (8007968 <HAL_TIM_PWM_Start+0x15c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d111      	bne.n	800793e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b06      	cmp	r3, #6
 800792a:	d010      	beq.n	800794e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793c:	e007      	b.n	800794e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40010000 	.word	0x40010000
 800795c:	40000400 	.word	0x40000400
 8007960:	40000800 	.word	0x40000800
 8007964:	40000c00 	.word	0x40000c00
 8007968:	40014000 	.word	0x40014000

0800796c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e041      	b.n	8007a02 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f839 	bl	8007a0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f000 fe4a 	bl	8008644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <HAL_TIM_IC_Start_IT+0x1e>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	e013      	b.n	8007a66 <HAL_TIM_IC_Start_IT+0x46>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_IC_Start_IT+0x2e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_IC_Start_IT+0x46>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_IC_Start_IT+0x3e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	e003      	b.n	8007a66 <HAL_TIM_IC_Start_IT+0x46>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <HAL_TIM_IC_Start_IT+0x58>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	e013      	b.n	8007aa0 <HAL_TIM_IC_Start_IT+0x80>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d104      	bne.n	8007a88 <HAL_TIM_IC_Start_IT+0x68>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	e00b      	b.n	8007aa0 <HAL_TIM_IC_Start_IT+0x80>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d104      	bne.n	8007a98 <HAL_TIM_IC_Start_IT+0x78>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	e003      	b.n	8007aa0 <HAL_TIM_IC_Start_IT+0x80>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d102      	bne.n	8007aae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aa8:	7b7b      	ldrb	r3, [r7, #13]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d001      	beq.n	8007ab2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e0c2      	b.n	8007c38 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <HAL_TIM_IC_Start_IT+0xa2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac0:	e013      	b.n	8007aea <HAL_TIM_IC_Start_IT+0xca>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d104      	bne.n	8007ad2 <HAL_TIM_IC_Start_IT+0xb2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad0:	e00b      	b.n	8007aea <HAL_TIM_IC_Start_IT+0xca>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_IC_Start_IT+0xc2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ae0:	e003      	b.n	8007aea <HAL_TIM_IC_Start_IT+0xca>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <HAL_TIM_IC_Start_IT+0xda>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007af8:	e013      	b.n	8007b22 <HAL_TIM_IC_Start_IT+0x102>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d104      	bne.n	8007b0a <HAL_TIM_IC_Start_IT+0xea>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b08:	e00b      	b.n	8007b22 <HAL_TIM_IC_Start_IT+0x102>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d104      	bne.n	8007b1a <HAL_TIM_IC_Start_IT+0xfa>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b18:	e003      	b.n	8007b22 <HAL_TIM_IC_Start_IT+0x102>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b0c      	cmp	r3, #12
 8007b26:	d841      	bhi.n	8007bac <HAL_TIM_IC_Start_IT+0x18c>
 8007b28:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <HAL_TIM_IC_Start_IT+0x110>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b65 	.word	0x08007b65
 8007b34:	08007bad 	.word	0x08007bad
 8007b38:	08007bad 	.word	0x08007bad
 8007b3c:	08007bad 	.word	0x08007bad
 8007b40:	08007b77 	.word	0x08007b77
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007bad 	.word	0x08007bad
 8007b4c:	08007bad 	.word	0x08007bad
 8007b50:	08007b89 	.word	0x08007b89
 8007b54:	08007bad 	.word	0x08007bad
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007bad 	.word	0x08007bad
 8007b60:	08007b9b 	.word	0x08007b9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0202 	orr.w	r2, r2, #2
 8007b72:	60da      	str	r2, [r3, #12]
      break;
 8007b74:	e01d      	b.n	8007bb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0204 	orr.w	r2, r2, #4
 8007b84:	60da      	str	r2, [r3, #12]
      break;
 8007b86:	e014      	b.n	8007bb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0208 	orr.w	r2, r2, #8
 8007b96:	60da      	str	r2, [r3, #12]
      break;
 8007b98:	e00b      	b.n	8007bb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0210 	orr.w	r2, r2, #16
 8007ba8:	60da      	str	r2, [r3, #12]
      break;
 8007baa:	e002      	b.n	8007bb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d13e      	bne.n	8007c36 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f9a1 	bl	8008f08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1d      	ldr	r2, [pc, #116]	@ (8007c40 <HAL_TIM_IC_Start_IT+0x220>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d018      	beq.n	8007c02 <HAL_TIM_IC_Start_IT+0x1e2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd8:	d013      	beq.n	8007c02 <HAL_TIM_IC_Start_IT+0x1e2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a19      	ldr	r2, [pc, #100]	@ (8007c44 <HAL_TIM_IC_Start_IT+0x224>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00e      	beq.n	8007c02 <HAL_TIM_IC_Start_IT+0x1e2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a17      	ldr	r2, [pc, #92]	@ (8007c48 <HAL_TIM_IC_Start_IT+0x228>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_TIM_IC_Start_IT+0x1e2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a16      	ldr	r2, [pc, #88]	@ (8007c4c <HAL_TIM_IC_Start_IT+0x22c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_TIM_IC_Start_IT+0x1e2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a14      	ldr	r2, [pc, #80]	@ (8007c50 <HAL_TIM_IC_Start_IT+0x230>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d111      	bne.n	8007c26 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b06      	cmp	r3, #6
 8007c12:	d010      	beq.n	8007c36 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0201 	orr.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c24:	e007      	b.n	8007c36 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40014000 	.word	0x40014000

08007c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e097      	b.n	8007d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d106      	bne.n	8007c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fb ff11 	bl	8003aa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c98:	f023 0307 	bic.w	r3, r3, #7
 8007c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f000 fccb 	bl	8008644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007cf4:	f023 030c 	bic.w	r3, r3, #12
 8007cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	4313      	orrs	r3, r2
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	031b      	lsls	r3, r3, #12
 8007d24:	4313      	orrs	r3, r2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	4313      	orrs	r3, r2
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d110      	bne.n	8007df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d102      	bne.n	8007ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dd6:	7b7b      	ldrb	r3, [r7, #13]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d001      	beq.n	8007de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e069      	b.n	8007eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df0:	e031      	b.n	8007e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d110      	bne.n	8007e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d102      	bne.n	8007e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dfe:	7b3b      	ldrb	r3, [r7, #12]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d001      	beq.n	8007e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e055      	b.n	8007eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e18:	e01d      	b.n	8007e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d108      	bne.n	8007e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d105      	bne.n	8007e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e26:	7b7b      	ldrb	r3, [r7, #13]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d102      	bne.n	8007e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e2c:	7b3b      	ldrb	r3, [r7, #12]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d001      	beq.n	8007e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e03e      	b.n	8007eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_TIM_Encoder_Start+0xc4>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d008      	beq.n	8007e74 <HAL_TIM_Encoder_Start+0xd4>
 8007e62:	e00f      	b.n	8007e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 f84b 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007e72:	e016      	b.n	8007ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	2104      	movs	r1, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f843 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007e82:	e00e      	b.n	8007ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f83b 	bl	8008f08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2201      	movs	r2, #1
 8007e98:	2104      	movs	r1, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 f834 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d020      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01b      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0202 	mvn.w	r2, #2
 8007ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fb f9b2 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8007f0c:	e005      	b.n	8007f1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fb7a 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fb81 	bl	800861c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d020      	beq.n	8007f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01b      	beq.n	8007f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0204 	mvn.w	r2, #4
 8007f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fb f98c 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8007f58:	e005      	b.n	8007f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fb54 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fb5b 	bl	800861c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d020      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01b      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0208 	mvn.w	r2, #8
 8007f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fb f966 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8007fa4:	e005      	b.n	8007fb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fb2e 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb35 	bl	800861c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d020      	beq.n	8008004 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01b      	beq.n	8008004 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0210 	mvn.w	r2, #16
 8007fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fb f940 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fb08 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb0f 	bl	800861c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0201 	mvn.w	r2, #1
 8008020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fae6 	bl	80085f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00c      	beq.n	800804c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fffc 	bl	8009044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fae0 	bl	8008630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00c      	beq.n	8008094 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0220 	mvn.w	r2, #32
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 ffce 	bl	8009030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e088      	b.n	80081cc <HAL_TIM_IC_ConfigChannel+0x130>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11b      	bne.n	8008100 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80080d8:	f000 fd5e 	bl	8008b98 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 020c 	bic.w	r2, r2, #12
 80080ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6999      	ldr	r1, [r3, #24]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	619a      	str	r2, [r3, #24]
 80080fe:	e060      	b.n	80081c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b04      	cmp	r3, #4
 8008104:	d11c      	bne.n	8008140 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008116:	f000 fdd6 	bl	8008cc6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	699a      	ldr	r2, [r3, #24]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008128:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6999      	ldr	r1, [r3, #24]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	021a      	lsls	r2, r3, #8
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	619a      	str	r2, [r3, #24]
 800813e:	e040      	b.n	80081c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b08      	cmp	r3, #8
 8008144:	d11b      	bne.n	800817e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008156:	f000 fe23 	bl	8008da0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 020c 	bic.w	r2, r2, #12
 8008168:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	61da      	str	r2, [r3, #28]
 800817c:	e021      	b.n	80081c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b0c      	cmp	r3, #12
 8008182:	d11c      	bne.n	80081be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008194:	f000 fe40 	bl	8008e18 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69da      	ldr	r2, [r3, #28]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80081a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69d9      	ldr	r1, [r3, #28]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	61da      	str	r2, [r3, #28]
 80081bc:	e001      	b.n	80081c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0ae      	b.n	8008350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b0c      	cmp	r3, #12
 80081fe:	f200 809f 	bhi.w	8008340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800823d 	.word	0x0800823d
 800820c:	08008341 	.word	0x08008341
 8008210:	08008341 	.word	0x08008341
 8008214:	08008341 	.word	0x08008341
 8008218:	0800827d 	.word	0x0800827d
 800821c:	08008341 	.word	0x08008341
 8008220:	08008341 	.word	0x08008341
 8008224:	08008341 	.word	0x08008341
 8008228:	080082bf 	.word	0x080082bf
 800822c:	08008341 	.word	0x08008341
 8008230:	08008341 	.word	0x08008341
 8008234:	08008341 	.word	0x08008341
 8008238:	080082ff 	.word	0x080082ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fa8a 	bl	800875c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0208 	orr.w	r2, r2, #8
 8008256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0204 	bic.w	r2, r2, #4
 8008266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6999      	ldr	r1, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	619a      	str	r2, [r3, #24]
      break;
 800827a:	e064      	b.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fad0 	bl	8008828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6999      	ldr	r1, [r3, #24]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	619a      	str	r2, [r3, #24]
      break;
 80082bc:	e043      	b.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fb1b 	bl	8008900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0208 	orr.w	r2, r2, #8
 80082d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0204 	bic.w	r2, r2, #4
 80082e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69d9      	ldr	r1, [r3, #28]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	61da      	str	r2, [r3, #28]
      break;
 80082fc:	e023      	b.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fb65 	bl	80089d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69d9      	ldr	r1, [r3, #28]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	61da      	str	r2, [r3, #28]
      break;
 800833e:	e002      	b.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	75fb      	strb	r3, [r7, #23]
      break;
 8008344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_TIM_ConfigClockSource+0x1c>
 8008370:	2302      	movs	r3, #2
 8008372:	e0b4      	b.n	80084de <HAL_TIM_ConfigClockSource+0x186>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800839a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ac:	d03e      	beq.n	800842c <HAL_TIM_ConfigClockSource+0xd4>
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b2:	f200 8087 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ba:	f000 8086 	beq.w	80084ca <HAL_TIM_ConfigClockSource+0x172>
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c2:	d87f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b70      	cmp	r3, #112	@ 0x70
 80083c6:	d01a      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xa6>
 80083c8:	2b70      	cmp	r3, #112	@ 0x70
 80083ca:	d87b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b60      	cmp	r3, #96	@ 0x60
 80083ce:	d050      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x11a>
 80083d0:	2b60      	cmp	r3, #96	@ 0x60
 80083d2:	d877      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b50      	cmp	r3, #80	@ 0x50
 80083d6:	d03c      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0xfa>
 80083d8:	2b50      	cmp	r3, #80	@ 0x50
 80083da:	d873      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b40      	cmp	r3, #64	@ 0x40
 80083de:	d058      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x13a>
 80083e0:	2b40      	cmp	r3, #64	@ 0x40
 80083e2:	d86f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b30      	cmp	r3, #48	@ 0x30
 80083e6:	d064      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b30      	cmp	r3, #48	@ 0x30
 80083ea:	d86b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d060      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d867      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05c      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d05a      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083fc:	e062      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800840e:	f000 fd5b 	bl	8008ec8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	609a      	str	r2, [r3, #8]
      break;
 800842a:	e04f      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800843c:	f000 fd44 	bl	8008ec8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800844e:	609a      	str	r2, [r3, #8]
      break;
 8008450:	e03c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800845e:	461a      	mov	r2, r3
 8008460:	f000 fc02 	bl	8008c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2150      	movs	r1, #80	@ 0x50
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fd11 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 8008470:	e02c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800847e:	461a      	mov	r2, r3
 8008480:	f000 fc5e 	bl	8008d40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2160      	movs	r1, #96	@ 0x60
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fd01 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 8008490:	e01c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 fbe2 	bl	8008c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2140      	movs	r1, #64	@ 0x40
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fcf1 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e00c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f000 fce8 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80084c2:	e003      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e000      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e031      	b.n	8008562 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 faaf 	bl	8008a74 <TIM_SlaveTimer_SetConfig>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e018      	b.n	8008562 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800853e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800854e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b0c      	cmp	r3, #12
 800857e:	d831      	bhi.n	80085e4 <HAL_TIM_ReadCapturedValue+0x78>
 8008580:	a201      	add	r2, pc, #4	@ (adr r2, 8008588 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008586:	bf00      	nop
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080085e5 	.word	0x080085e5
 8008590:	080085e5 	.word	0x080085e5
 8008594:	080085e5 	.word	0x080085e5
 8008598:	080085c7 	.word	0x080085c7
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	080085e5 	.word	0x080085e5
 80085a4:	080085e5 	.word	0x080085e5
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085e5 	.word	0x080085e5
 80085b0:	080085e5 	.word	0x080085e5
 80085b4:	080085e5 	.word	0x080085e5
 80085b8:	080085db 	.word	0x080085db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c2:	60fb      	str	r3, [r7, #12]

      break;
 80085c4:	e00f      	b.n	80085e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	60fb      	str	r3, [r7, #12]

      break;
 80085ce:	e00a      	b.n	80085e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d6:	60fb      	str	r3, [r7, #12]

      break;
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e0:	60fb      	str	r3, [r7, #12]

      break;
 80085e2:	e000      	b.n	80085e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80085e4:	bf00      	nop
  }

  return tmpreg;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a3a      	ldr	r2, [pc, #232]	@ (8008740 <TIM_Base_SetConfig+0xfc>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00f      	beq.n	800867c <TIM_Base_SetConfig+0x38>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008662:	d00b      	beq.n	800867c <TIM_Base_SetConfig+0x38>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a37      	ldr	r2, [pc, #220]	@ (8008744 <TIM_Base_SetConfig+0x100>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_Base_SetConfig+0x38>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a36      	ldr	r2, [pc, #216]	@ (8008748 <TIM_Base_SetConfig+0x104>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_Base_SetConfig+0x38>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a35      	ldr	r2, [pc, #212]	@ (800874c <TIM_Base_SetConfig+0x108>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d108      	bne.n	800868e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a2b      	ldr	r2, [pc, #172]	@ (8008740 <TIM_Base_SetConfig+0xfc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01b      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869c:	d017      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a28      	ldr	r2, [pc, #160]	@ (8008744 <TIM_Base_SetConfig+0x100>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a27      	ldr	r2, [pc, #156]	@ (8008748 <TIM_Base_SetConfig+0x104>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00f      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a26      	ldr	r2, [pc, #152]	@ (800874c <TIM_Base_SetConfig+0x108>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00b      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a25      	ldr	r2, [pc, #148]	@ (8008750 <TIM_Base_SetConfig+0x10c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a24      	ldr	r2, [pc, #144]	@ (8008754 <TIM_Base_SetConfig+0x110>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <TIM_Base_SetConfig+0x8a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a23      	ldr	r2, [pc, #140]	@ (8008758 <TIM_Base_SetConfig+0x114>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d108      	bne.n	80086e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a0e      	ldr	r2, [pc, #56]	@ (8008740 <TIM_Base_SetConfig+0xfc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d103      	bne.n	8008714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	d105      	bne.n	8008732 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	611a      	str	r2, [r3, #16]
  }
}
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40010000 	.word	0x40010000
 8008744:	40000400 	.word	0x40000400
 8008748:	40000800 	.word	0x40000800
 800874c:	40000c00 	.word	0x40000c00
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800

0800875c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	f023 0201 	bic.w	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 0302 	bic.w	r3, r3, #2
 80087a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008824 <TIM_OC1_SetConfig+0xc8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d10c      	bne.n	80087d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f023 0308 	bic.w	r3, r3, #8
 80087be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f023 0304 	bic.w	r3, r3, #4
 80087d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a13      	ldr	r2, [pc, #76]	@ (8008824 <TIM_OC1_SetConfig+0xc8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d111      	bne.n	80087fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	621a      	str	r2, [r3, #32]
}
 8008818:	bf00      	nop
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	40010000 	.word	0x40010000

08008828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f023 0210 	bic.w	r2, r3, #16
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800885e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0320 	bic.w	r3, r3, #32
 8008872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1e      	ldr	r2, [pc, #120]	@ (80088fc <TIM_OC2_SetConfig+0xd4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d10d      	bne.n	80088a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800888e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a15      	ldr	r2, [pc, #84]	@ (80088fc <TIM_OC2_SetConfig+0xd4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d113      	bne.n	80088d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40010000 	.word	0x40010000

08008900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1d      	ldr	r2, [pc, #116]	@ (80089d0 <TIM_OC3_SetConfig+0xd0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d10d      	bne.n	800897a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a14      	ldr	r2, [pc, #80]	@ (80089d0 <TIM_OC3_SetConfig+0xd0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d113      	bne.n	80089aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	621a      	str	r2, [r3, #32]
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	40010000 	.word	0x40010000

080089d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a10      	ldr	r2, [pc, #64]	@ (8008a70 <TIM_OC4_SetConfig+0x9c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d109      	bne.n	8008a48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40010000 	.word	0x40010000

08008a74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b70      	cmp	r3, #112	@ 0x70
 8008abc:	d01a      	beq.n	8008af4 <TIM_SlaveTimer_SetConfig+0x80>
 8008abe:	2b70      	cmp	r3, #112	@ 0x70
 8008ac0:	d860      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ac2:	2b60      	cmp	r3, #96	@ 0x60
 8008ac4:	d054      	beq.n	8008b70 <TIM_SlaveTimer_SetConfig+0xfc>
 8008ac6:	2b60      	cmp	r3, #96	@ 0x60
 8008ac8:	d85c      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008aca:	2b50      	cmp	r3, #80	@ 0x50
 8008acc:	d046      	beq.n	8008b5c <TIM_SlaveTimer_SetConfig+0xe8>
 8008ace:	2b50      	cmp	r3, #80	@ 0x50
 8008ad0:	d858      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ad2:	2b40      	cmp	r3, #64	@ 0x40
 8008ad4:	d019      	beq.n	8008b0a <TIM_SlaveTimer_SetConfig+0x96>
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	d854      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ada:	2b30      	cmp	r3, #48	@ 0x30
 8008adc:	d055      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008ade:	2b30      	cmp	r3, #48	@ 0x30
 8008ae0:	d850      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d051      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d84c      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04d      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d04b      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008af2:	e047      	b.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008b04:	f000 f9e0 	bl	8008ec8 <TIM_ETR_SetConfig>
      break;
 8008b08:	e040      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d101      	bne.n	8008b16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e03b      	b.n	8008b8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0201 	bic.w	r2, r2, #1
 8008b2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]
      break;
 8008b5a:	e017      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f000 f87d 	bl	8008c68 <TIM_TI1_ConfigInputStage>
      break;
 8008b6e:	e00d      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f000 f8df 	bl	8008d40 <TIM_TI2_ConfigInputStage>
      break;
 8008b82:	e003      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	75fb      	strb	r3, [r7, #23]
      break;
 8008b88:	e000      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008b8a:	bf00      	nop
  }

  return status;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	f023 0201 	bic.w	r2, r3, #1
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a24      	ldr	r2, [pc, #144]	@ (8008c54 <TIM_TI1_SetConfig+0xbc>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <TIM_TI1_SetConfig+0x56>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bcc:	d00f      	beq.n	8008bee <TIM_TI1_SetConfig+0x56>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a21      	ldr	r2, [pc, #132]	@ (8008c58 <TIM_TI1_SetConfig+0xc0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00b      	beq.n	8008bee <TIM_TI1_SetConfig+0x56>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4a20      	ldr	r2, [pc, #128]	@ (8008c5c <TIM_TI1_SetConfig+0xc4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d007      	beq.n	8008bee <TIM_TI1_SetConfig+0x56>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c60 <TIM_TI1_SetConfig+0xc8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d003      	beq.n	8008bee <TIM_TI1_SetConfig+0x56>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <TIM_TI1_SetConfig+0xcc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d101      	bne.n	8008bf2 <TIM_TI1_SetConfig+0x5a>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <TIM_TI1_SetConfig+0x5c>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f023 0303 	bic.w	r3, r3, #3
 8008bfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e003      	b.n	8008c12 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f023 030a 	bic.w	r3, r3, #10
 8008c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f003 030a 	and.w	r3, r3, #10
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	621a      	str	r2, [r3, #32]
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800
 8008c60:	40000c00 	.word	0x40000c00
 8008c64:	40014000 	.word	0x40014000

08008c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f023 030a 	bic.w	r3, r3, #10
 8008ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0210 	bic.w	r2, r3, #16
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	031b      	lsls	r3, r3, #12
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d18:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	f023 0210 	bic.w	r2, r3, #16
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	031b      	lsls	r3, r3, #12
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	621a      	str	r2, [r3, #32]
}
 8008d94:	bf00      	nop
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ddc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008df0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	031b      	lsls	r3, r3, #12
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	031b      	lsls	r3, r3, #12
 8008e70:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f043 0307 	orr.w	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	609a      	str	r2, [r3, #8]
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e050      	b.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	@ (800901c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d018      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb8:	d013      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	@ (8009020 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a16      	ldr	r2, [pc, #88]	@ (8009024 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a15      	ldr	r2, [pc, #84]	@ (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a13      	ldr	r2, [pc, #76]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d10c      	bne.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40014000 	.word	0x40014000

08009030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e04a      	b.n	8009100 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d106      	bne.n	8009084 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fa fdbe 	bl	8003c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2224      	movs	r2, #36	@ 0x24
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800909a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f833 	bl	8009108 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695a      	ldr	r2, [r3, #20]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80090c0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695a      	ldr	r2, [r3, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0208 	orr.w	r2, r2, #8
 80090d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800910c:	b0c0      	sub	sp, #256	@ 0x100
 800910e:	af00      	add	r7, sp, #0
 8009110:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009124:	68d9      	ldr	r1, [r3, #12]
 8009126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	ea40 0301 	orr.w	r3, r0, r1
 8009130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	431a      	orrs	r2, r3
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	431a      	orrs	r2, r3
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009160:	f021 010c 	bic.w	r1, r1, #12
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800916e:	430b      	orrs	r3, r1
 8009170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009182:	6999      	ldr	r1, [r3, #24]
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	ea40 0301 	orr.w	r3, r0, r1
 800918e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b8f      	ldr	r3, [pc, #572]	@ (80093d4 <UART_SetConfig+0x2cc>)
 8009198:	429a      	cmp	r2, r3
 800919a:	d005      	beq.n	80091a8 <UART_SetConfig+0xa0>
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b8d      	ldr	r3, [pc, #564]	@ (80093d8 <UART_SetConfig+0x2d0>)
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d104      	bne.n	80091b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091a8:	f7fe fa74 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 80091ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80091b0:	e003      	b.n	80091ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091b2:	f7fe fa5b 	bl	800766c <HAL_RCC_GetPCLK1Freq>
 80091b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c4:	f040 810c 	bne.w	80093e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80091d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80091da:	4622      	mov	r2, r4
 80091dc:	462b      	mov	r3, r5
 80091de:	1891      	adds	r1, r2, r2
 80091e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80091e2:	415b      	adcs	r3, r3
 80091e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091ea:	4621      	mov	r1, r4
 80091ec:	eb12 0801 	adds.w	r8, r2, r1
 80091f0:	4629      	mov	r1, r5
 80091f2:	eb43 0901 	adc.w	r9, r3, r1
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	f04f 0300 	mov.w	r3, #0
 80091fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800920a:	4690      	mov	r8, r2
 800920c:	4699      	mov	r9, r3
 800920e:	4623      	mov	r3, r4
 8009210:	eb18 0303 	adds.w	r3, r8, r3
 8009214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009218:	462b      	mov	r3, r5
 800921a:	eb49 0303 	adc.w	r3, r9, r3
 800921e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800922e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009236:	460b      	mov	r3, r1
 8009238:	18db      	adds	r3, r3, r3
 800923a:	653b      	str	r3, [r7, #80]	@ 0x50
 800923c:	4613      	mov	r3, r2
 800923e:	eb42 0303 	adc.w	r3, r2, r3
 8009242:	657b      	str	r3, [r7, #84]	@ 0x54
 8009244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800924c:	f7f7 fca8 	bl	8000ba0 <__aeabi_uldivmod>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4b61      	ldr	r3, [pc, #388]	@ (80093dc <UART_SetConfig+0x2d4>)
 8009256:	fba3 2302 	umull	r2, r3, r3, r2
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	011c      	lsls	r4, r3, #4
 800925e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009262:	2200      	movs	r2, #0
 8009264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009268:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800926c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009270:	4642      	mov	r2, r8
 8009272:	464b      	mov	r3, r9
 8009274:	1891      	adds	r1, r2, r2
 8009276:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009278:	415b      	adcs	r3, r3
 800927a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800927c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009280:	4641      	mov	r1, r8
 8009282:	eb12 0a01 	adds.w	sl, r2, r1
 8009286:	4649      	mov	r1, r9
 8009288:	eb43 0b01 	adc.w	fp, r3, r1
 800928c:	f04f 0200 	mov.w	r2, #0
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800929c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092a0:	4692      	mov	sl, r2
 80092a2:	469b      	mov	fp, r3
 80092a4:	4643      	mov	r3, r8
 80092a6:	eb1a 0303 	adds.w	r3, sl, r3
 80092aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092ae:	464b      	mov	r3, r9
 80092b0:	eb4b 0303 	adc.w	r3, fp, r3
 80092b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80092c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092cc:	460b      	mov	r3, r1
 80092ce:	18db      	adds	r3, r3, r3
 80092d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80092d2:	4613      	mov	r3, r2
 80092d4:	eb42 0303 	adc.w	r3, r2, r3
 80092d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80092e2:	f7f7 fc5d 	bl	8000ba0 <__aeabi_uldivmod>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4611      	mov	r1, r2
 80092ec:	4b3b      	ldr	r3, [pc, #236]	@ (80093dc <UART_SetConfig+0x2d4>)
 80092ee:	fba3 2301 	umull	r2, r3, r3, r1
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	2264      	movs	r2, #100	@ 0x64
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
 80092fa:	1acb      	subs	r3, r1, r3
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009302:	4b36      	ldr	r3, [pc, #216]	@ (80093dc <UART_SetConfig+0x2d4>)
 8009304:	fba3 2302 	umull	r2, r3, r3, r2
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009310:	441c      	add	r4, r3
 8009312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009316:	2200      	movs	r2, #0
 8009318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800931c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009324:	4642      	mov	r2, r8
 8009326:	464b      	mov	r3, r9
 8009328:	1891      	adds	r1, r2, r2
 800932a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800932c:	415b      	adcs	r3, r3
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009334:	4641      	mov	r1, r8
 8009336:	1851      	adds	r1, r2, r1
 8009338:	6339      	str	r1, [r7, #48]	@ 0x30
 800933a:	4649      	mov	r1, r9
 800933c:	414b      	adcs	r3, r1
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800934c:	4659      	mov	r1, fp
 800934e:	00cb      	lsls	r3, r1, #3
 8009350:	4651      	mov	r1, sl
 8009352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009356:	4651      	mov	r1, sl
 8009358:	00ca      	lsls	r2, r1, #3
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	4603      	mov	r3, r0
 8009360:	4642      	mov	r2, r8
 8009362:	189b      	adds	r3, r3, r2
 8009364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009368:	464b      	mov	r3, r9
 800936a:	460a      	mov	r2, r1
 800936c:	eb42 0303 	adc.w	r3, r2, r3
 8009370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009380:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009388:	460b      	mov	r3, r1
 800938a:	18db      	adds	r3, r3, r3
 800938c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800938e:	4613      	mov	r3, r2
 8009390:	eb42 0303 	adc.w	r3, r2, r3
 8009394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800939a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800939e:	f7f7 fbff 	bl	8000ba0 <__aeabi_uldivmod>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <UART_SetConfig+0x2d4>)
 80093a8:	fba3 1302 	umull	r1, r3, r3, r2
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	2164      	movs	r1, #100	@ 0x64
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	3332      	adds	r3, #50	@ 0x32
 80093ba:	4a08      	ldr	r2, [pc, #32]	@ (80093dc <UART_SetConfig+0x2d4>)
 80093bc:	fba2 2303 	umull	r2, r3, r2, r3
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	f003 0207 	and.w	r2, r3, #7
 80093c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4422      	add	r2, r4
 80093ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093d0:	e106      	b.n	80095e0 <UART_SetConfig+0x4d8>
 80093d2:	bf00      	nop
 80093d4:	40011000 	.word	0x40011000
 80093d8:	40011400 	.word	0x40011400
 80093dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80093f2:	4642      	mov	r2, r8
 80093f4:	464b      	mov	r3, r9
 80093f6:	1891      	adds	r1, r2, r2
 80093f8:	6239      	str	r1, [r7, #32]
 80093fa:	415b      	adcs	r3, r3
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009402:	4641      	mov	r1, r8
 8009404:	1854      	adds	r4, r2, r1
 8009406:	4649      	mov	r1, r9
 8009408:	eb43 0501 	adc.w	r5, r3, r1
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	00eb      	lsls	r3, r5, #3
 8009416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800941a:	00e2      	lsls	r2, r4, #3
 800941c:	4614      	mov	r4, r2
 800941e:	461d      	mov	r5, r3
 8009420:	4643      	mov	r3, r8
 8009422:	18e3      	adds	r3, r4, r3
 8009424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009428:	464b      	mov	r3, r9
 800942a:	eb45 0303 	adc.w	r3, r5, r3
 800942e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800943e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800944e:	4629      	mov	r1, r5
 8009450:	008b      	lsls	r3, r1, #2
 8009452:	4621      	mov	r1, r4
 8009454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009458:	4621      	mov	r1, r4
 800945a:	008a      	lsls	r2, r1, #2
 800945c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009460:	f7f7 fb9e 	bl	8000ba0 <__aeabi_uldivmod>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4b60      	ldr	r3, [pc, #384]	@ (80095ec <UART_SetConfig+0x4e4>)
 800946a:	fba3 2302 	umull	r2, r3, r3, r2
 800946e:	095b      	lsrs	r3, r3, #5
 8009470:	011c      	lsls	r4, r3, #4
 8009472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009476:	2200      	movs	r2, #0
 8009478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800947c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009484:	4642      	mov	r2, r8
 8009486:	464b      	mov	r3, r9
 8009488:	1891      	adds	r1, r2, r2
 800948a:	61b9      	str	r1, [r7, #24]
 800948c:	415b      	adcs	r3, r3
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009494:	4641      	mov	r1, r8
 8009496:	1851      	adds	r1, r2, r1
 8009498:	6139      	str	r1, [r7, #16]
 800949a:	4649      	mov	r1, r9
 800949c:	414b      	adcs	r3, r1
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094ac:	4659      	mov	r1, fp
 80094ae:	00cb      	lsls	r3, r1, #3
 80094b0:	4651      	mov	r1, sl
 80094b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094b6:	4651      	mov	r1, sl
 80094b8:	00ca      	lsls	r2, r1, #3
 80094ba:	4610      	mov	r0, r2
 80094bc:	4619      	mov	r1, r3
 80094be:	4603      	mov	r3, r0
 80094c0:	4642      	mov	r2, r8
 80094c2:	189b      	adds	r3, r3, r2
 80094c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094c8:	464b      	mov	r3, r9
 80094ca:	460a      	mov	r2, r1
 80094cc:	eb42 0303 	adc.w	r3, r2, r3
 80094d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80094ec:	4649      	mov	r1, r9
 80094ee:	008b      	lsls	r3, r1, #2
 80094f0:	4641      	mov	r1, r8
 80094f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094f6:	4641      	mov	r1, r8
 80094f8:	008a      	lsls	r2, r1, #2
 80094fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80094fe:	f7f7 fb4f 	bl	8000ba0 <__aeabi_uldivmod>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4611      	mov	r1, r2
 8009508:	4b38      	ldr	r3, [pc, #224]	@ (80095ec <UART_SetConfig+0x4e4>)
 800950a:	fba3 2301 	umull	r2, r3, r3, r1
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	2264      	movs	r2, #100	@ 0x64
 8009512:	fb02 f303 	mul.w	r3, r2, r3
 8009516:	1acb      	subs	r3, r1, r3
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	3332      	adds	r3, #50	@ 0x32
 800951c:	4a33      	ldr	r2, [pc, #204]	@ (80095ec <UART_SetConfig+0x4e4>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009528:	441c      	add	r4, r3
 800952a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800952e:	2200      	movs	r2, #0
 8009530:	673b      	str	r3, [r7, #112]	@ 0x70
 8009532:	677a      	str	r2, [r7, #116]	@ 0x74
 8009534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009538:	4642      	mov	r2, r8
 800953a:	464b      	mov	r3, r9
 800953c:	1891      	adds	r1, r2, r2
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	415b      	adcs	r3, r3
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009548:	4641      	mov	r1, r8
 800954a:	1851      	adds	r1, r2, r1
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	4649      	mov	r1, r9
 8009550:	414b      	adcs	r3, r1
 8009552:	607b      	str	r3, [r7, #4]
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009560:	4659      	mov	r1, fp
 8009562:	00cb      	lsls	r3, r1, #3
 8009564:	4651      	mov	r1, sl
 8009566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800956a:	4651      	mov	r1, sl
 800956c:	00ca      	lsls	r2, r1, #3
 800956e:	4610      	mov	r0, r2
 8009570:	4619      	mov	r1, r3
 8009572:	4603      	mov	r3, r0
 8009574:	4642      	mov	r2, r8
 8009576:	189b      	adds	r3, r3, r2
 8009578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800957a:	464b      	mov	r3, r9
 800957c:	460a      	mov	r2, r1
 800957e:	eb42 0303 	adc.w	r3, r2, r3
 8009582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	663b      	str	r3, [r7, #96]	@ 0x60
 800958e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800959c:	4649      	mov	r1, r9
 800959e:	008b      	lsls	r3, r1, #2
 80095a0:	4641      	mov	r1, r8
 80095a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095a6:	4641      	mov	r1, r8
 80095a8:	008a      	lsls	r2, r1, #2
 80095aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80095ae:	f7f7 faf7 	bl	8000ba0 <__aeabi_uldivmod>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4b0d      	ldr	r3, [pc, #52]	@ (80095ec <UART_SetConfig+0x4e4>)
 80095b8:	fba3 1302 	umull	r1, r3, r3, r2
 80095bc:	095b      	lsrs	r3, r3, #5
 80095be:	2164      	movs	r1, #100	@ 0x64
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	3332      	adds	r3, #50	@ 0x32
 80095ca:	4a08      	ldr	r2, [pc, #32]	@ (80095ec <UART_SetConfig+0x4e4>)
 80095cc:	fba2 2303 	umull	r2, r3, r2, r3
 80095d0:	095b      	lsrs	r3, r3, #5
 80095d2:	f003 020f 	and.w	r2, r3, #15
 80095d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4422      	add	r2, r4
 80095de:	609a      	str	r2, [r3, #8]
}
 80095e0:	bf00      	nop
 80095e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095e6:	46bd      	mov	sp, r7
 80095e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ec:	51eb851f 	.word	0x51eb851f

080095f0 <abs>:
 80095f0:	2800      	cmp	r0, #0
 80095f2:	bfb8      	it	lt
 80095f4:	4240      	neglt	r0, r0
 80095f6:	4770      	bx	lr

080095f8 <memset>:
 80095f8:	4402      	add	r2, r0
 80095fa:	4603      	mov	r3, r0
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d100      	bne.n	8009602 <memset+0xa>
 8009600:	4770      	bx	lr
 8009602:	f803 1b01 	strb.w	r1, [r3], #1
 8009606:	e7f9      	b.n	80095fc <memset+0x4>

08009608 <__errno>:
 8009608:	4b01      	ldr	r3, [pc, #4]	@ (8009610 <__errno+0x8>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	2000000c 	.word	0x2000000c

08009614 <__libc_init_array>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	4d0d      	ldr	r5, [pc, #52]	@ (800964c <__libc_init_array+0x38>)
 8009618:	4c0d      	ldr	r4, [pc, #52]	@ (8009650 <__libc_init_array+0x3c>)
 800961a:	1b64      	subs	r4, r4, r5
 800961c:	10a4      	asrs	r4, r4, #2
 800961e:	2600      	movs	r6, #0
 8009620:	42a6      	cmp	r6, r4
 8009622:	d109      	bne.n	8009638 <__libc_init_array+0x24>
 8009624:	4d0b      	ldr	r5, [pc, #44]	@ (8009654 <__libc_init_array+0x40>)
 8009626:	4c0c      	ldr	r4, [pc, #48]	@ (8009658 <__libc_init_array+0x44>)
 8009628:	f002 fc7e 	bl	800bf28 <_init>
 800962c:	1b64      	subs	r4, r4, r5
 800962e:	10a4      	asrs	r4, r4, #2
 8009630:	2600      	movs	r6, #0
 8009632:	42a6      	cmp	r6, r4
 8009634:	d105      	bne.n	8009642 <__libc_init_array+0x2e>
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	f855 3b04 	ldr.w	r3, [r5], #4
 800963c:	4798      	blx	r3
 800963e:	3601      	adds	r6, #1
 8009640:	e7ee      	b.n	8009620 <__libc_init_array+0xc>
 8009642:	f855 3b04 	ldr.w	r3, [r5], #4
 8009646:	4798      	blx	r3
 8009648:	3601      	adds	r6, #1
 800964a:	e7f2      	b.n	8009632 <__libc_init_array+0x1e>
 800964c:	0800c1d8 	.word	0x0800c1d8
 8009650:	0800c1d8 	.word	0x0800c1d8
 8009654:	0800c1d8 	.word	0x0800c1d8
 8009658:	0800c1dc 	.word	0x0800c1dc

0800965c <memcpy>:
 800965c:	440a      	add	r2, r1
 800965e:	4291      	cmp	r1, r2
 8009660:	f100 33ff 	add.w	r3, r0, #4294967295
 8009664:	d100      	bne.n	8009668 <memcpy+0xc>
 8009666:	4770      	bx	lr
 8009668:	b510      	push	{r4, lr}
 800966a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800966e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009672:	4291      	cmp	r1, r2
 8009674:	d1f9      	bne.n	800966a <memcpy+0xe>
 8009676:	bd10      	pop	{r4, pc}

08009678 <acos>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	ed2d 8b02 	vpush	{d8}
 800967e:	ec55 4b10 	vmov	r4, r5, d0
 8009682:	f000 fc21 	bl	8009ec8 <__ieee754_acos>
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	4620      	mov	r0, r4
 800968c:	4629      	mov	r1, r5
 800968e:	eeb0 8a40 	vmov.f32	s16, s0
 8009692:	eef0 8a60 	vmov.f32	s17, s1
 8009696:	f7f7 f9f5 	bl	8000a84 <__aeabi_dcmpun>
 800969a:	b9a8      	cbnz	r0, 80096c8 <acos+0x50>
 800969c:	ec45 4b10 	vmov	d0, r4, r5
 80096a0:	f000 f942 	bl	8009928 <fabs>
 80096a4:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <acos+0x60>)
 80096a6:	ec51 0b10 	vmov	r0, r1, d0
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f7 f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80096b0:	b150      	cbz	r0, 80096c8 <acos+0x50>
 80096b2:	f7ff ffa9 	bl	8009608 <__errno>
 80096b6:	ecbd 8b02 	vpop	{d8}
 80096ba:	2321      	movs	r3, #33	@ 0x21
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c2:	4806      	ldr	r0, [pc, #24]	@ (80096dc <acos+0x64>)
 80096c4:	f000 b998 	b.w	80099f8 <nan>
 80096c8:	eeb0 0a48 	vmov.f32	s0, s16
 80096cc:	eef0 0a68 	vmov.f32	s1, s17
 80096d0:	ecbd 8b02 	vpop	{d8}
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	bf00      	nop
 80096d8:	3ff00000 	.word	0x3ff00000
 80096dc:	0800bfc0 	.word	0x0800bfc0

080096e0 <asin>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	ed2d 8b02 	vpush	{d8}
 80096e6:	ec55 4b10 	vmov	r4, r5, d0
 80096ea:	f000 fe49 	bl	800a380 <__ieee754_asin>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	eeb0 8a40 	vmov.f32	s16, s0
 80096fa:	eef0 8a60 	vmov.f32	s17, s1
 80096fe:	f7f7 f9c1 	bl	8000a84 <__aeabi_dcmpun>
 8009702:	b9a8      	cbnz	r0, 8009730 <asin+0x50>
 8009704:	ec45 4b10 	vmov	d0, r4, r5
 8009708:	f000 f90e 	bl	8009928 <fabs>
 800970c:	4b0c      	ldr	r3, [pc, #48]	@ (8009740 <asin+0x60>)
 800970e:	ec51 0b10 	vmov	r0, r1, d0
 8009712:	2200      	movs	r2, #0
 8009714:	f7f7 f9ac 	bl	8000a70 <__aeabi_dcmpgt>
 8009718:	b150      	cbz	r0, 8009730 <asin+0x50>
 800971a:	f7ff ff75 	bl	8009608 <__errno>
 800971e:	ecbd 8b02 	vpop	{d8}
 8009722:	2321      	movs	r3, #33	@ 0x21
 8009724:	6003      	str	r3, [r0, #0]
 8009726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800972a:	4806      	ldr	r0, [pc, #24]	@ (8009744 <asin+0x64>)
 800972c:	f000 b964 	b.w	80099f8 <nan>
 8009730:	eeb0 0a48 	vmov.f32	s0, s16
 8009734:	eef0 0a68 	vmov.f32	s1, s17
 8009738:	ecbd 8b02 	vpop	{d8}
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	0800bfc0 	.word	0x0800bfc0

08009748 <pow>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	ed2d 8b02 	vpush	{d8}
 800974e:	eeb0 8a40 	vmov.f32	s16, s0
 8009752:	eef0 8a60 	vmov.f32	s17, s1
 8009756:	ec55 4b11 	vmov	r4, r5, d1
 800975a:	f001 f815 	bl	800a788 <__ieee754_pow>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	ec57 6b10 	vmov	r6, r7, d0
 800976a:	f7f7 f98b 	bl	8000a84 <__aeabi_dcmpun>
 800976e:	2800      	cmp	r0, #0
 8009770:	d13b      	bne.n	80097ea <pow+0xa2>
 8009772:	ec51 0b18 	vmov	r0, r1, d8
 8009776:	2200      	movs	r2, #0
 8009778:	2300      	movs	r3, #0
 800977a:	f7f7 f951 	bl	8000a20 <__aeabi_dcmpeq>
 800977e:	b1b8      	cbz	r0, 80097b0 <pow+0x68>
 8009780:	2200      	movs	r2, #0
 8009782:	2300      	movs	r3, #0
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f7 f94a 	bl	8000a20 <__aeabi_dcmpeq>
 800978c:	2800      	cmp	r0, #0
 800978e:	d146      	bne.n	800981e <pow+0xd6>
 8009790:	ec45 4b10 	vmov	d0, r4, r5
 8009794:	f000 f924 	bl	80099e0 <finite>
 8009798:	b338      	cbz	r0, 80097ea <pow+0xa2>
 800979a:	2200      	movs	r2, #0
 800979c:	2300      	movs	r3, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f7 f947 	bl	8000a34 <__aeabi_dcmplt>
 80097a6:	b300      	cbz	r0, 80097ea <pow+0xa2>
 80097a8:	f7ff ff2e 	bl	8009608 <__errno>
 80097ac:	2322      	movs	r3, #34	@ 0x22
 80097ae:	e01b      	b.n	80097e8 <pow+0xa0>
 80097b0:	ec47 6b10 	vmov	d0, r6, r7
 80097b4:	f000 f914 	bl	80099e0 <finite>
 80097b8:	b9e0      	cbnz	r0, 80097f4 <pow+0xac>
 80097ba:	eeb0 0a48 	vmov.f32	s0, s16
 80097be:	eef0 0a68 	vmov.f32	s1, s17
 80097c2:	f000 f90d 	bl	80099e0 <finite>
 80097c6:	b1a8      	cbz	r0, 80097f4 <pow+0xac>
 80097c8:	ec45 4b10 	vmov	d0, r4, r5
 80097cc:	f000 f908 	bl	80099e0 <finite>
 80097d0:	b180      	cbz	r0, 80097f4 <pow+0xac>
 80097d2:	4632      	mov	r2, r6
 80097d4:	463b      	mov	r3, r7
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f953 	bl	8000a84 <__aeabi_dcmpun>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0e2      	beq.n	80097a8 <pow+0x60>
 80097e2:	f7ff ff11 	bl	8009608 <__errno>
 80097e6:	2321      	movs	r3, #33	@ 0x21
 80097e8:	6003      	str	r3, [r0, #0]
 80097ea:	ecbd 8b02 	vpop	{d8}
 80097ee:	ec47 6b10 	vmov	d0, r6, r7
 80097f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f4:	2200      	movs	r2, #0
 80097f6:	2300      	movs	r3, #0
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	f7f7 f910 	bl	8000a20 <__aeabi_dcmpeq>
 8009800:	2800      	cmp	r0, #0
 8009802:	d0f2      	beq.n	80097ea <pow+0xa2>
 8009804:	eeb0 0a48 	vmov.f32	s0, s16
 8009808:	eef0 0a68 	vmov.f32	s1, s17
 800980c:	f000 f8e8 	bl	80099e0 <finite>
 8009810:	2800      	cmp	r0, #0
 8009812:	d0ea      	beq.n	80097ea <pow+0xa2>
 8009814:	ec45 4b10 	vmov	d0, r4, r5
 8009818:	f000 f8e2 	bl	80099e0 <finite>
 800981c:	e7c3      	b.n	80097a6 <pow+0x5e>
 800981e:	4f01      	ldr	r7, [pc, #4]	@ (8009824 <pow+0xdc>)
 8009820:	2600      	movs	r6, #0
 8009822:	e7e2      	b.n	80097ea <pow+0xa2>
 8009824:	3ff00000 	.word	0x3ff00000

08009828 <sqrt>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	ed2d 8b02 	vpush	{d8}
 800982e:	ec55 4b10 	vmov	r4, r5, d0
 8009832:	f000 f8e9 	bl	8009a08 <__ieee754_sqrt>
 8009836:	4622      	mov	r2, r4
 8009838:	462b      	mov	r3, r5
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	eeb0 8a40 	vmov.f32	s16, s0
 8009842:	eef0 8a60 	vmov.f32	s17, s1
 8009846:	f7f7 f91d 	bl	8000a84 <__aeabi_dcmpun>
 800984a:	b990      	cbnz	r0, 8009872 <sqrt+0x4a>
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4620      	mov	r0, r4
 8009852:	4629      	mov	r1, r5
 8009854:	f7f7 f8ee 	bl	8000a34 <__aeabi_dcmplt>
 8009858:	b158      	cbz	r0, 8009872 <sqrt+0x4a>
 800985a:	f7ff fed5 	bl	8009608 <__errno>
 800985e:	2321      	movs	r3, #33	@ 0x21
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4610      	mov	r0, r2
 8009868:	4619      	mov	r1, r3
 800986a:	f7f6 ff9b 	bl	80007a4 <__aeabi_ddiv>
 800986e:	ec41 0b18 	vmov	d8, r0, r1
 8009872:	eeb0 0a48 	vmov.f32	s0, s16
 8009876:	eef0 0a68 	vmov.f32	s1, s17
 800987a:	ecbd 8b02 	vpop	{d8}
 800987e:	bd38      	pop	{r3, r4, r5, pc}

08009880 <cos>:
 8009880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009882:	ec53 2b10 	vmov	r2, r3, d0
 8009886:	4826      	ldr	r0, [pc, #152]	@ (8009920 <cos+0xa0>)
 8009888:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800988c:	4281      	cmp	r1, r0
 800988e:	d806      	bhi.n	800989e <cos+0x1e>
 8009890:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009918 <cos+0x98>
 8009894:	b005      	add	sp, #20
 8009896:	f85d eb04 	ldr.w	lr, [sp], #4
 800989a:	f000 b991 	b.w	8009bc0 <__kernel_cos>
 800989e:	4821      	ldr	r0, [pc, #132]	@ (8009924 <cos+0xa4>)
 80098a0:	4281      	cmp	r1, r0
 80098a2:	d908      	bls.n	80098b6 <cos+0x36>
 80098a4:	4610      	mov	r0, r2
 80098a6:	4619      	mov	r1, r3
 80098a8:	f7f6 fc9a 	bl	80001e0 <__aeabi_dsub>
 80098ac:	ec41 0b10 	vmov	d0, r0, r1
 80098b0:	b005      	add	sp, #20
 80098b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80098b6:	4668      	mov	r0, sp
 80098b8:	f001 fcaa 	bl	800b210 <__ieee754_rem_pio2>
 80098bc:	f000 0003 	and.w	r0, r0, #3
 80098c0:	2801      	cmp	r0, #1
 80098c2:	d00b      	beq.n	80098dc <cos+0x5c>
 80098c4:	2802      	cmp	r0, #2
 80098c6:	d015      	beq.n	80098f4 <cos+0x74>
 80098c8:	b9d8      	cbnz	r0, 8009902 <cos+0x82>
 80098ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098ce:	ed9d 0b00 	vldr	d0, [sp]
 80098d2:	f000 f975 	bl	8009bc0 <__kernel_cos>
 80098d6:	ec51 0b10 	vmov	r0, r1, d0
 80098da:	e7e7      	b.n	80098ac <cos+0x2c>
 80098dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098e0:	ed9d 0b00 	vldr	d0, [sp]
 80098e4:	f000 fa34 	bl	8009d50 <__kernel_sin>
 80098e8:	ec53 2b10 	vmov	r2, r3, d0
 80098ec:	4610      	mov	r0, r2
 80098ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80098f2:	e7db      	b.n	80098ac <cos+0x2c>
 80098f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098f8:	ed9d 0b00 	vldr	d0, [sp]
 80098fc:	f000 f960 	bl	8009bc0 <__kernel_cos>
 8009900:	e7f2      	b.n	80098e8 <cos+0x68>
 8009902:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009906:	ed9d 0b00 	vldr	d0, [sp]
 800990a:	2001      	movs	r0, #1
 800990c:	f000 fa20 	bl	8009d50 <__kernel_sin>
 8009910:	e7e1      	b.n	80098d6 <cos+0x56>
 8009912:	bf00      	nop
 8009914:	f3af 8000 	nop.w
	...
 8009920:	3fe921fb 	.word	0x3fe921fb
 8009924:	7fefffff 	.word	0x7fefffff

08009928 <fabs>:
 8009928:	ec51 0b10 	vmov	r0, r1, d0
 800992c:	4602      	mov	r2, r0
 800992e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009932:	ec43 2b10 	vmov	d0, r2, r3
 8009936:	4770      	bx	lr

08009938 <sin>:
 8009938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800993a:	ec53 2b10 	vmov	r2, r3, d0
 800993e:	4826      	ldr	r0, [pc, #152]	@ (80099d8 <sin+0xa0>)
 8009940:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009944:	4281      	cmp	r1, r0
 8009946:	d807      	bhi.n	8009958 <sin+0x20>
 8009948:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80099d0 <sin+0x98>
 800994c:	2000      	movs	r0, #0
 800994e:	b005      	add	sp, #20
 8009950:	f85d eb04 	ldr.w	lr, [sp], #4
 8009954:	f000 b9fc 	b.w	8009d50 <__kernel_sin>
 8009958:	4820      	ldr	r0, [pc, #128]	@ (80099dc <sin+0xa4>)
 800995a:	4281      	cmp	r1, r0
 800995c:	d908      	bls.n	8009970 <sin+0x38>
 800995e:	4610      	mov	r0, r2
 8009960:	4619      	mov	r1, r3
 8009962:	f7f6 fc3d 	bl	80001e0 <__aeabi_dsub>
 8009966:	ec41 0b10 	vmov	d0, r0, r1
 800996a:	b005      	add	sp, #20
 800996c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009970:	4668      	mov	r0, sp
 8009972:	f001 fc4d 	bl	800b210 <__ieee754_rem_pio2>
 8009976:	f000 0003 	and.w	r0, r0, #3
 800997a:	2801      	cmp	r0, #1
 800997c:	d00c      	beq.n	8009998 <sin+0x60>
 800997e:	2802      	cmp	r0, #2
 8009980:	d011      	beq.n	80099a6 <sin+0x6e>
 8009982:	b9e8      	cbnz	r0, 80099c0 <sin+0x88>
 8009984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009988:	ed9d 0b00 	vldr	d0, [sp]
 800998c:	2001      	movs	r0, #1
 800998e:	f000 f9df 	bl	8009d50 <__kernel_sin>
 8009992:	ec51 0b10 	vmov	r0, r1, d0
 8009996:	e7e6      	b.n	8009966 <sin+0x2e>
 8009998:	ed9d 1b02 	vldr	d1, [sp, #8]
 800999c:	ed9d 0b00 	vldr	d0, [sp]
 80099a0:	f000 f90e 	bl	8009bc0 <__kernel_cos>
 80099a4:	e7f5      	b.n	8009992 <sin+0x5a>
 80099a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099aa:	ed9d 0b00 	vldr	d0, [sp]
 80099ae:	2001      	movs	r0, #1
 80099b0:	f000 f9ce 	bl	8009d50 <__kernel_sin>
 80099b4:	ec53 2b10 	vmov	r2, r3, d0
 80099b8:	4610      	mov	r0, r2
 80099ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80099be:	e7d2      	b.n	8009966 <sin+0x2e>
 80099c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099c4:	ed9d 0b00 	vldr	d0, [sp]
 80099c8:	f000 f8fa 	bl	8009bc0 <__kernel_cos>
 80099cc:	e7f2      	b.n	80099b4 <sin+0x7c>
 80099ce:	bf00      	nop
	...
 80099d8:	3fe921fb 	.word	0x3fe921fb
 80099dc:	7fefffff 	.word	0x7fefffff

080099e0 <finite>:
 80099e0:	b082      	sub	sp, #8
 80099e2:	ed8d 0b00 	vstr	d0, [sp]
 80099e6:	9801      	ldr	r0, [sp, #4]
 80099e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80099ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80099f0:	0fc0      	lsrs	r0, r0, #31
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
	...

080099f8 <nan>:
 80099f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a00 <nan+0x8>
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	00000000 	.word	0x00000000
 8009a04:	7ff80000 	.word	0x7ff80000

08009a08 <__ieee754_sqrt>:
 8009a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4a68      	ldr	r2, [pc, #416]	@ (8009bb0 <__ieee754_sqrt+0x1a8>)
 8009a0e:	ec55 4b10 	vmov	r4, r5, d0
 8009a12:	43aa      	bics	r2, r5
 8009a14:	462b      	mov	r3, r5
 8009a16:	4621      	mov	r1, r4
 8009a18:	d110      	bne.n	8009a3c <__ieee754_sqrt+0x34>
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7f6 fd96 	bl	8000550 <__aeabi_dmul>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f7f6 fbda 	bl	80001e4 <__adddf3>
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
 8009a34:	ec45 4b10 	vmov	d0, r4, r5
 8009a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	2d00      	cmp	r5, #0
 8009a3e:	dc0e      	bgt.n	8009a5e <__ieee754_sqrt+0x56>
 8009a40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009a44:	4322      	orrs	r2, r4
 8009a46:	d0f5      	beq.n	8009a34 <__ieee754_sqrt+0x2c>
 8009a48:	b19d      	cbz	r5, 8009a72 <__ieee754_sqrt+0x6a>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f7f6 fbc6 	bl	80001e0 <__aeabi_dsub>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	f7f6 fea4 	bl	80007a4 <__aeabi_ddiv>
 8009a5c:	e7e8      	b.n	8009a30 <__ieee754_sqrt+0x28>
 8009a5e:	152a      	asrs	r2, r5, #20
 8009a60:	d115      	bne.n	8009a8e <__ieee754_sqrt+0x86>
 8009a62:	2000      	movs	r0, #0
 8009a64:	e009      	b.n	8009a7a <__ieee754_sqrt+0x72>
 8009a66:	0acb      	lsrs	r3, r1, #11
 8009a68:	3a15      	subs	r2, #21
 8009a6a:	0549      	lsls	r1, r1, #21
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0fa      	beq.n	8009a66 <__ieee754_sqrt+0x5e>
 8009a70:	e7f7      	b.n	8009a62 <__ieee754_sqrt+0x5a>
 8009a72:	462a      	mov	r2, r5
 8009a74:	e7fa      	b.n	8009a6c <__ieee754_sqrt+0x64>
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	3001      	adds	r0, #1
 8009a7a:	02dc      	lsls	r4, r3, #11
 8009a7c:	d5fb      	bpl.n	8009a76 <__ieee754_sqrt+0x6e>
 8009a7e:	1e44      	subs	r4, r0, #1
 8009a80:	1b12      	subs	r2, r2, r4
 8009a82:	f1c0 0420 	rsb	r4, r0, #32
 8009a86:	fa21 f404 	lsr.w	r4, r1, r4
 8009a8a:	4323      	orrs	r3, r4
 8009a8c:	4081      	lsls	r1, r0
 8009a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a9a:	07d2      	lsls	r2, r2, #31
 8009a9c:	bf5c      	itt	pl
 8009a9e:	005b      	lslpl	r3, r3, #1
 8009aa0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009aa8:	bf58      	it	pl
 8009aaa:	0049      	lslpl	r1, r1, #1
 8009aac:	2600      	movs	r6, #0
 8009aae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009ab2:	106d      	asrs	r5, r5, #1
 8009ab4:	0049      	lsls	r1, r1, #1
 8009ab6:	2016      	movs	r0, #22
 8009ab8:	4632      	mov	r2, r6
 8009aba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009abe:	1917      	adds	r7, r2, r4
 8009ac0:	429f      	cmp	r7, r3
 8009ac2:	bfde      	ittt	le
 8009ac4:	193a      	addle	r2, r7, r4
 8009ac6:	1bdb      	suble	r3, r3, r7
 8009ac8:	1936      	addle	r6, r6, r4
 8009aca:	0fcf      	lsrs	r7, r1, #31
 8009acc:	3801      	subs	r0, #1
 8009ace:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009ad2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ad6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009ada:	d1f0      	bne.n	8009abe <__ieee754_sqrt+0xb6>
 8009adc:	4604      	mov	r4, r0
 8009ade:	2720      	movs	r7, #32
 8009ae0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	eb00 0e0c 	add.w	lr, r0, ip
 8009aea:	db02      	blt.n	8009af2 <__ieee754_sqrt+0xea>
 8009aec:	d113      	bne.n	8009b16 <__ieee754_sqrt+0x10e>
 8009aee:	458e      	cmp	lr, r1
 8009af0:	d811      	bhi.n	8009b16 <__ieee754_sqrt+0x10e>
 8009af2:	f1be 0f00 	cmp.w	lr, #0
 8009af6:	eb0e 000c 	add.w	r0, lr, ip
 8009afa:	da42      	bge.n	8009b82 <__ieee754_sqrt+0x17a>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	db40      	blt.n	8009b82 <__ieee754_sqrt+0x17a>
 8009b00:	f102 0801 	add.w	r8, r2, #1
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	458e      	cmp	lr, r1
 8009b08:	bf88      	it	hi
 8009b0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b0e:	eba1 010e 	sub.w	r1, r1, lr
 8009b12:	4464      	add	r4, ip
 8009b14:	4642      	mov	r2, r8
 8009b16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b1a:	3f01      	subs	r7, #1
 8009b1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009b20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009b28:	d1dc      	bne.n	8009ae4 <__ieee754_sqrt+0xdc>
 8009b2a:	4319      	orrs	r1, r3
 8009b2c:	d01b      	beq.n	8009b66 <__ieee754_sqrt+0x15e>
 8009b2e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009bb4 <__ieee754_sqrt+0x1ac>
 8009b32:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009bb8 <__ieee754_sqrt+0x1b0>
 8009b36:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b3e:	f7f6 fb4f 	bl	80001e0 <__aeabi_dsub>
 8009b42:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 ff7b 	bl	8000a48 <__aeabi_dcmple>
 8009b52:	b140      	cbz	r0, 8009b66 <__ieee754_sqrt+0x15e>
 8009b54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009b58:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b60:	d111      	bne.n	8009b86 <__ieee754_sqrt+0x17e>
 8009b62:	3601      	adds	r6, #1
 8009b64:	463c      	mov	r4, r7
 8009b66:	1072      	asrs	r2, r6, #1
 8009b68:	0863      	lsrs	r3, r4, #1
 8009b6a:	07f1      	lsls	r1, r6, #31
 8009b6c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009b70:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009b74:	bf48      	it	mi
 8009b76:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009b7a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009b7e:	4618      	mov	r0, r3
 8009b80:	e756      	b.n	8009a30 <__ieee754_sqrt+0x28>
 8009b82:	4690      	mov	r8, r2
 8009b84:	e7be      	b.n	8009b04 <__ieee754_sqrt+0xfc>
 8009b86:	f7f6 fb2d 	bl	80001e4 <__adddf3>
 8009b8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	f7f6 ff4d 	bl	8000a34 <__aeabi_dcmplt>
 8009b9a:	b120      	cbz	r0, 8009ba6 <__ieee754_sqrt+0x19e>
 8009b9c:	1ca0      	adds	r0, r4, #2
 8009b9e:	bf08      	it	eq
 8009ba0:	3601      	addeq	r6, #1
 8009ba2:	3402      	adds	r4, #2
 8009ba4:	e7df      	b.n	8009b66 <__ieee754_sqrt+0x15e>
 8009ba6:	1c63      	adds	r3, r4, #1
 8009ba8:	f023 0401 	bic.w	r4, r3, #1
 8009bac:	e7db      	b.n	8009b66 <__ieee754_sqrt+0x15e>
 8009bae:	bf00      	nop
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	20000068 	.word	0x20000068
 8009bb8:	20000060 	.word	0x20000060
 8009bbc:	00000000 	.word	0x00000000

08009bc0 <__kernel_cos>:
 8009bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	ec57 6b10 	vmov	r6, r7, d0
 8009bc8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009bcc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009bd0:	ed8d 1b00 	vstr	d1, [sp]
 8009bd4:	d206      	bcs.n	8009be4 <__kernel_cos+0x24>
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	4639      	mov	r1, r7
 8009bda:	f7f6 ff69 	bl	8000ab0 <__aeabi_d2iz>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f000 8088 	beq.w	8009cf4 <__kernel_cos+0x134>
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 fcb0 	bl	8000550 <__aeabi_dmul>
 8009bf0:	4b51      	ldr	r3, [pc, #324]	@ (8009d38 <__kernel_cos+0x178>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	f7f6 fcaa 	bl	8000550 <__aeabi_dmul>
 8009bfc:	a340      	add	r3, pc, #256	@ (adr r3, 8009d00 <__kernel_cos+0x140>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	4682      	mov	sl, r0
 8009c04:	468b      	mov	fp, r1
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fca1 	bl	8000550 <__aeabi_dmul>
 8009c0e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009d08 <__kernel_cos+0x148>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 fae6 	bl	80001e4 <__adddf3>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	f7f6 fc98 	bl	8000550 <__aeabi_dmul>
 8009c20:	a33b      	add	r3, pc, #236	@ (adr r3, 8009d10 <__kernel_cos+0x150>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fadb 	bl	80001e0 <__aeabi_dsub>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	f7f6 fc8f 	bl	8000550 <__aeabi_dmul>
 8009c32:	a339      	add	r3, pc, #228	@ (adr r3, 8009d18 <__kernel_cos+0x158>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fad4 	bl	80001e4 <__adddf3>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	462b      	mov	r3, r5
 8009c40:	f7f6 fc86 	bl	8000550 <__aeabi_dmul>
 8009c44:	a336      	add	r3, pc, #216	@ (adr r3, 8009d20 <__kernel_cos+0x160>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fac9 	bl	80001e0 <__aeabi_dsub>
 8009c4e:	4622      	mov	r2, r4
 8009c50:	462b      	mov	r3, r5
 8009c52:	f7f6 fc7d 	bl	8000550 <__aeabi_dmul>
 8009c56:	a334      	add	r3, pc, #208	@ (adr r3, 8009d28 <__kernel_cos+0x168>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fac2 	bl	80001e4 <__adddf3>
 8009c60:	4622      	mov	r2, r4
 8009c62:	462b      	mov	r3, r5
 8009c64:	f7f6 fc74 	bl	8000550 <__aeabi_dmul>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	f7f6 fc70 	bl	8000550 <__aeabi_dmul>
 8009c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fc68 	bl	8000550 <__aeabi_dmul>
 8009c80:	460b      	mov	r3, r1
 8009c82:	4602      	mov	r2, r0
 8009c84:	4629      	mov	r1, r5
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7f6 faaa 	bl	80001e0 <__aeabi_dsub>
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009d3c <__kernel_cos+0x17c>)
 8009c8e:	4598      	cmp	r8, r3
 8009c90:	4606      	mov	r6, r0
 8009c92:	460f      	mov	r7, r1
 8009c94:	d810      	bhi.n	8009cb8 <__kernel_cos+0xf8>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7f6 fa9f 	bl	80001e0 <__aeabi_dsub>
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4926      	ldr	r1, [pc, #152]	@ (8009d40 <__kernel_cos+0x180>)
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f7f6 fa99 	bl	80001e0 <__aeabi_dsub>
 8009cae:	ec41 0b10 	vmov	d0, r0, r1
 8009cb2:	b003      	add	sp, #12
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	4b22      	ldr	r3, [pc, #136]	@ (8009d44 <__kernel_cos+0x184>)
 8009cba:	4921      	ldr	r1, [pc, #132]	@ (8009d40 <__kernel_cos+0x180>)
 8009cbc:	4598      	cmp	r8, r3
 8009cbe:	bf8c      	ite	hi
 8009cc0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009d48 <__kernel_cos+0x188>)
 8009cc2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009cc6:	2400      	movs	r4, #0
 8009cc8:	4622      	mov	r2, r4
 8009cca:	462b      	mov	r3, r5
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f7f6 fa87 	bl	80001e0 <__aeabi_dsub>
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	462b      	mov	r3, r5
 8009cda:	4650      	mov	r0, sl
 8009cdc:	4659      	mov	r1, fp
 8009cde:	f7f6 fa7f 	bl	80001e0 <__aeabi_dsub>
 8009ce2:	4632      	mov	r2, r6
 8009ce4:	463b      	mov	r3, r7
 8009ce6:	f7f6 fa7b 	bl	80001e0 <__aeabi_dsub>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	e7da      	b.n	8009caa <__kernel_cos+0xea>
 8009cf4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009d30 <__kernel_cos+0x170>
 8009cf8:	e7db      	b.n	8009cb2 <__kernel_cos+0xf2>
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w
 8009d00:	be8838d4 	.word	0xbe8838d4
 8009d04:	bda8fae9 	.word	0xbda8fae9
 8009d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8009d0c:	3e21ee9e 	.word	0x3e21ee9e
 8009d10:	809c52ad 	.word	0x809c52ad
 8009d14:	3e927e4f 	.word	0x3e927e4f
 8009d18:	19cb1590 	.word	0x19cb1590
 8009d1c:	3efa01a0 	.word	0x3efa01a0
 8009d20:	16c15177 	.word	0x16c15177
 8009d24:	3f56c16c 	.word	0x3f56c16c
 8009d28:	5555554c 	.word	0x5555554c
 8009d2c:	3fa55555 	.word	0x3fa55555
 8009d30:	00000000 	.word	0x00000000
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	3fe00000 	.word	0x3fe00000
 8009d3c:	3fd33332 	.word	0x3fd33332
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	3fe90000 	.word	0x3fe90000
 8009d48:	3fd20000 	.word	0x3fd20000
 8009d4c:	00000000 	.word	0x00000000

08009d50 <__kernel_sin>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	ec55 4b10 	vmov	r4, r5, d0
 8009d58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009d62:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009d66:	4680      	mov	r8, r0
 8009d68:	d205      	bcs.n	8009d76 <__kernel_sin+0x26>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fe9f 	bl	8000ab0 <__aeabi_d2iz>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d052      	beq.n	8009e1c <__kernel_sin+0xcc>
 8009d76:	4622      	mov	r2, r4
 8009d78:	462b      	mov	r3, r5
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f7f6 fbe7 	bl	8000550 <__aeabi_dmul>
 8009d82:	4682      	mov	sl, r0
 8009d84:	468b      	mov	fp, r1
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fbdf 	bl	8000550 <__aeabi_dmul>
 8009d92:	a342      	add	r3, pc, #264	@ (adr r3, 8009e9c <__kernel_sin+0x14c>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	e9cd 0100 	strd	r0, r1, [sp]
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	4659      	mov	r1, fp
 8009da0:	f7f6 fbd6 	bl	8000550 <__aeabi_dmul>
 8009da4:	a33f      	add	r3, pc, #252	@ (adr r3, 8009ea4 <__kernel_sin+0x154>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fa19 	bl	80001e0 <__aeabi_dsub>
 8009dae:	4652      	mov	r2, sl
 8009db0:	465b      	mov	r3, fp
 8009db2:	f7f6 fbcd 	bl	8000550 <__aeabi_dmul>
 8009db6:	a33d      	add	r3, pc, #244	@ (adr r3, 8009eac <__kernel_sin+0x15c>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 fa12 	bl	80001e4 <__adddf3>
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	f7f6 fbc4 	bl	8000550 <__aeabi_dmul>
 8009dc8:	a33a      	add	r3, pc, #232	@ (adr r3, 8009eb4 <__kernel_sin+0x164>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fa07 	bl	80001e0 <__aeabi_dsub>
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	f7f6 fbbb 	bl	8000550 <__aeabi_dmul>
 8009dda:	a338      	add	r3, pc, #224	@ (adr r3, 8009ebc <__kernel_sin+0x16c>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fa00 	bl	80001e4 <__adddf3>
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	d11b      	bne.n	8009e26 <__kernel_sin+0xd6>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4650      	mov	r0, sl
 8009df4:	4659      	mov	r1, fp
 8009df6:	f7f6 fbab 	bl	8000550 <__aeabi_dmul>
 8009dfa:	a325      	add	r3, pc, #148	@ (adr r3, 8009e90 <__kernel_sin+0x140>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 f9ee 	bl	80001e0 <__aeabi_dsub>
 8009e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e08:	f7f6 fba2 	bl	8000550 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 f9e6 	bl	80001e4 <__adddf3>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	ec45 4b10 	vmov	d0, r4, r5
 8009e20:	b005      	add	sp, #20
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e98 <__kernel_sin+0x148>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f7f6 fb8f 	bl	8000550 <__aeabi_dmul>
 8009e32:	4632      	mov	r2, r6
 8009e34:	4680      	mov	r8, r0
 8009e36:	4689      	mov	r9, r1
 8009e38:	463b      	mov	r3, r7
 8009e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e3e:	f7f6 fb87 	bl	8000550 <__aeabi_dmul>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 f9c9 	bl	80001e0 <__aeabi_dsub>
 8009e4e:	4652      	mov	r2, sl
 8009e50:	465b      	mov	r3, fp
 8009e52:	f7f6 fb7d 	bl	8000550 <__aeabi_dmul>
 8009e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e5a:	f7f6 f9c1 	bl	80001e0 <__aeabi_dsub>
 8009e5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e90 <__kernel_sin+0x140>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6c:	f7f6 fb70 	bl	8000550 <__aeabi_dmul>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 f9b4 	bl	80001e4 <__adddf3>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 f9ac 	bl	80001e0 <__aeabi_dsub>
 8009e88:	e7c6      	b.n	8009e18 <__kernel_sin+0xc8>
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w
 8009e90:	55555549 	.word	0x55555549
 8009e94:	3fc55555 	.word	0x3fc55555
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	5acfd57c 	.word	0x5acfd57c
 8009ea0:	3de5d93a 	.word	0x3de5d93a
 8009ea4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009ea8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009eac:	57b1fe7d 	.word	0x57b1fe7d
 8009eb0:	3ec71de3 	.word	0x3ec71de3
 8009eb4:	19c161d5 	.word	0x19c161d5
 8009eb8:	3f2a01a0 	.word	0x3f2a01a0
 8009ebc:	1110f8a6 	.word	0x1110f8a6
 8009ec0:	3f811111 	.word	0x3f811111
 8009ec4:	00000000 	.word	0x00000000

08009ec8 <__ieee754_acos>:
 8009ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	ec55 4b10 	vmov	r4, r5, d0
 8009ed0:	49b7      	ldr	r1, [pc, #732]	@ (800a1b0 <__ieee754_acos+0x2e8>)
 8009ed2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009ed6:	428b      	cmp	r3, r1
 8009ed8:	d919      	bls.n	8009f0e <__ieee754_acos+0x46>
 8009eda:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8009ede:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009ee2:	4323      	orrs	r3, r4
 8009ee4:	d106      	bne.n	8009ef4 <__ieee754_acos+0x2c>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	f340 8210 	ble.w	800a30c <__ieee754_acos+0x444>
 8009eec:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800a140 <__ieee754_acos+0x278>
 8009ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f970 	bl	80001e0 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	f7f6 fc4e 	bl	80007a4 <__aeabi_ddiv>
 8009f08:	ec41 0b10 	vmov	d0, r0, r1
 8009f0c:	e7f0      	b.n	8009ef0 <__ieee754_acos+0x28>
 8009f0e:	49a9      	ldr	r1, [pc, #676]	@ (800a1b4 <__ieee754_acos+0x2ec>)
 8009f10:	428b      	cmp	r3, r1
 8009f12:	f200 8085 	bhi.w	800a020 <__ieee754_acos+0x158>
 8009f16:	4aa8      	ldr	r2, [pc, #672]	@ (800a1b8 <__ieee754_acos+0x2f0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	f240 81fa 	bls.w	800a312 <__ieee754_acos+0x44a>
 8009f1e:	4622      	mov	r2, r4
 8009f20:	462b      	mov	r3, r5
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7f6 fb13 	bl	8000550 <__aeabi_dmul>
 8009f2a:	a387      	add	r3, pc, #540	@ (adr r3, 800a148 <__ieee754_acos+0x280>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	4606      	mov	r6, r0
 8009f32:	460f      	mov	r7, r1
 8009f34:	f7f6 fb0c 	bl	8000550 <__aeabi_dmul>
 8009f38:	a385      	add	r3, pc, #532	@ (adr r3, 800a150 <__ieee754_acos+0x288>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	f7f6 f951 	bl	80001e4 <__adddf3>
 8009f42:	4632      	mov	r2, r6
 8009f44:	463b      	mov	r3, r7
 8009f46:	f7f6 fb03 	bl	8000550 <__aeabi_dmul>
 8009f4a:	a383      	add	r3, pc, #524	@ (adr r3, 800a158 <__ieee754_acos+0x290>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 f946 	bl	80001e0 <__aeabi_dsub>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	f7f6 fafa 	bl	8000550 <__aeabi_dmul>
 8009f5c:	a380      	add	r3, pc, #512	@ (adr r3, 800a160 <__ieee754_acos+0x298>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 f93f 	bl	80001e4 <__adddf3>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	f7f6 faf1 	bl	8000550 <__aeabi_dmul>
 8009f6e:	a37e      	add	r3, pc, #504	@ (adr r3, 800a168 <__ieee754_acos+0x2a0>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 f934 	bl	80001e0 <__aeabi_dsub>
 8009f78:	4632      	mov	r2, r6
 8009f7a:	463b      	mov	r3, r7
 8009f7c:	f7f6 fae8 	bl	8000550 <__aeabi_dmul>
 8009f80:	a37b      	add	r3, pc, #492	@ (adr r3, 800a170 <__ieee754_acos+0x2a8>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f92d 	bl	80001e4 <__adddf3>
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	f7f6 fadf 	bl	8000550 <__aeabi_dmul>
 8009f92:	a379      	add	r3, pc, #484	@ (adr r3, 800a178 <__ieee754_acos+0x2b0>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	4680      	mov	r8, r0
 8009f9a:	4689      	mov	r9, r1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 fad6 	bl	8000550 <__aeabi_dmul>
 8009fa4:	a376      	add	r3, pc, #472	@ (adr r3, 800a180 <__ieee754_acos+0x2b8>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f919 	bl	80001e0 <__aeabi_dsub>
 8009fae:	4632      	mov	r2, r6
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	f7f6 facd 	bl	8000550 <__aeabi_dmul>
 8009fb6:	a374      	add	r3, pc, #464	@ (adr r3, 800a188 <__ieee754_acos+0x2c0>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f912 	bl	80001e4 <__adddf3>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	f7f6 fac4 	bl	8000550 <__aeabi_dmul>
 8009fc8:	a371      	add	r3, pc, #452	@ (adr r3, 800a190 <__ieee754_acos+0x2c8>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f907 	bl	80001e0 <__aeabi_dsub>
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	f7f6 fabb 	bl	8000550 <__aeabi_dmul>
 8009fda:	4b78      	ldr	r3, [pc, #480]	@ (800a1bc <__ieee754_acos+0x2f4>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f7f6 f901 	bl	80001e4 <__adddf3>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4649      	mov	r1, r9
 8009fea:	f7f6 fbdb 	bl	80007a4 <__aeabi_ddiv>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	f7f6 faad 	bl	8000550 <__aeabi_dmul>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	a167      	add	r1, pc, #412	@ (adr r1, 800a198 <__ieee754_acos+0x2d0>)
 8009ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a000:	f7f6 f8ee 	bl	80001e0 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4620      	mov	r0, r4
 800a00a:	4629      	mov	r1, r5
 800a00c:	f7f6 f8e8 	bl	80001e0 <__aeabi_dsub>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	a162      	add	r1, pc, #392	@ (adr r1, 800a1a0 <__ieee754_acos+0x2d8>)
 800a016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01a:	f7f6 f8e1 	bl	80001e0 <__aeabi_dsub>
 800a01e:	e773      	b.n	8009f08 <__ieee754_acos+0x40>
 800a020:	2d00      	cmp	r5, #0
 800a022:	f280 80cf 	bge.w	800a1c4 <__ieee754_acos+0x2fc>
 800a026:	4b65      	ldr	r3, [pc, #404]	@ (800a1bc <__ieee754_acos+0x2f4>)
 800a028:	2200      	movs	r2, #0
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 f8d9 	bl	80001e4 <__adddf3>
 800a032:	4b63      	ldr	r3, [pc, #396]	@ (800a1c0 <__ieee754_acos+0x2f8>)
 800a034:	2200      	movs	r2, #0
 800a036:	f7f6 fa8b 	bl	8000550 <__aeabi_dmul>
 800a03a:	a343      	add	r3, pc, #268	@ (adr r3, 800a148 <__ieee754_acos+0x280>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	4604      	mov	r4, r0
 800a042:	460d      	mov	r5, r1
 800a044:	f7f6 fa84 	bl	8000550 <__aeabi_dmul>
 800a048:	a341      	add	r3, pc, #260	@ (adr r3, 800a150 <__ieee754_acos+0x288>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 f8c9 	bl	80001e4 <__adddf3>
 800a052:	4622      	mov	r2, r4
 800a054:	462b      	mov	r3, r5
 800a056:	f7f6 fa7b 	bl	8000550 <__aeabi_dmul>
 800a05a:	a33f      	add	r3, pc, #252	@ (adr r3, 800a158 <__ieee754_acos+0x290>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 f8be 	bl	80001e0 <__aeabi_dsub>
 800a064:	4622      	mov	r2, r4
 800a066:	462b      	mov	r3, r5
 800a068:	f7f6 fa72 	bl	8000550 <__aeabi_dmul>
 800a06c:	a33c      	add	r3, pc, #240	@ (adr r3, 800a160 <__ieee754_acos+0x298>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f8b7 	bl	80001e4 <__adddf3>
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	f7f6 fa69 	bl	8000550 <__aeabi_dmul>
 800a07e:	a33a      	add	r3, pc, #232	@ (adr r3, 800a168 <__ieee754_acos+0x2a0>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f7f6 f8ac 	bl	80001e0 <__aeabi_dsub>
 800a088:	4622      	mov	r2, r4
 800a08a:	462b      	mov	r3, r5
 800a08c:	f7f6 fa60 	bl	8000550 <__aeabi_dmul>
 800a090:	a337      	add	r3, pc, #220	@ (adr r3, 800a170 <__ieee754_acos+0x2a8>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 f8a5 	bl	80001e4 <__adddf3>
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 fa57 	bl	8000550 <__aeabi_dmul>
 800a0a2:	a335      	add	r3, pc, #212	@ (adr r3, 800a178 <__ieee754_acos+0x2b0>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f7f6 fa4e 	bl	8000550 <__aeabi_dmul>
 800a0b4:	a332      	add	r3, pc, #200	@ (adr r3, 800a180 <__ieee754_acos+0x2b8>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f7f6 f891 	bl	80001e0 <__aeabi_dsub>
 800a0be:	4622      	mov	r2, r4
 800a0c0:	462b      	mov	r3, r5
 800a0c2:	f7f6 fa45 	bl	8000550 <__aeabi_dmul>
 800a0c6:	a330      	add	r3, pc, #192	@ (adr r3, 800a188 <__ieee754_acos+0x2c0>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 f88a 	bl	80001e4 <__adddf3>
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	f7f6 fa3c 	bl	8000550 <__aeabi_dmul>
 800a0d8:	a32d      	add	r3, pc, #180	@ (adr r3, 800a190 <__ieee754_acos+0x2c8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 f87f 	bl	80001e0 <__aeabi_dsub>
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	f7f6 fa33 	bl	8000550 <__aeabi_dmul>
 800a0ea:	4b34      	ldr	r3, [pc, #208]	@ (800a1bc <__ieee754_acos+0x2f4>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f7f6 f879 	bl	80001e4 <__adddf3>
 800a0f2:	ec45 4b10 	vmov	d0, r4, r5
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	f7ff fc85 	bl	8009a08 <__ieee754_sqrt>
 800a0fe:	ec55 4b10 	vmov	r4, r5, d0
 800a102:	4642      	mov	r2, r8
 800a104:	464b      	mov	r3, r9
 800a106:	4630      	mov	r0, r6
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 fb4b 	bl	80007a4 <__aeabi_ddiv>
 800a10e:	4622      	mov	r2, r4
 800a110:	462b      	mov	r3, r5
 800a112:	f7f6 fa1d 	bl	8000550 <__aeabi_dmul>
 800a116:	a320      	add	r3, pc, #128	@ (adr r3, 800a198 <__ieee754_acos+0x2d0>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f860 	bl	80001e0 <__aeabi_dsub>
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	f7f6 f85e 	bl	80001e4 <__adddf3>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	f7f6 f85a 	bl	80001e4 <__adddf3>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	a11c      	add	r1, pc, #112	@ (adr r1, 800a1a8 <__ieee754_acos+0x2e0>)
 800a136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a13a:	e76e      	b.n	800a01a <__ieee754_acos+0x152>
 800a13c:	f3af 8000 	nop.w
	...
 800a148:	0dfdf709 	.word	0x0dfdf709
 800a14c:	3f023de1 	.word	0x3f023de1
 800a150:	7501b288 	.word	0x7501b288
 800a154:	3f49efe0 	.word	0x3f49efe0
 800a158:	b5688f3b 	.word	0xb5688f3b
 800a15c:	3fa48228 	.word	0x3fa48228
 800a160:	0e884455 	.word	0x0e884455
 800a164:	3fc9c155 	.word	0x3fc9c155
 800a168:	03eb6f7d 	.word	0x03eb6f7d
 800a16c:	3fd4d612 	.word	0x3fd4d612
 800a170:	55555555 	.word	0x55555555
 800a174:	3fc55555 	.word	0x3fc55555
 800a178:	b12e9282 	.word	0xb12e9282
 800a17c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a180:	1b8d0159 	.word	0x1b8d0159
 800a184:	3fe6066c 	.word	0x3fe6066c
 800a188:	9c598ac8 	.word	0x9c598ac8
 800a18c:	40002ae5 	.word	0x40002ae5
 800a190:	1c8a2d4b 	.word	0x1c8a2d4b
 800a194:	40033a27 	.word	0x40033a27
 800a198:	33145c07 	.word	0x33145c07
 800a19c:	3c91a626 	.word	0x3c91a626
 800a1a0:	54442d18 	.word	0x54442d18
 800a1a4:	3ff921fb 	.word	0x3ff921fb
 800a1a8:	54442d18 	.word	0x54442d18
 800a1ac:	400921fb 	.word	0x400921fb
 800a1b0:	3fefffff 	.word	0x3fefffff
 800a1b4:	3fdfffff 	.word	0x3fdfffff
 800a1b8:	3c600000 	.word	0x3c600000
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	3fe00000 	.word	0x3fe00000
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	496b      	ldr	r1, [pc, #428]	@ (800a378 <__ieee754_acos+0x4b0>)
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	f7f6 f808 	bl	80001e0 <__aeabi_dsub>
 800a1d0:	4b6a      	ldr	r3, [pc, #424]	@ (800a37c <__ieee754_acos+0x4b4>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7f6 f9bc 	bl	8000550 <__aeabi_dmul>
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	ec45 4b10 	vmov	d0, r4, r5
 800a1e0:	f7ff fc12 	bl	8009a08 <__ieee754_sqrt>
 800a1e4:	a34c      	add	r3, pc, #304	@ (adr r3, 800a318 <__ieee754_acos+0x450>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	ec59 8b10 	vmov	r8, r9, d0
 800a1f2:	f7f6 f9ad 	bl	8000550 <__aeabi_dmul>
 800a1f6:	a34a      	add	r3, pc, #296	@ (adr r3, 800a320 <__ieee754_acos+0x458>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f5 fff2 	bl	80001e4 <__adddf3>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9a4 	bl	8000550 <__aeabi_dmul>
 800a208:	a347      	add	r3, pc, #284	@ (adr r3, 800a328 <__ieee754_acos+0x460>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe7 	bl	80001e0 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 f99b 	bl	8000550 <__aeabi_dmul>
 800a21a:	a345      	add	r3, pc, #276	@ (adr r3, 800a330 <__ieee754_acos+0x468>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f5 ffe0 	bl	80001e4 <__adddf3>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f992 	bl	8000550 <__aeabi_dmul>
 800a22c:	a342      	add	r3, pc, #264	@ (adr r3, 800a338 <__ieee754_acos+0x470>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f5 ffd5 	bl	80001e0 <__aeabi_dsub>
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	f7f6 f989 	bl	8000550 <__aeabi_dmul>
 800a23e:	a340      	add	r3, pc, #256	@ (adr r3, 800a340 <__ieee754_acos+0x478>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f5 ffce 	bl	80001e4 <__adddf3>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	f7f6 f980 	bl	8000550 <__aeabi_dmul>
 800a250:	a33d      	add	r3, pc, #244	@ (adr r3, 800a348 <__ieee754_acos+0x480>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	4682      	mov	sl, r0
 800a258:	468b      	mov	fp, r1
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 f977 	bl	8000550 <__aeabi_dmul>
 800a262:	a33b      	add	r3, pc, #236	@ (adr r3, 800a350 <__ieee754_acos+0x488>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f5 ffba 	bl	80001e0 <__aeabi_dsub>
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	f7f6 f96e 	bl	8000550 <__aeabi_dmul>
 800a274:	a338      	add	r3, pc, #224	@ (adr r3, 800a358 <__ieee754_acos+0x490>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ffb3 	bl	80001e4 <__adddf3>
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	f7f6 f965 	bl	8000550 <__aeabi_dmul>
 800a286:	a336      	add	r3, pc, #216	@ (adr r3, 800a360 <__ieee754_acos+0x498>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f5 ffa8 	bl	80001e0 <__aeabi_dsub>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f6 f95c 	bl	8000550 <__aeabi_dmul>
 800a298:	4b37      	ldr	r3, [pc, #220]	@ (800a378 <__ieee754_acos+0x4b0>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	f7f5 ffa2 	bl	80001e4 <__adddf3>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	f7f6 fa7c 	bl	80007a4 <__aeabi_ddiv>
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	f7f6 f94e 	bl	8000550 <__aeabi_dmul>
 800a2b4:	2600      	movs	r6, #0
 800a2b6:	4682      	mov	sl, r0
 800a2b8:	468b      	mov	fp, r1
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	464b      	mov	r3, r9
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f6 f945 	bl	8000550 <__aeabi_dmul>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 ff87 	bl	80001e0 <__aeabi_dsub>
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	464b      	mov	r3, r9
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f5 ff81 	bl	80001e4 <__adddf3>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f6 fa5b 	bl	80007a4 <__aeabi_ddiv>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	4659      	mov	r1, fp
 800a2f6:	f7f5 ff75 	bl	80001e4 <__adddf3>
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	f7f5 ff71 	bl	80001e4 <__adddf3>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	f7f5 ff6d 	bl	80001e4 <__adddf3>
 800a30a:	e5fd      	b.n	8009f08 <__ieee754_acos+0x40>
 800a30c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a368 <__ieee754_acos+0x4a0>
 800a310:	e5ee      	b.n	8009ef0 <__ieee754_acos+0x28>
 800a312:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a370 <__ieee754_acos+0x4a8>
 800a316:	e5eb      	b.n	8009ef0 <__ieee754_acos+0x28>
 800a318:	0dfdf709 	.word	0x0dfdf709
 800a31c:	3f023de1 	.word	0x3f023de1
 800a320:	7501b288 	.word	0x7501b288
 800a324:	3f49efe0 	.word	0x3f49efe0
 800a328:	b5688f3b 	.word	0xb5688f3b
 800a32c:	3fa48228 	.word	0x3fa48228
 800a330:	0e884455 	.word	0x0e884455
 800a334:	3fc9c155 	.word	0x3fc9c155
 800a338:	03eb6f7d 	.word	0x03eb6f7d
 800a33c:	3fd4d612 	.word	0x3fd4d612
 800a340:	55555555 	.word	0x55555555
 800a344:	3fc55555 	.word	0x3fc55555
 800a348:	b12e9282 	.word	0xb12e9282
 800a34c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a350:	1b8d0159 	.word	0x1b8d0159
 800a354:	3fe6066c 	.word	0x3fe6066c
 800a358:	9c598ac8 	.word	0x9c598ac8
 800a35c:	40002ae5 	.word	0x40002ae5
 800a360:	1c8a2d4b 	.word	0x1c8a2d4b
 800a364:	40033a27 	.word	0x40033a27
 800a368:	54442d18 	.word	0x54442d18
 800a36c:	400921fb 	.word	0x400921fb
 800a370:	54442d18 	.word	0x54442d18
 800a374:	3ff921fb 	.word	0x3ff921fb
 800a378:	3ff00000 	.word	0x3ff00000
 800a37c:	3fe00000 	.word	0x3fe00000

0800a380 <__ieee754_asin>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	ec55 4b10 	vmov	r4, r5, d0
 800a388:	4bc7      	ldr	r3, [pc, #796]	@ (800a6a8 <__ieee754_asin+0x328>)
 800a38a:	b087      	sub	sp, #28
 800a38c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a390:	429e      	cmp	r6, r3
 800a392:	9501      	str	r5, [sp, #4]
 800a394:	d92d      	bls.n	800a3f2 <__ieee754_asin+0x72>
 800a396:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a39a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a39e:	4326      	orrs	r6, r4
 800a3a0:	d116      	bne.n	800a3d0 <__ieee754_asin+0x50>
 800a3a2:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a640 <__ieee754_asin+0x2c0>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f7f6 f8d0 	bl	8000550 <__aeabi_dmul>
 800a3b0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800a648 <__ieee754_asin+0x2c8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f6 f8c7 	bl	8000550 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff0b 	bl	80001e4 <__adddf3>
 800a3ce:	e009      	b.n	800a3e4 <__ieee754_asin+0x64>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 ff02 	bl	80001e0 <__aeabi_dsub>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	f7f6 f9e0 	bl	80007a4 <__aeabi_ddiv>
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	460d      	mov	r5, r1
 800a3e8:	ec45 4b10 	vmov	d0, r4, r5
 800a3ec:	b007      	add	sp, #28
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	4bae      	ldr	r3, [pc, #696]	@ (800a6ac <__ieee754_asin+0x32c>)
 800a3f4:	429e      	cmp	r6, r3
 800a3f6:	d810      	bhi.n	800a41a <__ieee754_asin+0x9a>
 800a3f8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a3fc:	f080 80ad 	bcs.w	800a55a <__ieee754_asin+0x1da>
 800a400:	a393      	add	r3, pc, #588	@ (adr r3, 800a650 <__ieee754_asin+0x2d0>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f5 feeb 	bl	80001e4 <__adddf3>
 800a40e:	4ba8      	ldr	r3, [pc, #672]	@ (800a6b0 <__ieee754_asin+0x330>)
 800a410:	2200      	movs	r2, #0
 800a412:	f7f6 fb2d 	bl	8000a70 <__aeabi_dcmpgt>
 800a416:	2800      	cmp	r0, #0
 800a418:	d1e6      	bne.n	800a3e8 <__ieee754_asin+0x68>
 800a41a:	ec45 4b10 	vmov	d0, r4, r5
 800a41e:	f7ff fa83 	bl	8009928 <fabs>
 800a422:	49a3      	ldr	r1, [pc, #652]	@ (800a6b0 <__ieee754_asin+0x330>)
 800a424:	ec53 2b10 	vmov	r2, r3, d0
 800a428:	2000      	movs	r0, #0
 800a42a:	f7f5 fed9 	bl	80001e0 <__aeabi_dsub>
 800a42e:	4ba1      	ldr	r3, [pc, #644]	@ (800a6b4 <__ieee754_asin+0x334>)
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f88d 	bl	8000550 <__aeabi_dmul>
 800a436:	a388      	add	r3, pc, #544	@ (adr r3, 800a658 <__ieee754_asin+0x2d8>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4604      	mov	r4, r0
 800a43e:	460d      	mov	r5, r1
 800a440:	f7f6 f886 	bl	8000550 <__aeabi_dmul>
 800a444:	a386      	add	r3, pc, #536	@ (adr r3, 800a660 <__ieee754_asin+0x2e0>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 fecb 	bl	80001e4 <__adddf3>
 800a44e:	4622      	mov	r2, r4
 800a450:	462b      	mov	r3, r5
 800a452:	f7f6 f87d 	bl	8000550 <__aeabi_dmul>
 800a456:	a384      	add	r3, pc, #528	@ (adr r3, 800a668 <__ieee754_asin+0x2e8>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f7f5 fec0 	bl	80001e0 <__aeabi_dsub>
 800a460:	4622      	mov	r2, r4
 800a462:	462b      	mov	r3, r5
 800a464:	f7f6 f874 	bl	8000550 <__aeabi_dmul>
 800a468:	a381      	add	r3, pc, #516	@ (adr r3, 800a670 <__ieee754_asin+0x2f0>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f7f5 feb9 	bl	80001e4 <__adddf3>
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	f7f6 f86b 	bl	8000550 <__aeabi_dmul>
 800a47a:	a37f      	add	r3, pc, #508	@ (adr r3, 800a678 <__ieee754_asin+0x2f8>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f5 feae 	bl	80001e0 <__aeabi_dsub>
 800a484:	4622      	mov	r2, r4
 800a486:	462b      	mov	r3, r5
 800a488:	f7f6 f862 	bl	8000550 <__aeabi_dmul>
 800a48c:	a37c      	add	r3, pc, #496	@ (adr r3, 800a680 <__ieee754_asin+0x300>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fea7 	bl	80001e4 <__adddf3>
 800a496:	4622      	mov	r2, r4
 800a498:	462b      	mov	r3, r5
 800a49a:	f7f6 f859 	bl	8000550 <__aeabi_dmul>
 800a49e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a688 <__ieee754_asin+0x308>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f6 f850 	bl	8000550 <__aeabi_dmul>
 800a4b0:	a377      	add	r3, pc, #476	@ (adr r3, 800a690 <__ieee754_asin+0x310>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f5 fe93 	bl	80001e0 <__aeabi_dsub>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	462b      	mov	r3, r5
 800a4be:	f7f6 f847 	bl	8000550 <__aeabi_dmul>
 800a4c2:	a375      	add	r3, pc, #468	@ (adr r3, 800a698 <__ieee754_asin+0x318>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f5 fe8c 	bl	80001e4 <__adddf3>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	f7f6 f83e 	bl	8000550 <__aeabi_dmul>
 800a4d4:	a372      	add	r3, pc, #456	@ (adr r3, 800a6a0 <__ieee754_asin+0x320>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 fe81 	bl	80001e0 <__aeabi_dsub>
 800a4de:	4622      	mov	r2, r4
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	f7f6 f835 	bl	8000550 <__aeabi_dmul>
 800a4e6:	4b72      	ldr	r3, [pc, #456]	@ (800a6b0 <__ieee754_asin+0x330>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f5 fe7b 	bl	80001e4 <__adddf3>
 800a4ee:	ec45 4b10 	vmov	d0, r4, r5
 800a4f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f6:	f7ff fa87 	bl	8009a08 <__ieee754_sqrt>
 800a4fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a6b8 <__ieee754_asin+0x338>)
 800a4fc:	429e      	cmp	r6, r3
 800a4fe:	ec5b ab10 	vmov	sl, fp, d0
 800a502:	f240 80db 	bls.w	800a6bc <__ieee754_asin+0x33c>
 800a506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a50e:	f7f6 f949 	bl	80007a4 <__aeabi_ddiv>
 800a512:	4652      	mov	r2, sl
 800a514:	465b      	mov	r3, fp
 800a516:	f7f6 f81b 	bl	8000550 <__aeabi_dmul>
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	f7f5 fe61 	bl	80001e4 <__adddf3>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	f7f5 fe5d 	bl	80001e4 <__adddf3>
 800a52a:	a347      	add	r3, pc, #284	@ (adr r3, 800a648 <__ieee754_asin+0x2c8>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 fe56 	bl	80001e0 <__aeabi_dsub>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	a141      	add	r1, pc, #260	@ (adr r1, 800a640 <__ieee754_asin+0x2c0>)
 800a53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a53e:	f7f5 fe4f 	bl	80001e0 <__aeabi_dsub>
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfdc      	itt	le
 800a548:	4602      	movle	r2, r0
 800a54a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	bfdc      	itt	le
 800a554:	4614      	movle	r4, r2
 800a556:	461d      	movle	r5, r3
 800a558:	e746      	b.n	800a3e8 <__ieee754_asin+0x68>
 800a55a:	4622      	mov	r2, r4
 800a55c:	462b      	mov	r3, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f5 fff5 	bl	8000550 <__aeabi_dmul>
 800a566:	a33c      	add	r3, pc, #240	@ (adr r3, 800a658 <__ieee754_asin+0x2d8>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	f7f5 ffee 	bl	8000550 <__aeabi_dmul>
 800a574:	a33a      	add	r3, pc, #232	@ (adr r3, 800a660 <__ieee754_asin+0x2e0>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f7f5 fe33 	bl	80001e4 <__adddf3>
 800a57e:	4632      	mov	r2, r6
 800a580:	463b      	mov	r3, r7
 800a582:	f7f5 ffe5 	bl	8000550 <__aeabi_dmul>
 800a586:	a338      	add	r3, pc, #224	@ (adr r3, 800a668 <__ieee754_asin+0x2e8>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fe28 	bl	80001e0 <__aeabi_dsub>
 800a590:	4632      	mov	r2, r6
 800a592:	463b      	mov	r3, r7
 800a594:	f7f5 ffdc 	bl	8000550 <__aeabi_dmul>
 800a598:	a335      	add	r3, pc, #212	@ (adr r3, 800a670 <__ieee754_asin+0x2f0>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fe21 	bl	80001e4 <__adddf3>
 800a5a2:	4632      	mov	r2, r6
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	f7f5 ffd3 	bl	8000550 <__aeabi_dmul>
 800a5aa:	a333      	add	r3, pc, #204	@ (adr r3, 800a678 <__ieee754_asin+0x2f8>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 fe16 	bl	80001e0 <__aeabi_dsub>
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	f7f5 ffca 	bl	8000550 <__aeabi_dmul>
 800a5bc:	a330      	add	r3, pc, #192	@ (adr r3, 800a680 <__ieee754_asin+0x300>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe0f 	bl	80001e4 <__adddf3>
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	f7f5 ffc1 	bl	8000550 <__aeabi_dmul>
 800a5ce:	a32e      	add	r3, pc, #184	@ (adr r3, 800a688 <__ieee754_asin+0x308>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f5 ffb8 	bl	8000550 <__aeabi_dmul>
 800a5e0:	a32b      	add	r3, pc, #172	@ (adr r3, 800a690 <__ieee754_asin+0x310>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 fdfb 	bl	80001e0 <__aeabi_dsub>
 800a5ea:	4632      	mov	r2, r6
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	f7f5 ffaf 	bl	8000550 <__aeabi_dmul>
 800a5f2:	a329      	add	r3, pc, #164	@ (adr r3, 800a698 <__ieee754_asin+0x318>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f5 fdf4 	bl	80001e4 <__adddf3>
 800a5fc:	4632      	mov	r2, r6
 800a5fe:	463b      	mov	r3, r7
 800a600:	f7f5 ffa6 	bl	8000550 <__aeabi_dmul>
 800a604:	a326      	add	r3, pc, #152	@ (adr r3, 800a6a0 <__ieee754_asin+0x320>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f5 fde9 	bl	80001e0 <__aeabi_dsub>
 800a60e:	4632      	mov	r2, r6
 800a610:	463b      	mov	r3, r7
 800a612:	f7f5 ff9d 	bl	8000550 <__aeabi_dmul>
 800a616:	4b26      	ldr	r3, [pc, #152]	@ (800a6b0 <__ieee754_asin+0x330>)
 800a618:	2200      	movs	r2, #0
 800a61a:	f7f5 fde3 	bl	80001e4 <__adddf3>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f6 f8bd 	bl	80007a4 <__aeabi_ddiv>
 800a62a:	4622      	mov	r2, r4
 800a62c:	462b      	mov	r3, r5
 800a62e:	f7f5 ff8f 	bl	8000550 <__aeabi_dmul>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	e6c6      	b.n	800a3ca <__ieee754_asin+0x4a>
 800a63c:	f3af 8000 	nop.w
 800a640:	54442d18 	.word	0x54442d18
 800a644:	3ff921fb 	.word	0x3ff921fb
 800a648:	33145c07 	.word	0x33145c07
 800a64c:	3c91a626 	.word	0x3c91a626
 800a650:	8800759c 	.word	0x8800759c
 800a654:	7e37e43c 	.word	0x7e37e43c
 800a658:	0dfdf709 	.word	0x0dfdf709
 800a65c:	3f023de1 	.word	0x3f023de1
 800a660:	7501b288 	.word	0x7501b288
 800a664:	3f49efe0 	.word	0x3f49efe0
 800a668:	b5688f3b 	.word	0xb5688f3b
 800a66c:	3fa48228 	.word	0x3fa48228
 800a670:	0e884455 	.word	0x0e884455
 800a674:	3fc9c155 	.word	0x3fc9c155
 800a678:	03eb6f7d 	.word	0x03eb6f7d
 800a67c:	3fd4d612 	.word	0x3fd4d612
 800a680:	55555555 	.word	0x55555555
 800a684:	3fc55555 	.word	0x3fc55555
 800a688:	b12e9282 	.word	0xb12e9282
 800a68c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a690:	1b8d0159 	.word	0x1b8d0159
 800a694:	3fe6066c 	.word	0x3fe6066c
 800a698:	9c598ac8 	.word	0x9c598ac8
 800a69c:	40002ae5 	.word	0x40002ae5
 800a6a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a6a4:	40033a27 	.word	0x40033a27
 800a6a8:	3fefffff 	.word	0x3fefffff
 800a6ac:	3fdfffff 	.word	0x3fdfffff
 800a6b0:	3ff00000 	.word	0x3ff00000
 800a6b4:	3fe00000 	.word	0x3fe00000
 800a6b8:	3fef3332 	.word	0x3fef3332
 800a6bc:	4652      	mov	r2, sl
 800a6be:	465b      	mov	r3, fp
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	4659      	mov	r1, fp
 800a6c4:	f7f5 fd8e 	bl	80001e4 <__adddf3>
 800a6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d4:	f7f6 f866 	bl	80007a4 <__aeabi_ddiv>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f7f5 ff36 	bl	8000550 <__aeabi_dmul>
 800a6e4:	f04f 0800 	mov.w	r8, #0
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	460f      	mov	r7, r1
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	465b      	mov	r3, fp
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4659      	mov	r1, fp
 800a6f4:	f7f5 ff2c 	bl	8000550 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 fd6e 	bl	80001e0 <__aeabi_dsub>
 800a704:	4642      	mov	r2, r8
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	465b      	mov	r3, fp
 800a70c:	4650      	mov	r0, sl
 800a70e:	4659      	mov	r1, fp
 800a710:	f7f5 fd68 	bl	80001e4 <__adddf3>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4620      	mov	r0, r4
 800a71a:	4629      	mov	r1, r5
 800a71c:	f7f6 f842 	bl	80007a4 <__aeabi_ddiv>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	f7f5 fd5e 	bl	80001e4 <__adddf3>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	a112      	add	r1, pc, #72	@ (adr r1, 800a778 <__ieee754_asin+0x3f8>)
 800a72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a732:	f7f5 fd55 	bl	80001e0 <__aeabi_dsub>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f5 fd4f 	bl	80001e0 <__aeabi_dsub>
 800a742:	4642      	mov	r2, r8
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	465b      	mov	r3, fp
 800a74a:	4640      	mov	r0, r8
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7f5 fd49 	bl	80001e4 <__adddf3>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	a10a      	add	r1, pc, #40	@ (adr r1, 800a780 <__ieee754_asin+0x400>)
 800a758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a75c:	f7f5 fd40 	bl	80001e0 <__aeabi_dsub>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4620      	mov	r0, r4
 800a766:	4629      	mov	r1, r5
 800a768:	f7f5 fd3a 	bl	80001e0 <__aeabi_dsub>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	a103      	add	r1, pc, #12	@ (adr r1, 800a780 <__ieee754_asin+0x400>)
 800a772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a776:	e6e2      	b.n	800a53e <__ieee754_asin+0x1be>
 800a778:	33145c07 	.word	0x33145c07
 800a77c:	3c91a626 	.word	0x3c91a626
 800a780:	54442d18 	.word	0x54442d18
 800a784:	3fe921fb 	.word	0x3fe921fb

0800a788 <__ieee754_pow>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	b091      	sub	sp, #68	@ 0x44
 800a78e:	ed8d 1b00 	vstr	d1, [sp]
 800a792:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a796:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a79a:	ea5a 0001 	orrs.w	r0, sl, r1
 800a79e:	ec57 6b10 	vmov	r6, r7, d0
 800a7a2:	d113      	bne.n	800a7cc <__ieee754_pow+0x44>
 800a7a4:	19b3      	adds	r3, r6, r6
 800a7a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a7aa:	4152      	adcs	r2, r2
 800a7ac:	4298      	cmp	r0, r3
 800a7ae:	4b98      	ldr	r3, [pc, #608]	@ (800aa10 <__ieee754_pow+0x288>)
 800a7b0:	4193      	sbcs	r3, r2
 800a7b2:	f080 84ea 	bcs.w	800b18a <__ieee754_pow+0xa02>
 800a7b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 fd11 	bl	80001e4 <__adddf3>
 800a7c2:	ec41 0b10 	vmov	d0, r0, r1
 800a7c6:	b011      	add	sp, #68	@ 0x44
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	4a91      	ldr	r2, [pc, #580]	@ (800aa14 <__ieee754_pow+0x28c>)
 800a7ce:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a7d2:	4590      	cmp	r8, r2
 800a7d4:	463d      	mov	r5, r7
 800a7d6:	4633      	mov	r3, r6
 800a7d8:	d806      	bhi.n	800a7e8 <__ieee754_pow+0x60>
 800a7da:	d101      	bne.n	800a7e0 <__ieee754_pow+0x58>
 800a7dc:	2e00      	cmp	r6, #0
 800a7de:	d1ea      	bne.n	800a7b6 <__ieee754_pow+0x2e>
 800a7e0:	4592      	cmp	sl, r2
 800a7e2:	d801      	bhi.n	800a7e8 <__ieee754_pow+0x60>
 800a7e4:	d10e      	bne.n	800a804 <__ieee754_pow+0x7c>
 800a7e6:	b169      	cbz	r1, 800a804 <__ieee754_pow+0x7c>
 800a7e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a7ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a7f0:	431d      	orrs	r5, r3
 800a7f2:	d1e0      	bne.n	800a7b6 <__ieee754_pow+0x2e>
 800a7f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7f8:	18db      	adds	r3, r3, r3
 800a7fa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a7fe:	4152      	adcs	r2, r2
 800a800:	429d      	cmp	r5, r3
 800a802:	e7d4      	b.n	800a7ae <__ieee754_pow+0x26>
 800a804:	2d00      	cmp	r5, #0
 800a806:	46c3      	mov	fp, r8
 800a808:	da3a      	bge.n	800a880 <__ieee754_pow+0xf8>
 800a80a:	4a83      	ldr	r2, [pc, #524]	@ (800aa18 <__ieee754_pow+0x290>)
 800a80c:	4592      	cmp	sl, r2
 800a80e:	d84d      	bhi.n	800a8ac <__ieee754_pow+0x124>
 800a810:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a814:	4592      	cmp	sl, r2
 800a816:	f240 84c7 	bls.w	800b1a8 <__ieee754_pow+0xa20>
 800a81a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a81e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a822:	2a14      	cmp	r2, #20
 800a824:	dd0f      	ble.n	800a846 <__ieee754_pow+0xbe>
 800a826:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a82a:	fa21 f402 	lsr.w	r4, r1, r2
 800a82e:	fa04 f202 	lsl.w	r2, r4, r2
 800a832:	428a      	cmp	r2, r1
 800a834:	f040 84b8 	bne.w	800b1a8 <__ieee754_pow+0xa20>
 800a838:	f004 0401 	and.w	r4, r4, #1
 800a83c:	f1c4 0402 	rsb	r4, r4, #2
 800a840:	2900      	cmp	r1, #0
 800a842:	d158      	bne.n	800a8f6 <__ieee754_pow+0x16e>
 800a844:	e00e      	b.n	800a864 <__ieee754_pow+0xdc>
 800a846:	2900      	cmp	r1, #0
 800a848:	d154      	bne.n	800a8f4 <__ieee754_pow+0x16c>
 800a84a:	f1c2 0214 	rsb	r2, r2, #20
 800a84e:	fa4a f402 	asr.w	r4, sl, r2
 800a852:	fa04 f202 	lsl.w	r2, r4, r2
 800a856:	4552      	cmp	r2, sl
 800a858:	f040 84a3 	bne.w	800b1a2 <__ieee754_pow+0xa1a>
 800a85c:	f004 0401 	and.w	r4, r4, #1
 800a860:	f1c4 0402 	rsb	r4, r4, #2
 800a864:	4a6d      	ldr	r2, [pc, #436]	@ (800aa1c <__ieee754_pow+0x294>)
 800a866:	4592      	cmp	sl, r2
 800a868:	d12e      	bne.n	800a8c8 <__ieee754_pow+0x140>
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	f280 8494 	bge.w	800b19a <__ieee754_pow+0xa12>
 800a872:	496a      	ldr	r1, [pc, #424]	@ (800aa1c <__ieee754_pow+0x294>)
 800a874:	4632      	mov	r2, r6
 800a876:	463b      	mov	r3, r7
 800a878:	2000      	movs	r0, #0
 800a87a:	f7f5 ff93 	bl	80007a4 <__aeabi_ddiv>
 800a87e:	e7a0      	b.n	800a7c2 <__ieee754_pow+0x3a>
 800a880:	2400      	movs	r4, #0
 800a882:	bbc1      	cbnz	r1, 800a8f6 <__ieee754_pow+0x16e>
 800a884:	4a63      	ldr	r2, [pc, #396]	@ (800aa14 <__ieee754_pow+0x28c>)
 800a886:	4592      	cmp	sl, r2
 800a888:	d1ec      	bne.n	800a864 <__ieee754_pow+0xdc>
 800a88a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a88e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a892:	431a      	orrs	r2, r3
 800a894:	f000 8479 	beq.w	800b18a <__ieee754_pow+0xa02>
 800a898:	4b61      	ldr	r3, [pc, #388]	@ (800aa20 <__ieee754_pow+0x298>)
 800a89a:	4598      	cmp	r8, r3
 800a89c:	d908      	bls.n	800a8b0 <__ieee754_pow+0x128>
 800a89e:	f1b9 0f00 	cmp.w	r9, #0
 800a8a2:	f2c0 8476 	blt.w	800b192 <__ieee754_pow+0xa0a>
 800a8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8aa:	e78a      	b.n	800a7c2 <__ieee754_pow+0x3a>
 800a8ac:	2402      	movs	r4, #2
 800a8ae:	e7e8      	b.n	800a882 <__ieee754_pow+0xfa>
 800a8b0:	f1b9 0f00 	cmp.w	r9, #0
 800a8b4:	f04f 0000 	mov.w	r0, #0
 800a8b8:	f04f 0100 	mov.w	r1, #0
 800a8bc:	da81      	bge.n	800a7c2 <__ieee754_pow+0x3a>
 800a8be:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a8c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a8c6:	e77c      	b.n	800a7c2 <__ieee754_pow+0x3a>
 800a8c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a8cc:	d106      	bne.n	800a8dc <__ieee754_pow+0x154>
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f5 fe3b 	bl	8000550 <__aeabi_dmul>
 800a8da:	e772      	b.n	800a7c2 <__ieee754_pow+0x3a>
 800a8dc:	4a51      	ldr	r2, [pc, #324]	@ (800aa24 <__ieee754_pow+0x29c>)
 800a8de:	4591      	cmp	r9, r2
 800a8e0:	d109      	bne.n	800a8f6 <__ieee754_pow+0x16e>
 800a8e2:	2d00      	cmp	r5, #0
 800a8e4:	db07      	blt.n	800a8f6 <__ieee754_pow+0x16e>
 800a8e6:	ec47 6b10 	vmov	d0, r6, r7
 800a8ea:	b011      	add	sp, #68	@ 0x44
 800a8ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	f7ff b88a 	b.w	8009a08 <__ieee754_sqrt>
 800a8f4:	2400      	movs	r4, #0
 800a8f6:	ec47 6b10 	vmov	d0, r6, r7
 800a8fa:	9302      	str	r3, [sp, #8]
 800a8fc:	f7ff f814 	bl	8009928 <fabs>
 800a900:	9b02      	ldr	r3, [sp, #8]
 800a902:	ec51 0b10 	vmov	r0, r1, d0
 800a906:	bb53      	cbnz	r3, 800a95e <__ieee754_pow+0x1d6>
 800a908:	4b44      	ldr	r3, [pc, #272]	@ (800aa1c <__ieee754_pow+0x294>)
 800a90a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a90e:	429a      	cmp	r2, r3
 800a910:	d002      	beq.n	800a918 <__ieee754_pow+0x190>
 800a912:	f1b8 0f00 	cmp.w	r8, #0
 800a916:	d122      	bne.n	800a95e <__ieee754_pow+0x1d6>
 800a918:	f1b9 0f00 	cmp.w	r9, #0
 800a91c:	da05      	bge.n	800a92a <__ieee754_pow+0x1a2>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	2000      	movs	r0, #0
 800a924:	493d      	ldr	r1, [pc, #244]	@ (800aa1c <__ieee754_pow+0x294>)
 800a926:	f7f5 ff3d 	bl	80007a4 <__aeabi_ddiv>
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	f6bf af49 	bge.w	800a7c2 <__ieee754_pow+0x3a>
 800a930:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a934:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a938:	ea58 0804 	orrs.w	r8, r8, r4
 800a93c:	d108      	bne.n	800a950 <__ieee754_pow+0x1c8>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4610      	mov	r0, r2
 800a944:	4619      	mov	r1, r3
 800a946:	f7f5 fc4b 	bl	80001e0 <__aeabi_dsub>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	e794      	b.n	800a87a <__ieee754_pow+0xf2>
 800a950:	2c01      	cmp	r4, #1
 800a952:	f47f af36 	bne.w	800a7c2 <__ieee754_pow+0x3a>
 800a956:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a95a:	4619      	mov	r1, r3
 800a95c:	e731      	b.n	800a7c2 <__ieee754_pow+0x3a>
 800a95e:	0feb      	lsrs	r3, r5, #31
 800a960:	3b01      	subs	r3, #1
 800a962:	ea53 0204 	orrs.w	r2, r3, r4
 800a966:	d102      	bne.n	800a96e <__ieee754_pow+0x1e6>
 800a968:	4632      	mov	r2, r6
 800a96a:	463b      	mov	r3, r7
 800a96c:	e7e9      	b.n	800a942 <__ieee754_pow+0x1ba>
 800a96e:	3c01      	subs	r4, #1
 800a970:	431c      	orrs	r4, r3
 800a972:	d016      	beq.n	800a9a2 <__ieee754_pow+0x21a>
 800a974:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800aa00 <__ieee754_pow+0x278>
 800a978:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a97c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a980:	f240 8112 	bls.w	800aba8 <__ieee754_pow+0x420>
 800a984:	4b28      	ldr	r3, [pc, #160]	@ (800aa28 <__ieee754_pow+0x2a0>)
 800a986:	459a      	cmp	sl, r3
 800a988:	4b25      	ldr	r3, [pc, #148]	@ (800aa20 <__ieee754_pow+0x298>)
 800a98a:	d916      	bls.n	800a9ba <__ieee754_pow+0x232>
 800a98c:	4598      	cmp	r8, r3
 800a98e:	d80b      	bhi.n	800a9a8 <__ieee754_pow+0x220>
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	da0b      	bge.n	800a9ae <__ieee754_pow+0x226>
 800a996:	2000      	movs	r0, #0
 800a998:	b011      	add	sp, #68	@ 0x44
 800a99a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99e:	f000 bee7 	b.w	800b770 <__math_oflow>
 800a9a2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800aa08 <__ieee754_pow+0x280>
 800a9a6:	e7e7      	b.n	800a978 <__ieee754_pow+0x1f0>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	dcf3      	bgt.n	800a996 <__ieee754_pow+0x20e>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	b011      	add	sp, #68	@ 0x44
 800a9b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b6:	f000 bed3 	b.w	800b760 <__math_uflow>
 800a9ba:	4598      	cmp	r8, r3
 800a9bc:	d20c      	bcs.n	800a9d8 <__ieee754_pow+0x250>
 800a9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f7f6 f835 	bl	8000a34 <__aeabi_dcmplt>
 800a9ca:	3800      	subs	r0, #0
 800a9cc:	bf18      	it	ne
 800a9ce:	2001      	movne	r0, #1
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	daec      	bge.n	800a9b0 <__ieee754_pow+0x228>
 800a9d6:	e7df      	b.n	800a998 <__ieee754_pow+0x210>
 800a9d8:	4b10      	ldr	r3, [pc, #64]	@ (800aa1c <__ieee754_pow+0x294>)
 800a9da:	4598      	cmp	r8, r3
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	d924      	bls.n	800aa2c <__ieee754_pow+0x2a4>
 800a9e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f7f6 f824 	bl	8000a34 <__aeabi_dcmplt>
 800a9ec:	3800      	subs	r0, #0
 800a9ee:	bf18      	it	ne
 800a9f0:	2001      	movne	r0, #1
 800a9f2:	f1b9 0f00 	cmp.w	r9, #0
 800a9f6:	dccf      	bgt.n	800a998 <__ieee754_pow+0x210>
 800a9f8:	e7da      	b.n	800a9b0 <__ieee754_pow+0x228>
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w
 800aa00:	00000000 	.word	0x00000000
 800aa04:	3ff00000 	.word	0x3ff00000
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	bff00000 	.word	0xbff00000
 800aa10:	fff00000 	.word	0xfff00000
 800aa14:	7ff00000 	.word	0x7ff00000
 800aa18:	433fffff 	.word	0x433fffff
 800aa1c:	3ff00000 	.word	0x3ff00000
 800aa20:	3fefffff 	.word	0x3fefffff
 800aa24:	3fe00000 	.word	0x3fe00000
 800aa28:	43f00000 	.word	0x43f00000
 800aa2c:	4b5a      	ldr	r3, [pc, #360]	@ (800ab98 <__ieee754_pow+0x410>)
 800aa2e:	f7f5 fbd7 	bl	80001e0 <__aeabi_dsub>
 800aa32:	a351      	add	r3, pc, #324	@ (adr r3, 800ab78 <__ieee754_pow+0x3f0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	4604      	mov	r4, r0
 800aa3a:	460d      	mov	r5, r1
 800aa3c:	f7f5 fd88 	bl	8000550 <__aeabi_dmul>
 800aa40:	a34f      	add	r3, pc, #316	@ (adr r3, 800ab80 <__ieee754_pow+0x3f8>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	4606      	mov	r6, r0
 800aa48:	460f      	mov	r7, r1
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	f7f5 fd7f 	bl	8000550 <__aeabi_dmul>
 800aa52:	4b52      	ldr	r3, [pc, #328]	@ (800ab9c <__ieee754_pow+0x414>)
 800aa54:	4682      	mov	sl, r0
 800aa56:	468b      	mov	fp, r1
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 fd77 	bl	8000550 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	a148      	add	r1, pc, #288	@ (adr r1, 800ab88 <__ieee754_pow+0x400>)
 800aa68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6c:	f7f5 fbb8 	bl	80001e0 <__aeabi_dsub>
 800aa70:	4622      	mov	r2, r4
 800aa72:	462b      	mov	r3, r5
 800aa74:	f7f5 fd6c 	bl	8000550 <__aeabi_dmul>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	4948      	ldr	r1, [pc, #288]	@ (800aba0 <__ieee754_pow+0x418>)
 800aa80:	f7f5 fbae 	bl	80001e0 <__aeabi_dsub>
 800aa84:	4622      	mov	r2, r4
 800aa86:	4680      	mov	r8, r0
 800aa88:	4689      	mov	r9, r1
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fd5e 	bl	8000550 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fd58 	bl	8000550 <__aeabi_dmul>
 800aaa0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ab90 <__ieee754_pow+0x408>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fd53 	bl	8000550 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4650      	mov	r0, sl
 800aab0:	4659      	mov	r1, fp
 800aab2:	f7f5 fb95 	bl	80001e0 <__aeabi_dsub>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4680      	mov	r8, r0
 800aabc:	4689      	mov	r9, r1
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	f7f5 fb8f 	bl	80001e4 <__adddf3>
 800aac6:	2400      	movs	r4, #0
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	4620      	mov	r0, r4
 800aace:	460d      	mov	r5, r1
 800aad0:	f7f5 fb86 	bl	80001e0 <__aeabi_dsub>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4640      	mov	r0, r8
 800aada:	4649      	mov	r1, r9
 800aadc:	f7f5 fb80 	bl	80001e0 <__aeabi_dsub>
 800aae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aae8:	2300      	movs	r3, #0
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafc:	f7f5 fb70 	bl	80001e0 <__aeabi_dsub>
 800ab00:	4622      	mov	r2, r4
 800ab02:	462b      	mov	r3, r5
 800ab04:	f7f5 fd24 	bl	8000550 <__aeabi_dmul>
 800ab08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	4689      	mov	r9, r1
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 fd1c 	bl	8000550 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f5 fb60 	bl	80001e4 <__adddf3>
 800ab24:	4652      	mov	r2, sl
 800ab26:	465b      	mov	r3, fp
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7f5 fd0e 	bl	8000550 <__aeabi_dmul>
 800ab34:	460b      	mov	r3, r1
 800ab36:	4602      	mov	r2, r0
 800ab38:	4680      	mov	r8, r0
 800ab3a:	4689      	mov	r9, r1
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	4639      	mov	r1, r7
 800ab40:	f7f5 fb50 	bl	80001e4 <__adddf3>
 800ab44:	4b17      	ldr	r3, [pc, #92]	@ (800aba4 <__ieee754_pow+0x41c>)
 800ab46:	4299      	cmp	r1, r3
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	468a      	mov	sl, r1
 800ab4e:	468b      	mov	fp, r1
 800ab50:	f340 82ef 	ble.w	800b132 <__ieee754_pow+0x9aa>
 800ab54:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ab58:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ab5c:	4303      	orrs	r3, r0
 800ab5e:	f000 81e8 	beq.w	800af32 <__ieee754_pow+0x7aa>
 800ab62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f7f5 ff63 	bl	8000a34 <__aeabi_dcmplt>
 800ab6e:	3800      	subs	r0, #0
 800ab70:	bf18      	it	ne
 800ab72:	2001      	movne	r0, #1
 800ab74:	e710      	b.n	800a998 <__ieee754_pow+0x210>
 800ab76:	bf00      	nop
 800ab78:	60000000 	.word	0x60000000
 800ab7c:	3ff71547 	.word	0x3ff71547
 800ab80:	f85ddf44 	.word	0xf85ddf44
 800ab84:	3e54ae0b 	.word	0x3e54ae0b
 800ab88:	55555555 	.word	0x55555555
 800ab8c:	3fd55555 	.word	0x3fd55555
 800ab90:	652b82fe 	.word	0x652b82fe
 800ab94:	3ff71547 	.word	0x3ff71547
 800ab98:	3ff00000 	.word	0x3ff00000
 800ab9c:	3fd00000 	.word	0x3fd00000
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	408fffff 	.word	0x408fffff
 800aba8:	4bd5      	ldr	r3, [pc, #852]	@ (800af00 <__ieee754_pow+0x778>)
 800abaa:	402b      	ands	r3, r5
 800abac:	2200      	movs	r2, #0
 800abae:	b92b      	cbnz	r3, 800abbc <__ieee754_pow+0x434>
 800abb0:	4bd4      	ldr	r3, [pc, #848]	@ (800af04 <__ieee754_pow+0x77c>)
 800abb2:	f7f5 fccd 	bl	8000550 <__aeabi_dmul>
 800abb6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800abba:	468b      	mov	fp, r1
 800abbc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800abc0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800abc4:	4413      	add	r3, r2
 800abc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc8:	4bcf      	ldr	r3, [pc, #828]	@ (800af08 <__ieee754_pow+0x780>)
 800abca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800abce:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800abd2:	459b      	cmp	fp, r3
 800abd4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800abd8:	dd08      	ble.n	800abec <__ieee754_pow+0x464>
 800abda:	4bcc      	ldr	r3, [pc, #816]	@ (800af0c <__ieee754_pow+0x784>)
 800abdc:	459b      	cmp	fp, r3
 800abde:	f340 81a5 	ble.w	800af2c <__ieee754_pow+0x7a4>
 800abe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abe4:	3301      	adds	r3, #1
 800abe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abe8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800abec:	f04f 0a00 	mov.w	sl, #0
 800abf0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800abf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf6:	4bc6      	ldr	r3, [pc, #792]	@ (800af10 <__ieee754_pow+0x788>)
 800abf8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abfc:	ed93 7b00 	vldr	d7, [r3]
 800ac00:	4629      	mov	r1, r5
 800ac02:	ec53 2b17 	vmov	r2, r3, d7
 800ac06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac0e:	f7f5 fae7 	bl	80001e0 <__aeabi_dsub>
 800ac12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac1e:	f7f5 fae1 	bl	80001e4 <__adddf3>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	2000      	movs	r0, #0
 800ac28:	49ba      	ldr	r1, [pc, #744]	@ (800af14 <__ieee754_pow+0x78c>)
 800ac2a:	f7f5 fdbb 	bl	80007a4 <__aeabi_ddiv>
 800ac2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fc89 	bl	8000550 <__aeabi_dmul>
 800ac3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac42:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ac46:	106d      	asrs	r5, r5, #1
 800ac48:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ac4c:	f04f 0b00 	mov.w	fp, #0
 800ac50:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ac54:	4661      	mov	r1, ip
 800ac56:	2200      	movs	r2, #0
 800ac58:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	46e1      	mov	r9, ip
 800ac60:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ac64:	4614      	mov	r4, r2
 800ac66:	461d      	mov	r5, r3
 800ac68:	f7f5 fc72 	bl	8000550 <__aeabi_dmul>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fab4 	bl	80001e0 <__aeabi_dsub>
 800ac78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	460f      	mov	r7, r1
 800ac80:	4620      	mov	r0, r4
 800ac82:	4629      	mov	r1, r5
 800ac84:	f7f5 faac 	bl	80001e0 <__aeabi_dsub>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac90:	f7f5 faa6 	bl	80001e0 <__aeabi_dsub>
 800ac94:	465a      	mov	r2, fp
 800ac96:	464b      	mov	r3, r9
 800ac98:	f7f5 fc5a 	bl	8000550 <__aeabi_dmul>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fa9c 	bl	80001e0 <__aeabi_dsub>
 800aca8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800acac:	f7f5 fc50 	bl	8000550 <__aeabi_dmul>
 800acb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acb8:	4610      	mov	r0, r2
 800acba:	4619      	mov	r1, r3
 800acbc:	f7f5 fc48 	bl	8000550 <__aeabi_dmul>
 800acc0:	a37d      	add	r3, pc, #500	@ (adr r3, 800aeb8 <__ieee754_pow+0x730>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	4604      	mov	r4, r0
 800acc8:	460d      	mov	r5, r1
 800acca:	f7f5 fc41 	bl	8000550 <__aeabi_dmul>
 800acce:	a37c      	add	r3, pc, #496	@ (adr r3, 800aec0 <__ieee754_pow+0x738>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f7f5 fa86 	bl	80001e4 <__adddf3>
 800acd8:	4622      	mov	r2, r4
 800acda:	462b      	mov	r3, r5
 800acdc:	f7f5 fc38 	bl	8000550 <__aeabi_dmul>
 800ace0:	a379      	add	r3, pc, #484	@ (adr r3, 800aec8 <__ieee754_pow+0x740>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 fa7d 	bl	80001e4 <__adddf3>
 800acea:	4622      	mov	r2, r4
 800acec:	462b      	mov	r3, r5
 800acee:	f7f5 fc2f 	bl	8000550 <__aeabi_dmul>
 800acf2:	a377      	add	r3, pc, #476	@ (adr r3, 800aed0 <__ieee754_pow+0x748>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fa74 	bl	80001e4 <__adddf3>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fc26 	bl	8000550 <__aeabi_dmul>
 800ad04:	a374      	add	r3, pc, #464	@ (adr r3, 800aed8 <__ieee754_pow+0x750>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fa6b 	bl	80001e4 <__adddf3>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	462b      	mov	r3, r5
 800ad12:	f7f5 fc1d 	bl	8000550 <__aeabi_dmul>
 800ad16:	a372      	add	r3, pc, #456	@ (adr r3, 800aee0 <__ieee754_pow+0x758>)
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	f7f5 fa62 	bl	80001e4 <__adddf3>
 800ad20:	4622      	mov	r2, r4
 800ad22:	4606      	mov	r6, r0
 800ad24:	460f      	mov	r7, r1
 800ad26:	462b      	mov	r3, r5
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 fc10 	bl	8000550 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	f7f5 fc0a 	bl	8000550 <__aeabi_dmul>
 800ad3c:	465a      	mov	r2, fp
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	464b      	mov	r3, r9
 800ad44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad48:	f7f5 fa4c 	bl	80001e4 <__adddf3>
 800ad4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad50:	f7f5 fbfe 	bl	8000550 <__aeabi_dmul>
 800ad54:	4622      	mov	r2, r4
 800ad56:	462b      	mov	r3, r5
 800ad58:	f7f5 fa44 	bl	80001e4 <__adddf3>
 800ad5c:	465a      	mov	r2, fp
 800ad5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad62:	464b      	mov	r3, r9
 800ad64:	4658      	mov	r0, fp
 800ad66:	4649      	mov	r1, r9
 800ad68:	f7f5 fbf2 	bl	8000550 <__aeabi_dmul>
 800ad6c:	4b6a      	ldr	r3, [pc, #424]	@ (800af18 <__ieee754_pow+0x790>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4606      	mov	r6, r0
 800ad72:	460f      	mov	r7, r1
 800ad74:	f7f5 fa36 	bl	80001e4 <__adddf3>
 800ad78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad7c:	f7f5 fa32 	bl	80001e4 <__adddf3>
 800ad80:	46d8      	mov	r8, fp
 800ad82:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ad86:	460d      	mov	r5, r1
 800ad88:	465a      	mov	r2, fp
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ad94:	f7f5 fbdc 	bl	8000550 <__aeabi_dmul>
 800ad98:	465c      	mov	r4, fp
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	4689      	mov	r9, r1
 800ad9e:	4b5e      	ldr	r3, [pc, #376]	@ (800af18 <__ieee754_pow+0x790>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	4620      	mov	r0, r4
 800ada4:	4629      	mov	r1, r5
 800ada6:	f7f5 fa1b 	bl	80001e0 <__aeabi_dsub>
 800adaa:	4632      	mov	r2, r6
 800adac:	463b      	mov	r3, r7
 800adae:	f7f5 fa17 	bl	80001e0 <__aeabi_dsub>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adba:	f7f5 fa11 	bl	80001e0 <__aeabi_dsub>
 800adbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc2:	f7f5 fbc5 	bl	8000550 <__aeabi_dmul>
 800adc6:	4622      	mov	r2, r4
 800adc8:	4606      	mov	r6, r0
 800adca:	460f      	mov	r7, r1
 800adcc:	462b      	mov	r3, r5
 800adce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800add2:	f7f5 fbbd 	bl	8000550 <__aeabi_dmul>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	4630      	mov	r0, r6
 800addc:	4639      	mov	r1, r7
 800adde:	f7f5 fa01 	bl	80001e4 <__adddf3>
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	4640      	mov	r0, r8
 800adec:	4649      	mov	r1, r9
 800adee:	f7f5 f9f9 	bl	80001e4 <__adddf3>
 800adf2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800adf6:	a33c      	add	r3, pc, #240	@ (adr r3, 800aee8 <__ieee754_pow+0x760>)
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	4658      	mov	r0, fp
 800adfe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ae02:	460d      	mov	r5, r1
 800ae04:	f7f5 fba4 	bl	8000550 <__aeabi_dmul>
 800ae08:	465c      	mov	r4, fp
 800ae0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae0e:	4642      	mov	r2, r8
 800ae10:	464b      	mov	r3, r9
 800ae12:	4620      	mov	r0, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 f9e3 	bl	80001e0 <__aeabi_dsub>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	f7f5 f9dd 	bl	80001e0 <__aeabi_dsub>
 800ae26:	a332      	add	r3, pc, #200	@ (adr r3, 800aef0 <__ieee754_pow+0x768>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f7f5 fb90 	bl	8000550 <__aeabi_dmul>
 800ae30:	a331      	add	r3, pc, #196	@ (adr r3, 800aef8 <__ieee754_pow+0x770>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	4606      	mov	r6, r0
 800ae38:	460f      	mov	r7, r1
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7f5 fb87 	bl	8000550 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 f9cb 	bl	80001e4 <__adddf3>
 800ae4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae50:	4b32      	ldr	r3, [pc, #200]	@ (800af1c <__ieee754_pow+0x794>)
 800ae52:	4413      	add	r3, r2
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 f9c4 	bl	80001e4 <__adddf3>
 800ae5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae62:	f7f5 fb0b 	bl	800047c <__aeabi_i2d>
 800ae66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae68:	4b2d      	ldr	r3, [pc, #180]	@ (800af20 <__ieee754_pow+0x798>)
 800ae6a:	4413      	add	r3, r2
 800ae6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae70:	4606      	mov	r6, r0
 800ae72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae76:	460f      	mov	r7, r1
 800ae78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae7c:	f7f5 f9b2 	bl	80001e4 <__adddf3>
 800ae80:	4642      	mov	r2, r8
 800ae82:	464b      	mov	r3, r9
 800ae84:	f7f5 f9ae 	bl	80001e4 <__adddf3>
 800ae88:	4632      	mov	r2, r6
 800ae8a:	463b      	mov	r3, r7
 800ae8c:	f7f5 f9aa 	bl	80001e4 <__adddf3>
 800ae90:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	4658      	mov	r0, fp
 800ae9a:	460d      	mov	r5, r1
 800ae9c:	f7f5 f9a0 	bl	80001e0 <__aeabi_dsub>
 800aea0:	4642      	mov	r2, r8
 800aea2:	464b      	mov	r3, r9
 800aea4:	f7f5 f99c 	bl	80001e0 <__aeabi_dsub>
 800aea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeac:	f7f5 f998 	bl	80001e0 <__aeabi_dsub>
 800aeb0:	465c      	mov	r4, fp
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	e036      	b.n	800af24 <__ieee754_pow+0x79c>
 800aeb6:	bf00      	nop
 800aeb8:	4a454eef 	.word	0x4a454eef
 800aebc:	3fca7e28 	.word	0x3fca7e28
 800aec0:	93c9db65 	.word	0x93c9db65
 800aec4:	3fcd864a 	.word	0x3fcd864a
 800aec8:	a91d4101 	.word	0xa91d4101
 800aecc:	3fd17460 	.word	0x3fd17460
 800aed0:	518f264d 	.word	0x518f264d
 800aed4:	3fd55555 	.word	0x3fd55555
 800aed8:	db6fabff 	.word	0xdb6fabff
 800aedc:	3fdb6db6 	.word	0x3fdb6db6
 800aee0:	33333303 	.word	0x33333303
 800aee4:	3fe33333 	.word	0x3fe33333
 800aee8:	e0000000 	.word	0xe0000000
 800aeec:	3feec709 	.word	0x3feec709
 800aef0:	dc3a03fd 	.word	0xdc3a03fd
 800aef4:	3feec709 	.word	0x3feec709
 800aef8:	145b01f5 	.word	0x145b01f5
 800aefc:	be3e2fe0 	.word	0xbe3e2fe0
 800af00:	7ff00000 	.word	0x7ff00000
 800af04:	43400000 	.word	0x43400000
 800af08:	0003988e 	.word	0x0003988e
 800af0c:	000bb679 	.word	0x000bb679
 800af10:	0800bfe8 	.word	0x0800bfe8
 800af14:	3ff00000 	.word	0x3ff00000
 800af18:	40080000 	.word	0x40080000
 800af1c:	0800bfc8 	.word	0x0800bfc8
 800af20:	0800bfd8 	.word	0x0800bfd8
 800af24:	460b      	mov	r3, r1
 800af26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af2a:	e5d7      	b.n	800aadc <__ieee754_pow+0x354>
 800af2c:	f04f 0a01 	mov.w	sl, #1
 800af30:	e65e      	b.n	800abf0 <__ieee754_pow+0x468>
 800af32:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b204 <__ieee754_pow+0xa7c>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 f952 	bl	80001e4 <__adddf3>
 800af40:	4642      	mov	r2, r8
 800af42:	e9cd 0100 	strd	r0, r1, [sp]
 800af46:	464b      	mov	r3, r9
 800af48:	4620      	mov	r0, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	f7f5 f948 	bl	80001e0 <__aeabi_dsub>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af58:	f7f5 fd8a 	bl	8000a70 <__aeabi_dcmpgt>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f47f ae00 	bne.w	800ab62 <__ieee754_pow+0x3da>
 800af62:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800af66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800af6a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800af6e:	fa43 fa0a 	asr.w	sl, r3, sl
 800af72:	44da      	add	sl, fp
 800af74:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800af78:	489d      	ldr	r0, [pc, #628]	@ (800b1f0 <__ieee754_pow+0xa68>)
 800af7a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800af7e:	4108      	asrs	r0, r1
 800af80:	ea00 030a 	and.w	r3, r0, sl
 800af84:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800af88:	f1c1 0114 	rsb	r1, r1, #20
 800af8c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800af90:	fa4a fa01 	asr.w	sl, sl, r1
 800af94:	f1bb 0f00 	cmp.w	fp, #0
 800af98:	4640      	mov	r0, r8
 800af9a:	4649      	mov	r1, r9
 800af9c:	f04f 0200 	mov.w	r2, #0
 800afa0:	bfb8      	it	lt
 800afa2:	f1ca 0a00 	rsblt	sl, sl, #0
 800afa6:	f7f5 f91b 	bl	80001e0 <__aeabi_dsub>
 800afaa:	4680      	mov	r8, r0
 800afac:	4689      	mov	r9, r1
 800afae:	4632      	mov	r2, r6
 800afb0:	463b      	mov	r3, r7
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 f915 	bl	80001e4 <__adddf3>
 800afba:	2400      	movs	r4, #0
 800afbc:	a37c      	add	r3, pc, #496	@ (adr r3, 800b1b0 <__ieee754_pow+0xa28>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	4620      	mov	r0, r4
 800afc4:	460d      	mov	r5, r1
 800afc6:	f7f5 fac3 	bl	8000550 <__aeabi_dmul>
 800afca:	4642      	mov	r2, r8
 800afcc:	e9cd 0100 	strd	r0, r1, [sp]
 800afd0:	464b      	mov	r3, r9
 800afd2:	4620      	mov	r0, r4
 800afd4:	4629      	mov	r1, r5
 800afd6:	f7f5 f903 	bl	80001e0 <__aeabi_dsub>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	f7f5 f8fd 	bl	80001e0 <__aeabi_dsub>
 800afe6:	a374      	add	r3, pc, #464	@ (adr r3, 800b1b8 <__ieee754_pow+0xa30>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 fab0 	bl	8000550 <__aeabi_dmul>
 800aff0:	a373      	add	r3, pc, #460	@ (adr r3, 800b1c0 <__ieee754_pow+0xa38>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	4680      	mov	r8, r0
 800aff8:	4689      	mov	r9, r1
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 faa7 	bl	8000550 <__aeabi_dmul>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 f8eb 	bl	80001e4 <__adddf3>
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b01a:	f7f5 f8e3 	bl	80001e4 <__adddf3>
 800b01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b022:	4680      	mov	r8, r0
 800b024:	4689      	mov	r9, r1
 800b026:	f7f5 f8db 	bl	80001e0 <__aeabi_dsub>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4620      	mov	r0, r4
 800b030:	4629      	mov	r1, r5
 800b032:	f7f5 f8d5 	bl	80001e0 <__aeabi_dsub>
 800b036:	4642      	mov	r2, r8
 800b038:	4606      	mov	r6, r0
 800b03a:	460f      	mov	r7, r1
 800b03c:	464b      	mov	r3, r9
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	f7f5 fa85 	bl	8000550 <__aeabi_dmul>
 800b046:	a360      	add	r3, pc, #384	@ (adr r3, 800b1c8 <__ieee754_pow+0xa40>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	4604      	mov	r4, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	f7f5 fa7e 	bl	8000550 <__aeabi_dmul>
 800b054:	a35e      	add	r3, pc, #376	@ (adr r3, 800b1d0 <__ieee754_pow+0xa48>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	f7f5 f8c1 	bl	80001e0 <__aeabi_dsub>
 800b05e:	4622      	mov	r2, r4
 800b060:	462b      	mov	r3, r5
 800b062:	f7f5 fa75 	bl	8000550 <__aeabi_dmul>
 800b066:	a35c      	add	r3, pc, #368	@ (adr r3, 800b1d8 <__ieee754_pow+0xa50>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 f8ba 	bl	80001e4 <__adddf3>
 800b070:	4622      	mov	r2, r4
 800b072:	462b      	mov	r3, r5
 800b074:	f7f5 fa6c 	bl	8000550 <__aeabi_dmul>
 800b078:	a359      	add	r3, pc, #356	@ (adr r3, 800b1e0 <__ieee754_pow+0xa58>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 f8af 	bl	80001e0 <__aeabi_dsub>
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	f7f5 fa63 	bl	8000550 <__aeabi_dmul>
 800b08a:	a357      	add	r3, pc, #348	@ (adr r3, 800b1e8 <__ieee754_pow+0xa60>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 f8a8 	bl	80001e4 <__adddf3>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 fa5a 	bl	8000550 <__aeabi_dmul>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	f7f5 f89c 	bl	80001e0 <__aeabi_dsub>
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 fa4c 	bl	8000550 <__aeabi_dmul>
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	e9cd 0100 	strd	r0, r1, [sp]
 800b0be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	f7f5 f88b 	bl	80001e0 <__aeabi_dsub>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0d2:	f7f5 fb67 	bl	80007a4 <__aeabi_ddiv>
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	4604      	mov	r4, r0
 800b0da:	460d      	mov	r5, r1
 800b0dc:	463b      	mov	r3, r7
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	f7f5 fa35 	bl	8000550 <__aeabi_dmul>
 800b0e6:	4632      	mov	r2, r6
 800b0e8:	463b      	mov	r3, r7
 800b0ea:	f7f5 f87b 	bl	80001e4 <__adddf3>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7f5 f873 	bl	80001e0 <__aeabi_dsub>
 800b0fa:	4642      	mov	r2, r8
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	f7f5 f86f 	bl	80001e0 <__aeabi_dsub>
 800b102:	460b      	mov	r3, r1
 800b104:	4602      	mov	r2, r0
 800b106:	493b      	ldr	r1, [pc, #236]	@ (800b1f4 <__ieee754_pow+0xa6c>)
 800b108:	2000      	movs	r0, #0
 800b10a:	f7f5 f869 	bl	80001e0 <__aeabi_dsub>
 800b10e:	ec41 0b10 	vmov	d0, r0, r1
 800b112:	ee10 3a90 	vmov	r3, s1
 800b116:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b11a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b11e:	da30      	bge.n	800b182 <__ieee754_pow+0x9fa>
 800b120:	4650      	mov	r0, sl
 800b122:	f000 fa71 	bl	800b608 <scalbn>
 800b126:	ec51 0b10 	vmov	r0, r1, d0
 800b12a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b12e:	f7ff bbd2 	b.w	800a8d6 <__ieee754_pow+0x14e>
 800b132:	4c31      	ldr	r4, [pc, #196]	@ (800b1f8 <__ieee754_pow+0xa70>)
 800b134:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b138:	42a3      	cmp	r3, r4
 800b13a:	d91a      	bls.n	800b172 <__ieee754_pow+0x9ea>
 800b13c:	4b2f      	ldr	r3, [pc, #188]	@ (800b1fc <__ieee754_pow+0xa74>)
 800b13e:	440b      	add	r3, r1
 800b140:	4303      	orrs	r3, r0
 800b142:	d009      	beq.n	800b158 <__ieee754_pow+0x9d0>
 800b144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b148:	2200      	movs	r2, #0
 800b14a:	2300      	movs	r3, #0
 800b14c:	f7f5 fc72 	bl	8000a34 <__aeabi_dcmplt>
 800b150:	3800      	subs	r0, #0
 800b152:	bf18      	it	ne
 800b154:	2001      	movne	r0, #1
 800b156:	e42b      	b.n	800a9b0 <__ieee754_pow+0x228>
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	f7f5 f840 	bl	80001e0 <__aeabi_dsub>
 800b160:	4632      	mov	r2, r6
 800b162:	463b      	mov	r3, r7
 800b164:	f7f5 fc7a 	bl	8000a5c <__aeabi_dcmpge>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1eb      	bne.n	800b144 <__ieee754_pow+0x9bc>
 800b16c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b20c <__ieee754_pow+0xa84>
 800b170:	e6f7      	b.n	800af62 <__ieee754_pow+0x7da>
 800b172:	469a      	mov	sl, r3
 800b174:	4b22      	ldr	r3, [pc, #136]	@ (800b200 <__ieee754_pow+0xa78>)
 800b176:	459a      	cmp	sl, r3
 800b178:	f63f aef3 	bhi.w	800af62 <__ieee754_pow+0x7da>
 800b17c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b180:	e715      	b.n	800afae <__ieee754_pow+0x826>
 800b182:	ec51 0b10 	vmov	r0, r1, d0
 800b186:	4619      	mov	r1, r3
 800b188:	e7cf      	b.n	800b12a <__ieee754_pow+0x9a2>
 800b18a:	491a      	ldr	r1, [pc, #104]	@ (800b1f4 <__ieee754_pow+0xa6c>)
 800b18c:	2000      	movs	r0, #0
 800b18e:	f7ff bb18 	b.w	800a7c2 <__ieee754_pow+0x3a>
 800b192:	2000      	movs	r0, #0
 800b194:	2100      	movs	r1, #0
 800b196:	f7ff bb14 	b.w	800a7c2 <__ieee754_pow+0x3a>
 800b19a:	4630      	mov	r0, r6
 800b19c:	4639      	mov	r1, r7
 800b19e:	f7ff bb10 	b.w	800a7c2 <__ieee754_pow+0x3a>
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	f7ff bb5e 	b.w	800a864 <__ieee754_pow+0xdc>
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	f7ff bb49 	b.w	800a840 <__ieee754_pow+0xb8>
 800b1ae:	bf00      	nop
 800b1b0:	00000000 	.word	0x00000000
 800b1b4:	3fe62e43 	.word	0x3fe62e43
 800b1b8:	fefa39ef 	.word	0xfefa39ef
 800b1bc:	3fe62e42 	.word	0x3fe62e42
 800b1c0:	0ca86c39 	.word	0x0ca86c39
 800b1c4:	be205c61 	.word	0xbe205c61
 800b1c8:	72bea4d0 	.word	0x72bea4d0
 800b1cc:	3e663769 	.word	0x3e663769
 800b1d0:	c5d26bf1 	.word	0xc5d26bf1
 800b1d4:	3ebbbd41 	.word	0x3ebbbd41
 800b1d8:	af25de2c 	.word	0xaf25de2c
 800b1dc:	3f11566a 	.word	0x3f11566a
 800b1e0:	16bebd93 	.word	0x16bebd93
 800b1e4:	3f66c16c 	.word	0x3f66c16c
 800b1e8:	5555553e 	.word	0x5555553e
 800b1ec:	3fc55555 	.word	0x3fc55555
 800b1f0:	fff00000 	.word	0xfff00000
 800b1f4:	3ff00000 	.word	0x3ff00000
 800b1f8:	4090cbff 	.word	0x4090cbff
 800b1fc:	3f6f3400 	.word	0x3f6f3400
 800b200:	3fe00000 	.word	0x3fe00000
 800b204:	652b82fe 	.word	0x652b82fe
 800b208:	3c971547 	.word	0x3c971547
 800b20c:	4090cc00 	.word	0x4090cc00

0800b210 <__ieee754_rem_pio2>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ec57 6b10 	vmov	r6, r7, d0
 800b218:	4bc5      	ldr	r3, [pc, #788]	@ (800b530 <__ieee754_rem_pio2+0x320>)
 800b21a:	b08d      	sub	sp, #52	@ 0x34
 800b21c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b220:	4598      	cmp	r8, r3
 800b222:	4604      	mov	r4, r0
 800b224:	9704      	str	r7, [sp, #16]
 800b226:	d807      	bhi.n	800b238 <__ieee754_rem_pio2+0x28>
 800b228:	2200      	movs	r2, #0
 800b22a:	2300      	movs	r3, #0
 800b22c:	ed80 0b00 	vstr	d0, [r0]
 800b230:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b234:	2500      	movs	r5, #0
 800b236:	e028      	b.n	800b28a <__ieee754_rem_pio2+0x7a>
 800b238:	4bbe      	ldr	r3, [pc, #760]	@ (800b534 <__ieee754_rem_pio2+0x324>)
 800b23a:	4598      	cmp	r8, r3
 800b23c:	d878      	bhi.n	800b330 <__ieee754_rem_pio2+0x120>
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	4dbd      	ldr	r5, [pc, #756]	@ (800b538 <__ieee754_rem_pio2+0x328>)
 800b242:	2b00      	cmp	r3, #0
 800b244:	4630      	mov	r0, r6
 800b246:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b4f8 <__ieee754_rem_pio2+0x2e8>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	4639      	mov	r1, r7
 800b24e:	dd38      	ble.n	800b2c2 <__ieee754_rem_pio2+0xb2>
 800b250:	f7f4 ffc6 	bl	80001e0 <__aeabi_dsub>
 800b254:	45a8      	cmp	r8, r5
 800b256:	4606      	mov	r6, r0
 800b258:	460f      	mov	r7, r1
 800b25a:	d01a      	beq.n	800b292 <__ieee754_rem_pio2+0x82>
 800b25c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b500 <__ieee754_rem_pio2+0x2f0>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f4 ffbd 	bl	80001e0 <__aeabi_dsub>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f4 ffb5 	bl	80001e0 <__aeabi_dsub>
 800b276:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b500 <__ieee754_rem_pio2+0x2f0>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f4 ffb0 	bl	80001e0 <__aeabi_dsub>
 800b280:	e9c4 8900 	strd	r8, r9, [r4]
 800b284:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b288:	2501      	movs	r5, #1
 800b28a:	4628      	mov	r0, r5
 800b28c:	b00d      	add	sp, #52	@ 0x34
 800b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b292:	a39d      	add	r3, pc, #628	@ (adr r3, 800b508 <__ieee754_rem_pio2+0x2f8>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f4 ffa2 	bl	80001e0 <__aeabi_dsub>
 800b29c:	a39c      	add	r3, pc, #624	@ (adr r3, 800b510 <__ieee754_rem_pio2+0x300>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	f7f4 ff9b 	bl	80001e0 <__aeabi_dsub>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4680      	mov	r8, r0
 800b2b0:	4689      	mov	r9, r1
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f4 ff93 	bl	80001e0 <__aeabi_dsub>
 800b2ba:	a395      	add	r3, pc, #596	@ (adr r3, 800b510 <__ieee754_rem_pio2+0x300>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	e7dc      	b.n	800b27c <__ieee754_rem_pio2+0x6c>
 800b2c2:	f7f4 ff8f 	bl	80001e4 <__adddf3>
 800b2c6:	45a8      	cmp	r8, r5
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	460f      	mov	r7, r1
 800b2cc:	d018      	beq.n	800b300 <__ieee754_rem_pio2+0xf0>
 800b2ce:	a38c      	add	r3, pc, #560	@ (adr r3, 800b500 <__ieee754_rem_pio2+0x2f0>)
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f4 ff86 	bl	80001e4 <__adddf3>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4689      	mov	r9, r1
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f4 ff7c 	bl	80001e0 <__aeabi_dsub>
 800b2e8:	a385      	add	r3, pc, #532	@ (adr r3, 800b500 <__ieee754_rem_pio2+0x2f0>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f4 ff79 	bl	80001e4 <__adddf3>
 800b2f2:	f04f 35ff 	mov.w	r5, #4294967295
 800b2f6:	e9c4 8900 	strd	r8, r9, [r4]
 800b2fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2fe:	e7c4      	b.n	800b28a <__ieee754_rem_pio2+0x7a>
 800b300:	a381      	add	r3, pc, #516	@ (adr r3, 800b508 <__ieee754_rem_pio2+0x2f8>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f7f4 ff6d 	bl	80001e4 <__adddf3>
 800b30a:	a381      	add	r3, pc, #516	@ (adr r3, 800b510 <__ieee754_rem_pio2+0x300>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	4606      	mov	r6, r0
 800b312:	460f      	mov	r7, r1
 800b314:	f7f4 ff66 	bl	80001e4 <__adddf3>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4680      	mov	r8, r0
 800b31e:	4689      	mov	r9, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ff5c 	bl	80001e0 <__aeabi_dsub>
 800b328:	a379      	add	r3, pc, #484	@ (adr r3, 800b510 <__ieee754_rem_pio2+0x300>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	e7de      	b.n	800b2ee <__ieee754_rem_pio2+0xde>
 800b330:	4b82      	ldr	r3, [pc, #520]	@ (800b53c <__ieee754_rem_pio2+0x32c>)
 800b332:	4598      	cmp	r8, r3
 800b334:	f200 80d1 	bhi.w	800b4da <__ieee754_rem_pio2+0x2ca>
 800b338:	f7fe faf6 	bl	8009928 <fabs>
 800b33c:	ec57 6b10 	vmov	r6, r7, d0
 800b340:	a375      	add	r3, pc, #468	@ (adr r3, 800b518 <__ieee754_rem_pio2+0x308>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f5 f901 	bl	8000550 <__aeabi_dmul>
 800b34e:	4b7c      	ldr	r3, [pc, #496]	@ (800b540 <__ieee754_rem_pio2+0x330>)
 800b350:	2200      	movs	r2, #0
 800b352:	f7f4 ff47 	bl	80001e4 <__adddf3>
 800b356:	f7f5 fbab 	bl	8000ab0 <__aeabi_d2iz>
 800b35a:	4605      	mov	r5, r0
 800b35c:	f7f5 f88e 	bl	800047c <__aeabi_i2d>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b368:	a363      	add	r3, pc, #396	@ (adr r3, 800b4f8 <__ieee754_rem_pio2+0x2e8>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f7f5 f8ef 	bl	8000550 <__aeabi_dmul>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4630      	mov	r0, r6
 800b378:	4639      	mov	r1, r7
 800b37a:	f7f4 ff31 	bl	80001e0 <__aeabi_dsub>
 800b37e:	a360      	add	r3, pc, #384	@ (adr r3, 800b500 <__ieee754_rem_pio2+0x2f0>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	4682      	mov	sl, r0
 800b386:	468b      	mov	fp, r1
 800b388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b38c:	f7f5 f8e0 	bl	8000550 <__aeabi_dmul>
 800b390:	2d1f      	cmp	r5, #31
 800b392:	4606      	mov	r6, r0
 800b394:	460f      	mov	r7, r1
 800b396:	dc0c      	bgt.n	800b3b2 <__ieee754_rem_pio2+0x1a2>
 800b398:	4b6a      	ldr	r3, [pc, #424]	@ (800b544 <__ieee754_rem_pio2+0x334>)
 800b39a:	1e6a      	subs	r2, r5, #1
 800b39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a0:	4543      	cmp	r3, r8
 800b3a2:	d006      	beq.n	800b3b2 <__ieee754_rem_pio2+0x1a2>
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	463b      	mov	r3, r7
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	4659      	mov	r1, fp
 800b3ac:	f7f4 ff18 	bl	80001e0 <__aeabi_dsub>
 800b3b0:	e00e      	b.n	800b3d0 <__ieee754_rem_pio2+0x1c0>
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	f7f4 ff11 	bl	80001e0 <__aeabi_dsub>
 800b3be:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b3cc:	2b10      	cmp	r3, #16
 800b3ce:	dc02      	bgt.n	800b3d6 <__ieee754_rem_pio2+0x1c6>
 800b3d0:	e9c4 0100 	strd	r0, r1, [r4]
 800b3d4:	e039      	b.n	800b44a <__ieee754_rem_pio2+0x23a>
 800b3d6:	a34c      	add	r3, pc, #304	@ (adr r3, 800b508 <__ieee754_rem_pio2+0x2f8>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e0:	f7f5 f8b6 	bl	8000550 <__aeabi_dmul>
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	460f      	mov	r7, r1
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	f7f4 fef6 	bl	80001e0 <__aeabi_dsub>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	4689      	mov	r9, r1
 800b3fc:	4650      	mov	r0, sl
 800b3fe:	4659      	mov	r1, fp
 800b400:	f7f4 feee 	bl	80001e0 <__aeabi_dsub>
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	f7f4 feea 	bl	80001e0 <__aeabi_dsub>
 800b40c:	a340      	add	r3, pc, #256	@ (adr r3, 800b510 <__ieee754_rem_pio2+0x300>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	4606      	mov	r6, r0
 800b414:	460f      	mov	r7, r1
 800b416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b41a:	f7f5 f899 	bl	8000550 <__aeabi_dmul>
 800b41e:	4632      	mov	r2, r6
 800b420:	463b      	mov	r3, r7
 800b422:	f7f4 fedd 	bl	80001e0 <__aeabi_dsub>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4606      	mov	r6, r0
 800b42c:	460f      	mov	r7, r1
 800b42e:	4640      	mov	r0, r8
 800b430:	4649      	mov	r1, r9
 800b432:	f7f4 fed5 	bl	80001e0 <__aeabi_dsub>
 800b436:	9a05      	ldr	r2, [sp, #20]
 800b438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	2b31      	cmp	r3, #49	@ 0x31
 800b440:	dc20      	bgt.n	800b484 <__ieee754_rem_pio2+0x274>
 800b442:	e9c4 0100 	strd	r0, r1, [r4]
 800b446:	46c2      	mov	sl, r8
 800b448:	46cb      	mov	fp, r9
 800b44a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b44e:	4650      	mov	r0, sl
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	4659      	mov	r1, fp
 800b456:	f7f4 fec3 	bl	80001e0 <__aeabi_dsub>
 800b45a:	463b      	mov	r3, r7
 800b45c:	4632      	mov	r2, r6
 800b45e:	f7f4 febf 	bl	80001e0 <__aeabi_dsub>
 800b462:	9b04      	ldr	r3, [sp, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b46a:	f6bf af0e 	bge.w	800b28a <__ieee754_rem_pio2+0x7a>
 800b46e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b472:	6063      	str	r3, [r4, #4]
 800b474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b478:	f8c4 8000 	str.w	r8, [r4]
 800b47c:	60a0      	str	r0, [r4, #8]
 800b47e:	60e3      	str	r3, [r4, #12]
 800b480:	426d      	negs	r5, r5
 800b482:	e702      	b.n	800b28a <__ieee754_rem_pio2+0x7a>
 800b484:	a326      	add	r3, pc, #152	@ (adr r3, 800b520 <__ieee754_rem_pio2+0x310>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48e:	f7f5 f85f 	bl	8000550 <__aeabi_dmul>
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4640      	mov	r0, r8
 800b49c:	4649      	mov	r1, r9
 800b49e:	f7f4 fe9f 	bl	80001e0 <__aeabi_dsub>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	468b      	mov	fp, r1
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f4 fe97 	bl	80001e0 <__aeabi_dsub>
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	463b      	mov	r3, r7
 800b4b6:	f7f4 fe93 	bl	80001e0 <__aeabi_dsub>
 800b4ba:	a31b      	add	r3, pc, #108	@ (adr r3, 800b528 <__ieee754_rem_pio2+0x318>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c8:	f7f5 f842 	bl	8000550 <__aeabi_dmul>
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	f7f4 fe86 	bl	80001e0 <__aeabi_dsub>
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	e764      	b.n	800b3a4 <__ieee754_rem_pio2+0x194>
 800b4da:	4b1b      	ldr	r3, [pc, #108]	@ (800b548 <__ieee754_rem_pio2+0x338>)
 800b4dc:	4598      	cmp	r8, r3
 800b4de:	d935      	bls.n	800b54c <__ieee754_rem_pio2+0x33c>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f4 fe7a 	bl	80001e0 <__aeabi_dsub>
 800b4ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4f0:	e9c4 0100 	strd	r0, r1, [r4]
 800b4f4:	e69e      	b.n	800b234 <__ieee754_rem_pio2+0x24>
 800b4f6:	bf00      	nop
 800b4f8:	54400000 	.word	0x54400000
 800b4fc:	3ff921fb 	.word	0x3ff921fb
 800b500:	1a626331 	.word	0x1a626331
 800b504:	3dd0b461 	.word	0x3dd0b461
 800b508:	1a600000 	.word	0x1a600000
 800b50c:	3dd0b461 	.word	0x3dd0b461
 800b510:	2e037073 	.word	0x2e037073
 800b514:	3ba3198a 	.word	0x3ba3198a
 800b518:	6dc9c883 	.word	0x6dc9c883
 800b51c:	3fe45f30 	.word	0x3fe45f30
 800b520:	2e000000 	.word	0x2e000000
 800b524:	3ba3198a 	.word	0x3ba3198a
 800b528:	252049c1 	.word	0x252049c1
 800b52c:	397b839a 	.word	0x397b839a
 800b530:	3fe921fb 	.word	0x3fe921fb
 800b534:	4002d97b 	.word	0x4002d97b
 800b538:	3ff921fb 	.word	0x3ff921fb
 800b53c:	413921fb 	.word	0x413921fb
 800b540:	3fe00000 	.word	0x3fe00000
 800b544:	0800bff8 	.word	0x0800bff8
 800b548:	7fefffff 	.word	0x7fefffff
 800b54c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b550:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b554:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b558:	4630      	mov	r0, r6
 800b55a:	460f      	mov	r7, r1
 800b55c:	f7f5 faa8 	bl	8000ab0 <__aeabi_d2iz>
 800b560:	f7f4 ff8c 	bl	800047c <__aeabi_i2d>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b570:	f7f4 fe36 	bl	80001e0 <__aeabi_dsub>
 800b574:	4b22      	ldr	r3, [pc, #136]	@ (800b600 <__ieee754_rem_pio2+0x3f0>)
 800b576:	2200      	movs	r2, #0
 800b578:	f7f4 ffea 	bl	8000550 <__aeabi_dmul>
 800b57c:	460f      	mov	r7, r1
 800b57e:	4606      	mov	r6, r0
 800b580:	f7f5 fa96 	bl	8000ab0 <__aeabi_d2iz>
 800b584:	f7f4 ff7a 	bl	800047c <__aeabi_i2d>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b594:	f7f4 fe24 	bl	80001e0 <__aeabi_dsub>
 800b598:	4b19      	ldr	r3, [pc, #100]	@ (800b600 <__ieee754_rem_pio2+0x3f0>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	f7f4 ffd8 	bl	8000550 <__aeabi_dmul>
 800b5a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b5a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b5a8:	f04f 0803 	mov.w	r8, #3
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	2700      	movs	r7, #0
 800b5b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	46c2      	mov	sl, r8
 800b5ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5be:	f7f5 fa2f 	bl	8000a20 <__aeabi_dcmpeq>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d1f4      	bne.n	800b5b0 <__ieee754_rem_pio2+0x3a0>
 800b5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b604 <__ieee754_rem_pio2+0x3f4>)
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4653      	mov	r3, sl
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	a806      	add	r0, sp, #24
 800b5d6:	f000 f8d3 	bl	800b780 <__kernel_rem_pio2>
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f6bf ae53 	bge.w	800b28a <__ieee754_rem_pio2+0x7a>
 800b5e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b5e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5ec:	e9c4 2300 	strd	r2, r3, [r4]
 800b5f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b5f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b5fc:	e740      	b.n	800b480 <__ieee754_rem_pio2+0x270>
 800b5fe:	bf00      	nop
 800b600:	41700000 	.word	0x41700000
 800b604:	0800c078 	.word	0x0800c078

0800b608 <scalbn>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	ec55 4b10 	vmov	r4, r5, d0
 800b60e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b612:	4606      	mov	r6, r0
 800b614:	462b      	mov	r3, r5
 800b616:	b991      	cbnz	r1, 800b63e <scalbn+0x36>
 800b618:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b61c:	4323      	orrs	r3, r4
 800b61e:	d03d      	beq.n	800b69c <scalbn+0x94>
 800b620:	4b35      	ldr	r3, [pc, #212]	@ (800b6f8 <scalbn+0xf0>)
 800b622:	4620      	mov	r0, r4
 800b624:	4629      	mov	r1, r5
 800b626:	2200      	movs	r2, #0
 800b628:	f7f4 ff92 	bl	8000550 <__aeabi_dmul>
 800b62c:	4b33      	ldr	r3, [pc, #204]	@ (800b6fc <scalbn+0xf4>)
 800b62e:	429e      	cmp	r6, r3
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	da0f      	bge.n	800b656 <scalbn+0x4e>
 800b636:	a328      	add	r3, pc, #160	@ (adr r3, 800b6d8 <scalbn+0xd0>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	e01e      	b.n	800b67c <scalbn+0x74>
 800b63e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b642:	4291      	cmp	r1, r2
 800b644:	d10b      	bne.n	800b65e <scalbn+0x56>
 800b646:	4622      	mov	r2, r4
 800b648:	4620      	mov	r0, r4
 800b64a:	4629      	mov	r1, r5
 800b64c:	f7f4 fdca 	bl	80001e4 <__adddf3>
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	e022      	b.n	800b69c <scalbn+0x94>
 800b656:	460b      	mov	r3, r1
 800b658:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b65c:	3936      	subs	r1, #54	@ 0x36
 800b65e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b662:	4296      	cmp	r6, r2
 800b664:	dd0d      	ble.n	800b682 <scalbn+0x7a>
 800b666:	2d00      	cmp	r5, #0
 800b668:	a11d      	add	r1, pc, #116	@ (adr r1, 800b6e0 <scalbn+0xd8>)
 800b66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b66e:	da02      	bge.n	800b676 <scalbn+0x6e>
 800b670:	a11d      	add	r1, pc, #116	@ (adr r1, 800b6e8 <scalbn+0xe0>)
 800b672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b676:	a31a      	add	r3, pc, #104	@ (adr r3, 800b6e0 <scalbn+0xd8>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 ff68 	bl	8000550 <__aeabi_dmul>
 800b680:	e7e6      	b.n	800b650 <scalbn+0x48>
 800b682:	1872      	adds	r2, r6, r1
 800b684:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b688:	428a      	cmp	r2, r1
 800b68a:	dcec      	bgt.n	800b666 <scalbn+0x5e>
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	dd08      	ble.n	800b6a2 <scalbn+0x9a>
 800b690:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b694:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b698:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b69c:	ec45 4b10 	vmov	d0, r4, r5
 800b6a0:	bd70      	pop	{r4, r5, r6, pc}
 800b6a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b6a6:	da08      	bge.n	800b6ba <scalbn+0xb2>
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800b6d8 <scalbn+0xd0>)
 800b6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b0:	dac1      	bge.n	800b636 <scalbn+0x2e>
 800b6b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800b6f0 <scalbn+0xe8>)
 800b6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b8:	e7bd      	b.n	800b636 <scalbn+0x2e>
 800b6ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6be:	3236      	adds	r2, #54	@ 0x36
 800b6c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b6c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b700 <scalbn+0xf8>)
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	e7d4      	b.n	800b67c <scalbn+0x74>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	c2f8f359 	.word	0xc2f8f359
 800b6dc:	01a56e1f 	.word	0x01a56e1f
 800b6e0:	8800759c 	.word	0x8800759c
 800b6e4:	7e37e43c 	.word	0x7e37e43c
 800b6e8:	8800759c 	.word	0x8800759c
 800b6ec:	fe37e43c 	.word	0xfe37e43c
 800b6f0:	c2f8f359 	.word	0xc2f8f359
 800b6f4:	81a56e1f 	.word	0x81a56e1f
 800b6f8:	43500000 	.word	0x43500000
 800b6fc:	ffff3cb0 	.word	0xffff3cb0
 800b700:	3c900000 	.word	0x3c900000

0800b704 <with_errno>:
 800b704:	b510      	push	{r4, lr}
 800b706:	ed2d 8b02 	vpush	{d8}
 800b70a:	eeb0 8a40 	vmov.f32	s16, s0
 800b70e:	eef0 8a60 	vmov.f32	s17, s1
 800b712:	4604      	mov	r4, r0
 800b714:	f7fd ff78 	bl	8009608 <__errno>
 800b718:	eeb0 0a48 	vmov.f32	s0, s16
 800b71c:	eef0 0a68 	vmov.f32	s1, s17
 800b720:	ecbd 8b02 	vpop	{d8}
 800b724:	6004      	str	r4, [r0, #0]
 800b726:	bd10      	pop	{r4, pc}

0800b728 <xflow>:
 800b728:	4603      	mov	r3, r0
 800b72a:	b507      	push	{r0, r1, r2, lr}
 800b72c:	ec51 0b10 	vmov	r0, r1, d0
 800b730:	b183      	cbz	r3, 800b754 <xflow+0x2c>
 800b732:	4602      	mov	r2, r0
 800b734:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b738:	e9cd 2300 	strd	r2, r3, [sp]
 800b73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b740:	f7f4 ff06 	bl	8000550 <__aeabi_dmul>
 800b744:	ec41 0b10 	vmov	d0, r0, r1
 800b748:	2022      	movs	r0, #34	@ 0x22
 800b74a:	b003      	add	sp, #12
 800b74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b750:	f7ff bfd8 	b.w	800b704 <with_errno>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e7ee      	b.n	800b738 <xflow+0x10>
 800b75a:	0000      	movs	r0, r0
 800b75c:	0000      	movs	r0, r0
	...

0800b760 <__math_uflow>:
 800b760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b768 <__math_uflow+0x8>
 800b764:	f7ff bfe0 	b.w	800b728 <xflow>
 800b768:	00000000 	.word	0x00000000
 800b76c:	10000000 	.word	0x10000000

0800b770 <__math_oflow>:
 800b770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b778 <__math_oflow+0x8>
 800b774:	f7ff bfd8 	b.w	800b728 <xflow>
 800b778:	00000000 	.word	0x00000000
 800b77c:	70000000 	.word	0x70000000

0800b780 <__kernel_rem_pio2>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	ed2d 8b02 	vpush	{d8}
 800b788:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b78c:	f112 0f14 	cmn.w	r2, #20
 800b790:	9306      	str	r3, [sp, #24]
 800b792:	9104      	str	r1, [sp, #16]
 800b794:	4bbe      	ldr	r3, [pc, #760]	@ (800ba90 <__kernel_rem_pio2+0x310>)
 800b796:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b798:	9008      	str	r0, [sp, #32]
 800b79a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	9b06      	ldr	r3, [sp, #24]
 800b7a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7a6:	bfa8      	it	ge
 800b7a8:	1ed4      	subge	r4, r2, #3
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	bfb2      	itee	lt
 800b7ae:	2400      	movlt	r4, #0
 800b7b0:	2318      	movge	r3, #24
 800b7b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b7b6:	f06f 0317 	mvn.w	r3, #23
 800b7ba:	fb04 3303 	mla	r3, r4, r3, r3
 800b7be:	eb03 0b02 	add.w	fp, r3, r2
 800b7c2:	9b00      	ldr	r3, [sp, #0]
 800b7c4:	9a05      	ldr	r2, [sp, #20]
 800b7c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ba80 <__kernel_rem_pio2+0x300>
 800b7ca:	eb03 0802 	add.w	r8, r3, r2
 800b7ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b7d0:	1aa7      	subs	r7, r4, r2
 800b7d2:	ae20      	add	r6, sp, #128	@ 0x80
 800b7d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7d8:	2500      	movs	r5, #0
 800b7da:	4545      	cmp	r5, r8
 800b7dc:	dd13      	ble.n	800b806 <__kernel_rem_pio2+0x86>
 800b7de:	9b06      	ldr	r3, [sp, #24]
 800b7e0:	aa20      	add	r2, sp, #128	@ 0x80
 800b7e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b7e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b7ea:	f04f 0800 	mov.w	r8, #0
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	4598      	cmp	r8, r3
 800b7f2:	dc31      	bgt.n	800b858 <__kernel_rem_pio2+0xd8>
 800b7f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ba80 <__kernel_rem_pio2+0x300>
 800b7f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b800:	462f      	mov	r7, r5
 800b802:	2600      	movs	r6, #0
 800b804:	e01b      	b.n	800b83e <__kernel_rem_pio2+0xbe>
 800b806:	42ef      	cmn	r7, r5
 800b808:	d407      	bmi.n	800b81a <__kernel_rem_pio2+0x9a>
 800b80a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b80e:	f7f4 fe35 	bl	800047c <__aeabi_i2d>
 800b812:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b816:	3501      	adds	r5, #1
 800b818:	e7df      	b.n	800b7da <__kernel_rem_pio2+0x5a>
 800b81a:	ec51 0b18 	vmov	r0, r1, d8
 800b81e:	e7f8      	b.n	800b812 <__kernel_rem_pio2+0x92>
 800b820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b824:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b828:	f7f4 fe92 	bl	8000550 <__aeabi_dmul>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b834:	f7f4 fcd6 	bl	80001e4 <__adddf3>
 800b838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83c:	3601      	adds	r6, #1
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	429e      	cmp	r6, r3
 800b842:	f1a7 0708 	sub.w	r7, r7, #8
 800b846:	ddeb      	ble.n	800b820 <__kernel_rem_pio2+0xa0>
 800b848:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b84c:	f108 0801 	add.w	r8, r8, #1
 800b850:	ecaa 7b02 	vstmia	sl!, {d7}
 800b854:	3508      	adds	r5, #8
 800b856:	e7ca      	b.n	800b7ee <__kernel_rem_pio2+0x6e>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	f8dd 8000 	ldr.w	r8, [sp]
 800b85e:	aa0c      	add	r2, sp, #48	@ 0x30
 800b860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b864:	930a      	str	r3, [sp, #40]	@ 0x28
 800b866:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b868:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b86e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b872:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b874:	ab98      	add	r3, sp, #608	@ 0x260
 800b876:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b87a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b87e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b882:	ac0c      	add	r4, sp, #48	@ 0x30
 800b884:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b886:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b88a:	46a1      	mov	r9, r4
 800b88c:	46c2      	mov	sl, r8
 800b88e:	f1ba 0f00 	cmp.w	sl, #0
 800b892:	f1a5 0508 	sub.w	r5, r5, #8
 800b896:	dc77      	bgt.n	800b988 <__kernel_rem_pio2+0x208>
 800b898:	4658      	mov	r0, fp
 800b89a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b89e:	f7ff feb3 	bl	800b608 <scalbn>
 800b8a2:	ec57 6b10 	vmov	r6, r7, d0
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 fe4e 	bl	8000550 <__aeabi_dmul>
 800b8b4:	ec41 0b10 	vmov	d0, r0, r1
 800b8b8:	f000 faba 	bl	800be30 <floor>
 800b8bc:	4b75      	ldr	r3, [pc, #468]	@ (800ba94 <__kernel_rem_pio2+0x314>)
 800b8be:	ec51 0b10 	vmov	r0, r1, d0
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f7f4 fe44 	bl	8000550 <__aeabi_dmul>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	f7f4 fc86 	bl	80001e0 <__aeabi_dsub>
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	f7f5 f8ea 	bl	8000ab0 <__aeabi_d2iz>
 800b8dc:	9002      	str	r0, [sp, #8]
 800b8de:	f7f4 fdcd 	bl	800047c <__aeabi_i2d>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	f7f4 fc79 	bl	80001e0 <__aeabi_dsub>
 800b8ee:	f1bb 0f00 	cmp.w	fp, #0
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	dd6c      	ble.n	800b9d2 <__kernel_rem_pio2+0x252>
 800b8f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800b8fc:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8fe:	9d02      	ldr	r5, [sp, #8]
 800b900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b904:	f1cb 0018 	rsb	r0, fp, #24
 800b908:	fa43 f200 	asr.w	r2, r3, r0
 800b90c:	4415      	add	r5, r2
 800b90e:	4082      	lsls	r2, r0
 800b910:	1a9b      	subs	r3, r3, r2
 800b912:	aa0c      	add	r2, sp, #48	@ 0x30
 800b914:	9502      	str	r5, [sp, #8]
 800b916:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b91a:	f1cb 0217 	rsb	r2, fp, #23
 800b91e:	fa43 f902 	asr.w	r9, r3, r2
 800b922:	f1b9 0f00 	cmp.w	r9, #0
 800b926:	dd64      	ble.n	800b9f2 <__kernel_rem_pio2+0x272>
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	3301      	adds	r3, #1
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	4615      	mov	r5, r2
 800b932:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b936:	4590      	cmp	r8, r2
 800b938:	f300 80b8 	bgt.w	800baac <__kernel_rem_pio2+0x32c>
 800b93c:	f1bb 0f00 	cmp.w	fp, #0
 800b940:	dd07      	ble.n	800b952 <__kernel_rem_pio2+0x1d2>
 800b942:	f1bb 0f01 	cmp.w	fp, #1
 800b946:	f000 80bf 	beq.w	800bac8 <__kernel_rem_pio2+0x348>
 800b94a:	f1bb 0f02 	cmp.w	fp, #2
 800b94e:	f000 80c6 	beq.w	800bade <__kernel_rem_pio2+0x35e>
 800b952:	f1b9 0f02 	cmp.w	r9, #2
 800b956:	d14c      	bne.n	800b9f2 <__kernel_rem_pio2+0x272>
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	494e      	ldr	r1, [pc, #312]	@ (800ba98 <__kernel_rem_pio2+0x318>)
 800b95e:	2000      	movs	r0, #0
 800b960:	f7f4 fc3e 	bl	80001e0 <__aeabi_dsub>
 800b964:	4606      	mov	r6, r0
 800b966:	460f      	mov	r7, r1
 800b968:	2d00      	cmp	r5, #0
 800b96a:	d042      	beq.n	800b9f2 <__kernel_rem_pio2+0x272>
 800b96c:	4658      	mov	r0, fp
 800b96e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ba88 <__kernel_rem_pio2+0x308>
 800b972:	f7ff fe49 	bl	800b608 <scalbn>
 800b976:	4630      	mov	r0, r6
 800b978:	4639      	mov	r1, r7
 800b97a:	ec53 2b10 	vmov	r2, r3, d0
 800b97e:	f7f4 fc2f 	bl	80001e0 <__aeabi_dsub>
 800b982:	4606      	mov	r6, r0
 800b984:	460f      	mov	r7, r1
 800b986:	e034      	b.n	800b9f2 <__kernel_rem_pio2+0x272>
 800b988:	4b44      	ldr	r3, [pc, #272]	@ (800ba9c <__kernel_rem_pio2+0x31c>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b990:	f7f4 fdde 	bl	8000550 <__aeabi_dmul>
 800b994:	f7f5 f88c 	bl	8000ab0 <__aeabi_d2iz>
 800b998:	f7f4 fd70 	bl	800047c <__aeabi_i2d>
 800b99c:	4b40      	ldr	r3, [pc, #256]	@ (800baa0 <__kernel_rem_pio2+0x320>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	460f      	mov	r7, r1
 800b9a4:	f7f4 fdd4 	bl	8000550 <__aeabi_dmul>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b0:	f7f4 fc16 	bl	80001e0 <__aeabi_dsub>
 800b9b4:	f7f5 f87c 	bl	8000ab0 <__aeabi_d2iz>
 800b9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9bc:	f849 0b04 	str.w	r0, [r9], #4
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7f4 fc0e 	bl	80001e4 <__adddf3>
 800b9c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d0:	e75d      	b.n	800b88e <__kernel_rem_pio2+0x10e>
 800b9d2:	d107      	bne.n	800b9e4 <__kernel_rem_pio2+0x264>
 800b9d4:	f108 33ff 	add.w	r3, r8, #4294967295
 800b9d8:	aa0c      	add	r2, sp, #48	@ 0x30
 800b9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b9e2:	e79e      	b.n	800b922 <__kernel_rem_pio2+0x1a2>
 800b9e4:	4b2f      	ldr	r3, [pc, #188]	@ (800baa4 <__kernel_rem_pio2+0x324>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f7f5 f838 	bl	8000a5c <__aeabi_dcmpge>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d143      	bne.n	800ba78 <__kernel_rem_pio2+0x2f8>
 800b9f0:	4681      	mov	r9, r0
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f5 f811 	bl	8000a20 <__aeabi_dcmpeq>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f000 80bf 	beq.w	800bb82 <__kernel_rem_pio2+0x402>
 800ba04:	f108 33ff 	add.w	r3, r8, #4294967295
 800ba08:	2200      	movs	r2, #0
 800ba0a:	9900      	ldr	r1, [sp, #0]
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	da6e      	bge.n	800baee <__kernel_rem_pio2+0x36e>
 800ba10:	2a00      	cmp	r2, #0
 800ba12:	f000 8089 	beq.w	800bb28 <__kernel_rem_pio2+0x3a8>
 800ba16:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba1c:	f1ab 0b18 	sub.w	fp, fp, #24
 800ba20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d0f6      	beq.n	800ba16 <__kernel_rem_pio2+0x296>
 800ba28:	4658      	mov	r0, fp
 800ba2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ba88 <__kernel_rem_pio2+0x308>
 800ba2e:	f7ff fdeb 	bl	800b608 <scalbn>
 800ba32:	f108 0301 	add.w	r3, r8, #1
 800ba36:	00da      	lsls	r2, r3, #3
 800ba38:	9205      	str	r2, [sp, #20]
 800ba3a:	ec55 4b10 	vmov	r4, r5, d0
 800ba3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ba40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ba9c <__kernel_rem_pio2+0x31c>
 800ba44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ba48:	4646      	mov	r6, r8
 800ba4a:	f04f 0a00 	mov.w	sl, #0
 800ba4e:	2e00      	cmp	r6, #0
 800ba50:	f280 80cf 	bge.w	800bbf2 <__kernel_rem_pio2+0x472>
 800ba54:	4644      	mov	r4, r8
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	f2c0 80fd 	blt.w	800bc56 <__kernel_rem_pio2+0x4d6>
 800ba5c:	4b12      	ldr	r3, [pc, #72]	@ (800baa8 <__kernel_rem_pio2+0x328>)
 800ba5e:	461f      	mov	r7, r3
 800ba60:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ba62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba66:	9306      	str	r3, [sp, #24]
 800ba68:	f04f 0a00 	mov.w	sl, #0
 800ba6c:	f04f 0b00 	mov.w	fp, #0
 800ba70:	2600      	movs	r6, #0
 800ba72:	eba8 0504 	sub.w	r5, r8, r4
 800ba76:	e0e2      	b.n	800bc3e <__kernel_rem_pio2+0x4be>
 800ba78:	f04f 0902 	mov.w	r9, #2
 800ba7c:	e754      	b.n	800b928 <__kernel_rem_pio2+0x1a8>
 800ba7e:	bf00      	nop
	...
 800ba8c:	3ff00000 	.word	0x3ff00000
 800ba90:	0800c1c0 	.word	0x0800c1c0
 800ba94:	40200000 	.word	0x40200000
 800ba98:	3ff00000 	.word	0x3ff00000
 800ba9c:	3e700000 	.word	0x3e700000
 800baa0:	41700000 	.word	0x41700000
 800baa4:	3fe00000 	.word	0x3fe00000
 800baa8:	0800c180 	.word	0x0800c180
 800baac:	f854 3b04 	ldr.w	r3, [r4], #4
 800bab0:	b945      	cbnz	r5, 800bac4 <__kernel_rem_pio2+0x344>
 800bab2:	b123      	cbz	r3, 800babe <__kernel_rem_pio2+0x33e>
 800bab4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bab8:	f844 3c04 	str.w	r3, [r4, #-4]
 800babc:	2301      	movs	r3, #1
 800babe:	3201      	adds	r2, #1
 800bac0:	461d      	mov	r5, r3
 800bac2:	e738      	b.n	800b936 <__kernel_rem_pio2+0x1b6>
 800bac4:	1acb      	subs	r3, r1, r3
 800bac6:	e7f7      	b.n	800bab8 <__kernel_rem_pio2+0x338>
 800bac8:	f108 32ff 	add.w	r2, r8, #4294967295
 800bacc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bad6:	a90c      	add	r1, sp, #48	@ 0x30
 800bad8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800badc:	e739      	b.n	800b952 <__kernel_rem_pio2+0x1d2>
 800bade:	f108 32ff 	add.w	r2, r8, #4294967295
 800bae2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800baec:	e7f3      	b.n	800bad6 <__kernel_rem_pio2+0x356>
 800baee:	a90c      	add	r1, sp, #48	@ 0x30
 800baf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	430a      	orrs	r2, r1
 800baf8:	e787      	b.n	800ba0a <__kernel_rem_pio2+0x28a>
 800bafa:	3401      	adds	r4, #1
 800bafc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d0fa      	beq.n	800bafa <__kernel_rem_pio2+0x37a>
 800bb04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb0a:	eb0d 0503 	add.w	r5, sp, r3
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	aa20      	add	r2, sp, #128	@ 0x80
 800bb12:	4443      	add	r3, r8
 800bb14:	f108 0701 	add.w	r7, r8, #1
 800bb18:	3d98      	subs	r5, #152	@ 0x98
 800bb1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bb1e:	4444      	add	r4, r8
 800bb20:	42bc      	cmp	r4, r7
 800bb22:	da04      	bge.n	800bb2e <__kernel_rem_pio2+0x3ae>
 800bb24:	46a0      	mov	r8, r4
 800bb26:	e6a2      	b.n	800b86e <__kernel_rem_pio2+0xee>
 800bb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb2a:	2401      	movs	r4, #1
 800bb2c:	e7e6      	b.n	800bafc <__kernel_rem_pio2+0x37c>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bb34:	f7f4 fca2 	bl	800047c <__aeabi_i2d>
 800bb38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800be00 <__kernel_rem_pio2+0x680>
 800bb3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb48:	46b2      	mov	sl, r6
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	9b05      	ldr	r3, [sp, #20]
 800bb50:	4598      	cmp	r8, r3
 800bb52:	dd05      	ble.n	800bb60 <__kernel_rem_pio2+0x3e0>
 800bb54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb58:	3701      	adds	r7, #1
 800bb5a:	eca5 7b02 	vstmia	r5!, {d7}
 800bb5e:	e7df      	b.n	800bb20 <__kernel_rem_pio2+0x3a0>
 800bb60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bb64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bb68:	f7f4 fcf2 	bl	8000550 <__aeabi_dmul>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb74:	f7f4 fb36 	bl	80001e4 <__adddf3>
 800bb78:	f108 0801 	add.w	r8, r8, #1
 800bb7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb80:	e7e5      	b.n	800bb4e <__kernel_rem_pio2+0x3ce>
 800bb82:	f1cb 0000 	rsb	r0, fp, #0
 800bb86:	ec47 6b10 	vmov	d0, r6, r7
 800bb8a:	f7ff fd3d 	bl	800b608 <scalbn>
 800bb8e:	ec55 4b10 	vmov	r4, r5, d0
 800bb92:	4b9d      	ldr	r3, [pc, #628]	@ (800be08 <__kernel_rem_pio2+0x688>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 ff5f 	bl	8000a5c <__aeabi_dcmpge>
 800bb9e:	b300      	cbz	r0, 800bbe2 <__kernel_rem_pio2+0x462>
 800bba0:	4b9a      	ldr	r3, [pc, #616]	@ (800be0c <__kernel_rem_pio2+0x68c>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fcd2 	bl	8000550 <__aeabi_dmul>
 800bbac:	f7f4 ff80 	bl	8000ab0 <__aeabi_d2iz>
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	f7f4 fc63 	bl	800047c <__aeabi_i2d>
 800bbb6:	4b94      	ldr	r3, [pc, #592]	@ (800be08 <__kernel_rem_pio2+0x688>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f7f4 fcc9 	bl	8000550 <__aeabi_dmul>
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7f4 fb0b 	bl	80001e0 <__aeabi_dsub>
 800bbca:	f7f4 ff71 	bl	8000ab0 <__aeabi_d2iz>
 800bbce:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbd0:	f10b 0b18 	add.w	fp, fp, #24
 800bbd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bbd8:	f108 0801 	add.w	r8, r8, #1
 800bbdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bbe0:	e722      	b.n	800ba28 <__kernel_rem_pio2+0x2a8>
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7f4 ff63 	bl	8000ab0 <__aeabi_d2iz>
 800bbea:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bbf0:	e71a      	b.n	800ba28 <__kernel_rem_pio2+0x2a8>
 800bbf2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bbf8:	f7f4 fc40 	bl	800047c <__aeabi_i2d>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fca6 	bl	8000550 <__aeabi_dmul>
 800bc04:	4652      	mov	r2, sl
 800bc06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bc0a:	465b      	mov	r3, fp
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 fc9e 	bl	8000550 <__aeabi_dmul>
 800bc14:	3e01      	subs	r6, #1
 800bc16:	4604      	mov	r4, r0
 800bc18:	460d      	mov	r5, r1
 800bc1a:	e718      	b.n	800ba4e <__kernel_rem_pio2+0x2ce>
 800bc1c:	9906      	ldr	r1, [sp, #24]
 800bc1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800bc22:	9106      	str	r1, [sp, #24]
 800bc24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800bc28:	f7f4 fc92 	bl	8000550 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4650      	mov	r0, sl
 800bc32:	4659      	mov	r1, fp
 800bc34:	f7f4 fad6 	bl	80001e4 <__adddf3>
 800bc38:	3601      	adds	r6, #1
 800bc3a:	4682      	mov	sl, r0
 800bc3c:	468b      	mov	fp, r1
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	429e      	cmp	r6, r3
 800bc42:	dc01      	bgt.n	800bc48 <__kernel_rem_pio2+0x4c8>
 800bc44:	42b5      	cmp	r5, r6
 800bc46:	dae9      	bge.n	800bc1c <__kernel_rem_pio2+0x49c>
 800bc48:	ab48      	add	r3, sp, #288	@ 0x120
 800bc4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bc4e:	e9c5 ab00 	strd	sl, fp, [r5]
 800bc52:	3c01      	subs	r4, #1
 800bc54:	e6ff      	b.n	800ba56 <__kernel_rem_pio2+0x2d6>
 800bc56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	dc0b      	bgt.n	800bc74 <__kernel_rem_pio2+0x4f4>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dc39      	bgt.n	800bcd4 <__kernel_rem_pio2+0x554>
 800bc60:	d05d      	beq.n	800bd1e <__kernel_rem_pio2+0x59e>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	f003 0007 	and.w	r0, r3, #7
 800bc68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800bc6c:	ecbd 8b02 	vpop	{d8}
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d1f3      	bne.n	800bc62 <__kernel_rem_pio2+0x4e2>
 800bc7a:	9b05      	ldr	r3, [sp, #20]
 800bc7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc80:	eb0d 0403 	add.w	r4, sp, r3
 800bc84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800bc88:	4625      	mov	r5, r4
 800bc8a:	46c2      	mov	sl, r8
 800bc8c:	f1ba 0f00 	cmp.w	sl, #0
 800bc90:	f1a5 0508 	sub.w	r5, r5, #8
 800bc94:	dc6b      	bgt.n	800bd6e <__kernel_rem_pio2+0x5ee>
 800bc96:	4645      	mov	r5, r8
 800bc98:	2d01      	cmp	r5, #1
 800bc9a:	f1a4 0408 	sub.w	r4, r4, #8
 800bc9e:	f300 8087 	bgt.w	800bdb0 <__kernel_rem_pio2+0x630>
 800bca2:	9c05      	ldr	r4, [sp, #20]
 800bca4:	ab48      	add	r3, sp, #288	@ 0x120
 800bca6:	441c      	add	r4, r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	f1b8 0f01 	cmp.w	r8, #1
 800bcb0:	f300 809c 	bgt.w	800bdec <__kernel_rem_pio2+0x66c>
 800bcb4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bcb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800bcbc:	f1b9 0f00 	cmp.w	r9, #0
 800bcc0:	f040 80a6 	bne.w	800be10 <__kernel_rem_pio2+0x690>
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	e9c3 7800 	strd	r7, r8, [r3]
 800bcca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bcce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bcd2:	e7c6      	b.n	800bc62 <__kernel_rem_pio2+0x4e2>
 800bcd4:	9d05      	ldr	r5, [sp, #20]
 800bcd6:	ab48      	add	r3, sp, #288	@ 0x120
 800bcd8:	441d      	add	r5, r3
 800bcda:	4644      	mov	r4, r8
 800bcdc:	2000      	movs	r0, #0
 800bcde:	2100      	movs	r1, #0
 800bce0:	2c00      	cmp	r4, #0
 800bce2:	da35      	bge.n	800bd50 <__kernel_rem_pio2+0x5d0>
 800bce4:	f1b9 0f00 	cmp.w	r9, #0
 800bce8:	d038      	beq.n	800bd5c <__kernel_rem_pio2+0x5dc>
 800bcea:	4602      	mov	r2, r0
 800bcec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcf0:	9c04      	ldr	r4, [sp, #16]
 800bcf2:	e9c4 2300 	strd	r2, r3, [r4]
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bcfe:	f7f4 fa6f 	bl	80001e0 <__aeabi_dsub>
 800bd02:	ad4a      	add	r5, sp, #296	@ 0x128
 800bd04:	2401      	movs	r4, #1
 800bd06:	45a0      	cmp	r8, r4
 800bd08:	da2b      	bge.n	800bd62 <__kernel_rem_pio2+0x5e2>
 800bd0a:	f1b9 0f00 	cmp.w	r9, #0
 800bd0e:	d002      	beq.n	800bd16 <__kernel_rem_pio2+0x596>
 800bd10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd14:	4619      	mov	r1, r3
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bd1c:	e7a1      	b.n	800bc62 <__kernel_rem_pio2+0x4e2>
 800bd1e:	9c05      	ldr	r4, [sp, #20]
 800bd20:	ab48      	add	r3, sp, #288	@ 0x120
 800bd22:	441c      	add	r4, r3
 800bd24:	2000      	movs	r0, #0
 800bd26:	2100      	movs	r1, #0
 800bd28:	f1b8 0f00 	cmp.w	r8, #0
 800bd2c:	da09      	bge.n	800bd42 <__kernel_rem_pio2+0x5c2>
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	d002      	beq.n	800bd3a <__kernel_rem_pio2+0x5ba>
 800bd34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd38:	4619      	mov	r1, r3
 800bd3a:	9b04      	ldr	r3, [sp, #16]
 800bd3c:	e9c3 0100 	strd	r0, r1, [r3]
 800bd40:	e78f      	b.n	800bc62 <__kernel_rem_pio2+0x4e2>
 800bd42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd46:	f7f4 fa4d 	bl	80001e4 <__adddf3>
 800bd4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd4e:	e7eb      	b.n	800bd28 <__kernel_rem_pio2+0x5a8>
 800bd50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bd54:	f7f4 fa46 	bl	80001e4 <__adddf3>
 800bd58:	3c01      	subs	r4, #1
 800bd5a:	e7c1      	b.n	800bce0 <__kernel_rem_pio2+0x560>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	e7c6      	b.n	800bcf0 <__kernel_rem_pio2+0x570>
 800bd62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bd66:	f7f4 fa3d 	bl	80001e4 <__adddf3>
 800bd6a:	3401      	adds	r4, #1
 800bd6c:	e7cb      	b.n	800bd06 <__kernel_rem_pio2+0x586>
 800bd6e:	ed95 7b00 	vldr	d7, [r5]
 800bd72:	ed8d 7b00 	vstr	d7, [sp]
 800bd76:	ed95 7b02 	vldr	d7, [r5, #8]
 800bd7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd7e:	ec53 2b17 	vmov	r2, r3, d7
 800bd82:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd86:	f7f4 fa2d 	bl	80001e4 <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd96:	f7f4 fa23 	bl	80001e0 <__aeabi_dsub>
 800bd9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd9e:	f7f4 fa21 	bl	80001e4 <__adddf3>
 800bda2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bda6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bdaa:	e9c5 6700 	strd	r6, r7, [r5]
 800bdae:	e76d      	b.n	800bc8c <__kernel_rem_pio2+0x50c>
 800bdb0:	ed94 7b00 	vldr	d7, [r4]
 800bdb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bdb8:	ec51 0b17 	vmov	r0, r1, d7
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	465b      	mov	r3, fp
 800bdc0:	ed8d 7b00 	vstr	d7, [sp]
 800bdc4:	f7f4 fa0e 	bl	80001e4 <__adddf3>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4606      	mov	r6, r0
 800bdce:	460f      	mov	r7, r1
 800bdd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd4:	f7f4 fa04 	bl	80001e0 <__aeabi_dsub>
 800bdd8:	4652      	mov	r2, sl
 800bdda:	465b      	mov	r3, fp
 800bddc:	f7f4 fa02 	bl	80001e4 <__adddf3>
 800bde0:	3d01      	subs	r5, #1
 800bde2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bde6:	e9c4 6700 	strd	r6, r7, [r4]
 800bdea:	e755      	b.n	800bc98 <__kernel_rem_pio2+0x518>
 800bdec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bdf0:	f7f4 f9f8 	bl	80001e4 <__adddf3>
 800bdf4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdf8:	e758      	b.n	800bcac <__kernel_rem_pio2+0x52c>
 800bdfa:	bf00      	nop
 800bdfc:	f3af 8000 	nop.w
	...
 800be08:	41700000 	.word	0x41700000
 800be0c:	3e700000 	.word	0x3e700000
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	9a04      	ldr	r2, [sp, #16]
 800be14:	601f      	str	r7, [r3, #0]
 800be16:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800be1a:	605c      	str	r4, [r3, #4]
 800be1c:	609d      	str	r5, [r3, #8]
 800be1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be22:	60d3      	str	r3, [r2, #12]
 800be24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be28:	6110      	str	r0, [r2, #16]
 800be2a:	6153      	str	r3, [r2, #20]
 800be2c:	e719      	b.n	800bc62 <__kernel_rem_pio2+0x4e2>
 800be2e:	bf00      	nop

0800be30 <floor>:
 800be30:	ec51 0b10 	vmov	r0, r1, d0
 800be34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800be40:	2e13      	cmp	r6, #19
 800be42:	460c      	mov	r4, r1
 800be44:	4605      	mov	r5, r0
 800be46:	4680      	mov	r8, r0
 800be48:	dc34      	bgt.n	800beb4 <floor+0x84>
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	da17      	bge.n	800be7e <floor+0x4e>
 800be4e:	a332      	add	r3, pc, #200	@ (adr r3, 800bf18 <floor+0xe8>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f7f4 f9c6 	bl	80001e4 <__adddf3>
 800be58:	2200      	movs	r2, #0
 800be5a:	2300      	movs	r3, #0
 800be5c:	f7f4 fe08 	bl	8000a70 <__aeabi_dcmpgt>
 800be60:	b150      	cbz	r0, 800be78 <floor+0x48>
 800be62:	2c00      	cmp	r4, #0
 800be64:	da55      	bge.n	800bf12 <floor+0xe2>
 800be66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800be6a:	432c      	orrs	r4, r5
 800be6c:	2500      	movs	r5, #0
 800be6e:	42ac      	cmp	r4, r5
 800be70:	4c2b      	ldr	r4, [pc, #172]	@ (800bf20 <floor+0xf0>)
 800be72:	bf08      	it	eq
 800be74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800be78:	4621      	mov	r1, r4
 800be7a:	4628      	mov	r0, r5
 800be7c:	e023      	b.n	800bec6 <floor+0x96>
 800be7e:	4f29      	ldr	r7, [pc, #164]	@ (800bf24 <floor+0xf4>)
 800be80:	4137      	asrs	r7, r6
 800be82:	ea01 0307 	and.w	r3, r1, r7
 800be86:	4303      	orrs	r3, r0
 800be88:	d01d      	beq.n	800bec6 <floor+0x96>
 800be8a:	a323      	add	r3, pc, #140	@ (adr r3, 800bf18 <floor+0xe8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 f9a8 	bl	80001e4 <__adddf3>
 800be94:	2200      	movs	r2, #0
 800be96:	2300      	movs	r3, #0
 800be98:	f7f4 fdea 	bl	8000a70 <__aeabi_dcmpgt>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0eb      	beq.n	800be78 <floor+0x48>
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	bfbe      	ittt	lt
 800bea4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bea8:	4133      	asrlt	r3, r6
 800beaa:	18e4      	addlt	r4, r4, r3
 800beac:	ea24 0407 	bic.w	r4, r4, r7
 800beb0:	2500      	movs	r5, #0
 800beb2:	e7e1      	b.n	800be78 <floor+0x48>
 800beb4:	2e33      	cmp	r6, #51	@ 0x33
 800beb6:	dd0a      	ble.n	800bece <floor+0x9e>
 800beb8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bebc:	d103      	bne.n	800bec6 <floor+0x96>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	f7f4 f98f 	bl	80001e4 <__adddf3>
 800bec6:	ec41 0b10 	vmov	d0, r0, r1
 800beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bece:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bed2:	f04f 37ff 	mov.w	r7, #4294967295
 800bed6:	40df      	lsrs	r7, r3
 800bed8:	4207      	tst	r7, r0
 800beda:	d0f4      	beq.n	800bec6 <floor+0x96>
 800bedc:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf18 <floor+0xe8>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f97f 	bl	80001e4 <__adddf3>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f7f4 fdc1 	bl	8000a70 <__aeabi_dcmpgt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0c2      	beq.n	800be78 <floor+0x48>
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	da0a      	bge.n	800bf0c <floor+0xdc>
 800bef6:	2e14      	cmp	r6, #20
 800bef8:	d101      	bne.n	800befe <floor+0xce>
 800befa:	3401      	adds	r4, #1
 800befc:	e006      	b.n	800bf0c <floor+0xdc>
 800befe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bf02:	2301      	movs	r3, #1
 800bf04:	40b3      	lsls	r3, r6
 800bf06:	441d      	add	r5, r3
 800bf08:	4545      	cmp	r5, r8
 800bf0a:	d3f6      	bcc.n	800befa <floor+0xca>
 800bf0c:	ea25 0507 	bic.w	r5, r5, r7
 800bf10:	e7b2      	b.n	800be78 <floor+0x48>
 800bf12:	2500      	movs	r5, #0
 800bf14:	462c      	mov	r4, r5
 800bf16:	e7af      	b.n	800be78 <floor+0x48>
 800bf18:	8800759c 	.word	0x8800759c
 800bf1c:	7e37e43c 	.word	0x7e37e43c
 800bf20:	bff00000 	.word	0xbff00000
 800bf24:	000fffff 	.word	0x000fffff

0800bf28 <_init>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr

0800bf34 <_fini>:
 800bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf36:	bf00      	nop
 800bf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3a:	bc08      	pop	{r3}
 800bf3c:	469e      	mov	lr, r3
 800bf3e:	4770      	bx	lr
