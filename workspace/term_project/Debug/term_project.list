
term_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f8  080065f8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006600  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000060  08006660  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08006660  00008518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010720  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002617  00000000  00000000  000187b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0001adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  0001bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017033  00000000  00000000  0001c74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122de  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad40  00000000  00000000  00045a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e079e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041dc  00000000  00000000  000e07e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e49c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006480 	.word	0x08006480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006480 	.word	0x08006480

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <enable_enc>:
 */

#include <encoder_driver.h>

void enable_enc(Encoder_DriverTypeDef* enc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(enc->tim_handle, TIM_CHANNEL_ALL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	213c      	movs	r1, #60	@ 0x3c
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fc06 	bl	800457c <HAL_TIM_Encoder_Start>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <set_zero>:
{
	HAL_TIM_Encoder_Stop(enc->tim_handle, TIM_CHANNEL_ALL);
}

void set_zero(Encoder_DriverTypeDef* enc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	enc->tot_count = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
	enc->pos = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <read_count>:

int32_t read_count(Encoder_DriverTypeDef* enc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	enc->curr_count = __HAL_TIM_GET_COUNTER(enc->tim_handle);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60da      	str	r2, [r3, #12]
	int32_t dcount = (enc->curr_count)-(enc->prev_count);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	60fb      	str	r3, [r7, #12]
	if(dcount <= -((enc->AR)+1)/2){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	0fda      	lsrs	r2, r3, #31
 8000dc0:	4413      	add	r3, r2
 8000dc2:	105b      	asrs	r3, r3, #1
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	dc18      	bgt.n	8000dfe <read_count+0x66>
		enc->tot_count += ((enc->AR)+1)+dcount;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695a      	ldr	r2, [r3, #20]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	1c59      	adds	r1, r3, #1
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	440b      	add	r3, r1
 8000dda:	441a      	add	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	615a      	str	r2, [r3, #20]
		enc->pos += (((enc->AR)+1)+dcount)/4;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	699a      	ldr	r2, [r3, #24]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	1c59      	adds	r1, r3, #1
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	440b      	add	r3, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	da00      	bge.n	8000df4 <read_count+0x5c>
 8000df2:	3303      	adds	r3, #3
 8000df4:	109b      	asrs	r3, r3, #2
 8000df6:	441a      	add	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
 8000dfc:	e032      	b.n	8000e64 <read_count+0xcc>
	}
	else if(dcount >= ((enc->AR)+1)/2){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	3301      	adds	r3, #1
 8000e04:	0fda      	lsrs	r2, r3, #31
 8000e06:	4413      	add	r3, r2
 8000e08:	105b      	asrs	r3, r3, #1
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	db18      	blt.n	8000e44 <read_count+0xac>
		enc->tot_count += dcount-((enc->AR)+1);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	68f9      	ldr	r1, [r7, #12]
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	441a      	add	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	615a      	str	r2, [r3, #20]
		enc->pos += (dcount-((enc->AR)+1))/4;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	68f9      	ldr	r1, [r7, #12]
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	da00      	bge.n	8000e3a <read_count+0xa2>
 8000e38:	3303      	adds	r3, #3
 8000e3a:	109b      	asrs	r3, r3, #2
 8000e3c:	441a      	add	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	619a      	str	r2, [r3, #24]
 8000e42:	e00f      	b.n	8000e64 <read_count+0xcc>
	}
	else{
		enc->tot_count += dcount;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	615a      	str	r2, [r3, #20]
		enc->pos += dcount/4;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699a      	ldr	r2, [r3, #24]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da00      	bge.n	8000e5c <read_count+0xc4>
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	109b      	asrs	r3, r3, #2
 8000e5e:	441a      	add	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	619a      	str	r2, [r3, #24]
	}
	enc->prev_count = enc->curr_count;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
	return enc->tot_count;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	0000      	movs	r0, r0
	...

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b0a0      	sub	sp, #128	@ 0x80
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f001 f959 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f9c5 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 fc8d 	bl	80017ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000e92:	f000 fc6b 	bl	800176c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e96:	f000 fa27 	bl	80012e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e9a:	f000 faa1 	bl	80013e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e9e:	f000 faef 	bl	8001480 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ea2:	f000 fbc1 	bl	8001628 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000ea6:	f000 fb6b 	bl	8001580 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000eaa:	f000 fc35 	bl	8001718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initializing the motor driver structure and enabling the motor
  Motor_DriverTypeDef mot = { .tim_handle = &htim2,
 8000eae:	4baa      	ldr	r3, [pc, #680]	@ (8001158 <main+0x2d8>)
 8000eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000eba:	2308      	movs	r3, #8
 8000ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800115c <main+0x2dc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	677b      	str	r3, [r7, #116]	@ 0x74
  	  	 	  	  	  	  	  .tim_channel1 = TIM_CHANNEL_1,
							  .tim_channel2 = TIM_CHANNEL_2,
  	  	 	  	  	  	  	  .tim_channel3 = TIM_CHANNEL_3,	// Unused
							  .tim_channel4 = TIM_CHANNEL_4,	// Unused
							  .pulse = pulse				 };
  enable_mot(&mot,1);
 8000ec8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fd5a 	bl	8001988 <enable_mot>
  // Initially setting the PWM to 0 in case they had been previously been set
  mot_num = 1;
 8000ed4:	4ba2      	ldr	r3, [pc, #648]	@ (8001160 <main+0x2e0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
  set_PWM_percent(&mot, mot_num, 0);
 8000eda:	4ba1      	ldr	r3, [pc, #644]	@ (8001160 <main+0x2e0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd7e 	bl	80019e8 <set_PWM_percent>


  // Initializing the Radio Receiver structure and enabling the channel for inputs
  RadioReciever_DriverTypeDef rad = { .tim_handle = &htim1,
 8000eec:	4b9d      	ldr	r3, [pc, #628]	@ (8001164 <main+0x2e4>)
 8000eee:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									   .IC_Diff = 0,
									   .pulse_width = 0,
									   .tol = 0.1,
									   .pulse_recieve_flag = 0,
									   .rise_flag = 0					};
  enable_rad(&rad);
 8000f00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fdf2 	bl	8001aee <enable_rad>


  // Initializing the Photoresistors' structure
  uint32_t adc_buff[4];

  Photoresistor_DriverTypeDef photo = { .adc_handle = &hadc1,
 8000f0a:	4b97      	ldr	r3, [pc, #604]	@ (8001168 <main+0x2e8>)
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0e:	4b97      	ldr	r3, [pc, #604]	@ (800116c <main+0x2ec>)
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	  	  	  	  	  	  	  	  	  	.dma_handle = &hdma_adc1,
  	  	  	  	  	  	  	  	  	    .adc_results = adc_buff   };


  // Initializing the Encoder structure
  Encoder_DriverTypeDef enc = { .tim_handle = &htim4,
 8000f18:	4b95      	ldr	r3, [pc, #596]	@ (8001170 <main+0x2f0>)
 8000f1a:	1d3c      	adds	r4, r7, #4
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								.curr_count = 0,
								.prev_count = 0,
								.tot_count = 0,
								.pos = 0,
								.AR = 65535					   };
  enable_enc(&enc);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff15 	bl	8000d5c <enable_enc>
  set_zero(&enc);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff1f 	bl	8000d78 <set_zero>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  prev_time = HAL_GetTick();
 8000f3a:	f001 f965 	bl	8002208 <HAL_GetTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a8c      	ldr	r2, [pc, #560]	@ (8001174 <main+0x2f4>)
 8000f42:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  // Testing Radio Receiver
	  // Reading the pulse
	  if (rad_edge_flag){
 8000f44:	4b8c      	ldr	r3, [pc, #560]	@ (8001178 <main+0x2f8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <main+0xde>
		  read_pulse(&rad, &htim_cb);
 8000f4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f50:	498a      	ldr	r1, [pc, #552]	@ (800117c <main+0x2fc>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fe2c 	bl	8001bb0 <read_pulse>
		  rad_edge_flag = 0;
 8000f58:	4b87      	ldr	r3, [pc, #540]	@ (8001178 <main+0x2f8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
	  }


	  // Testing Motor
	  // Calculating duty count 1 and setting motor 1 PWM
	  mot_num = 1;
 8000f5e:	4b80      	ldr	r3, [pc, #512]	@ (8001160 <main+0x2e0>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	  duty_count = pulse_to_PWM(&rad);
 8000f64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fc7d 	bl	8001868 <pulse_to_PWM>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a83      	ldr	r2, [pc, #524]	@ (8001180 <main+0x300>)
 8000f72:	6013      	str	r3, [r2, #0]
	  duty_percent = (duty_count*100)/pulse;
 8000f74:	4b82      	ldr	r3, [pc, #520]	@ (8001180 <main+0x300>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2264      	movs	r2, #100	@ 0x64
 8000f7a:	fb03 f202 	mul.w	r2, r3, r2
 8000f7e:	4b77      	ldr	r3, [pc, #476]	@ (800115c <main+0x2dc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f86:	4a7f      	ldr	r2, [pc, #508]	@ (8001184 <main+0x304>)
 8000f88:	6013      	str	r3, [r2, #0]
	  set_PWM(&mot, mot_num, duty_count);
 8000f8a:	4b75      	ldr	r3, [pc, #468]	@ (8001160 <main+0x2e0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4b7b      	ldr	r3, [pc, #492]	@ (8001180 <main+0x300>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fd41 	bl	8001a20 <set_PWM>

	  //Printing out values

	  curr_time = HAL_GetTick();
 8000f9e:	f001 f933 	bl	8002208 <HAL_GetTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a78      	ldr	r2, [pc, #480]	@ (8001188 <main+0x308>)
 8000fa6:	6013      	str	r3, [r2, #0]
	  if (curr_time - prev_time >= 1000){
 8000fa8:	4b77      	ldr	r3, [pc, #476]	@ (8001188 <main+0x308>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b71      	ldr	r3, [pc, #452]	@ (8001174 <main+0x2f4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fb6:	f0c0 80ba 	bcc.w	800112e <main+0x2ae>

		  sprintf(my_message,"Photoresistor 1 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo1*3.3/4095), photo1);
 8000fba:	4b74      	ldr	r3, [pc, #464]	@ (800118c <main+0x30c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faa8 	bl	8000514 <__aeabi_ui2d>
 8000fc4:	a360      	add	r3, pc, #384	@ (adr r3, 8001148 <main+0x2c8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb1d 	bl	8000608 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	a35e      	add	r3, pc, #376	@ (adr r3, 8001150 <main+0x2d0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd20 	bl	8000a2c <__aeabi_d2uiz>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b67      	ldr	r3, [pc, #412]	@ (800118c <main+0x30c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4967      	ldr	r1, [pc, #412]	@ (8001190 <main+0x310>)
 8000ff4:	4867      	ldr	r0, [pc, #412]	@ (8001194 <main+0x314>)
 8000ff6:	f004 fda3 	bl	8005b40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 8000ffa:	4866      	ldr	r0, [pc, #408]	@ (8001194 <main+0x314>)
 8000ffc:	f7ff f8f0 	bl	80001e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	4963      	ldr	r1, [pc, #396]	@ (8001194 <main+0x314>)
 8001008:	4863      	ldr	r0, [pc, #396]	@ (8001198 <main+0x318>)
 800100a:	f004 f9dd 	bl	80053c8 <HAL_UART_Transmit>
		  sprintf(my_message,"Photoresistor 2 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo2*3.3/4095), photo2);
 800100e:	4b63      	ldr	r3, [pc, #396]	@ (800119c <main+0x31c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa7e 	bl	8000514 <__aeabi_ui2d>
 8001018:	a34b      	add	r3, pc, #300	@ (adr r3, 8001148 <main+0x2c8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faf3 	bl	8000608 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	a349      	add	r3, pc, #292	@ (adr r3, 8001150 <main+0x2d0>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc14 	bl	800085c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fcf6 	bl	8000a2c <__aeabi_d2uiz>
 8001040:	4602      	mov	r2, r0
 8001042:	4b56      	ldr	r3, [pc, #344]	@ (800119c <main+0x31c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4956      	ldr	r1, [pc, #344]	@ (80011a0 <main+0x320>)
 8001048:	4852      	ldr	r0, [pc, #328]	@ (8001194 <main+0x314>)
 800104a:	f004 fd79 	bl	8005b40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 800104e:	4851      	ldr	r0, [pc, #324]	@ (8001194 <main+0x314>)
 8001050:	f7ff f8c6 	bl	80001e0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	494e      	ldr	r1, [pc, #312]	@ (8001194 <main+0x314>)
 800105c:	484e      	ldr	r0, [pc, #312]	@ (8001198 <main+0x318>)
 800105e:	f004 f9b3 	bl	80053c8 <HAL_UART_Transmit>
		  sprintf(my_message,"Photoresistor 3 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo3*3.3/4095), photo3);
 8001062:	4b50      	ldr	r3, [pc, #320]	@ (80011a4 <main+0x324>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa54 	bl	8000514 <__aeabi_ui2d>
 800106c:	a336      	add	r3, pc, #216	@ (adr r3, 8001148 <main+0x2c8>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fac9 	bl	8000608 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	a334      	add	r3, pc, #208	@ (adr r3, 8001150 <main+0x2d0>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fccc 	bl	8000a2c <__aeabi_d2uiz>
 8001094:	4602      	mov	r2, r0
 8001096:	4b43      	ldr	r3, [pc, #268]	@ (80011a4 <main+0x324>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4943      	ldr	r1, [pc, #268]	@ (80011a8 <main+0x328>)
 800109c:	483d      	ldr	r0, [pc, #244]	@ (8001194 <main+0x314>)
 800109e:	f004 fd4f 	bl	8005b40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 80010a2:	483c      	ldr	r0, [pc, #240]	@ (8001194 <main+0x314>)
 80010a4:	f7ff f89c 	bl	80001e0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	4939      	ldr	r1, [pc, #228]	@ (8001194 <main+0x314>)
 80010b0:	4839      	ldr	r0, [pc, #228]	@ (8001198 <main+0x318>)
 80010b2:	f004 f989 	bl	80053c8 <HAL_UART_Transmit>
		  sprintf(my_message,"Photoresistor 4 voltage: %ld (V) (or %ld).\r\n", (uint32_t) (photo4*3.3/4095), photo4);
 80010b6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <main+0x32c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa2a 	bl	8000514 <__aeabi_ui2d>
 80010c0:	a321      	add	r3, pc, #132	@ (adr r3, 8001148 <main+0x2c8>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa9f 	bl	8000608 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001150 <main+0x2d0>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fbc0 	bl	800085c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fca2 	bl	8000a2c <__aeabi_d2uiz>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <main+0x32c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4930      	ldr	r1, [pc, #192]	@ (80011b0 <main+0x330>)
 80010f0:	4828      	ldr	r0, [pc, #160]	@ (8001194 <main+0x314>)
 80010f2:	f004 fd25 	bl	8005b40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 100);
 80010f6:	4827      	ldr	r0, [pc, #156]	@ (8001194 <main+0x314>)
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	2364      	movs	r3, #100	@ 0x64
 8001102:	4924      	ldr	r1, [pc, #144]	@ (8001194 <main+0x314>)
 8001104:	4824      	ldr	r0, [pc, #144]	@ (8001198 <main+0x318>)
 8001106:	f004 f95f 	bl	80053c8 <HAL_UART_Transmit>

		  //sprintf(my_message,"Duty Cycle 1 is: %ld (%ld percent).\r\n", duty_count1, duty_percent1);
		  //HAL_UART_Transmit(&huart6, (uint8_t*) my_message, strlen(my_message), 10);

		  sprintf(my_message,"\r\n");
 800110a:	492a      	ldr	r1, [pc, #168]	@ (80011b4 <main+0x334>)
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <main+0x314>)
 800110e:	f004 fd17 	bl	8005b40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), 10);
 8001112:	4820      	ldr	r0, [pc, #128]	@ (8001194 <main+0x314>)
 8001114:	f7ff f864 	bl	80001e0 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	230a      	movs	r3, #10
 800111e:	491d      	ldr	r1, [pc, #116]	@ (8001194 <main+0x314>)
 8001120:	481d      	ldr	r0, [pc, #116]	@ (8001198 <main+0x318>)
 8001122:	f004 f951 	bl	80053c8 <HAL_UART_Transmit>

		  prev_time = curr_time;
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <main+0x308>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <main+0x2f4>)
 800112c:	6013      	str	r3, [r2, #0]
	  }


	  // Testing Photoresistor ADC values
	  if (adc_conversion_flag == 0){
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <main+0x338>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d142      	bne.n	80011bc <main+0x33c>
		  // Starts the DMA to get ADC values
		  start_get_adc_values(&photo);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fcbb 	bl	8001ab6 <start_get_adc_values>
		  adc_conversion_flag = 1;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <main+0x338>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e056      	b.n	80011f6 <main+0x376>
 8001148:	66666666 	.word	0x66666666
 800114c:	400a6666 	.word	0x400a6666
 8001150:	00000000 	.word	0x00000000
 8001154:	40affe00 	.word	0x40affe00
 8001158:	2000016c 	.word	0x2000016c
 800115c:	20000000 	.word	0x20000000
 8001160:	20000298 	.word	0x20000298
 8001164:	0800655c 	.word	0x0800655c
 8001168:	2000007c 	.word	0x2000007c
 800116c:	200000c4 	.word	0x200000c4
 8001170:	0800657c 	.word	0x0800657c
 8001174:	200002ac 	.word	0x200002ac
 8001178:	200003c4 	.word	0x200003c4
 800117c:	2000037c 	.word	0x2000037c
 8001180:	20000294 	.word	0x20000294
 8001184:	20000290 	.word	0x20000290
 8001188:	200002b0 	.word	0x200002b0
 800118c:	2000029c 	.word	0x2000029c
 8001190:	08006498 	.word	0x08006498
 8001194:	200002b4 	.word	0x200002b4
 8001198:	20000244 	.word	0x20000244
 800119c:	200002a0 	.word	0x200002a0
 80011a0:	080064c8 	.word	0x080064c8
 80011a4:	200002a4 	.word	0x200002a4
 80011a8:	080064f8 	.word	0x080064f8
 80011ac:	200002a8 	.word	0x200002a8
 80011b0:	08006528 	.word	0x08006528
 80011b4:	08006558 	.word	0x08006558
 80011b8:	200003c5 	.word	0x200003c5
	  }
	  else if (adc_conversion_flag == 2){
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <main+0x384>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d118      	bne.n	80011f6 <main+0x376>
		  // Waits until the DMA has finished collecting values into the buffer after the interrupt is ran to return values
		  uint32_t* adc_results = get_adc_values(&photo);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fc84 	bl	8001ad6 <get_adc_values>
 80011ce:	67f8      	str	r0, [r7, #124]	@ 0x7c
		  photo1 = adc_results[0];
 80011d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <main+0x388>)
 80011d6:	6013      	str	r3, [r2, #0]
		  photo2 = adc_results[1];
 80011d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <main+0x38c>)
 80011de:	6013      	str	r3, [r2, #0]
		  photo3 = adc_results[2];
 80011e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <main+0x390>)
 80011e6:	6013      	str	r3, [r2, #0]
		  photo4 = adc_results[3];
 80011e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <main+0x394>)
 80011ee:	6013      	str	r3, [r2, #0]
		  adc_conversion_flag = 0;
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <main+0x384>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
	  }

	  // Testing Encoder Outputs
	  int32_t count = read_count(&enc);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fdcd 	bl	8000d98 <read_count>
 80011fe:	67b8      	str	r0, [r7, #120]	@ 0x78
  {
 8001200:	e6a0      	b.n	8000f44 <main+0xc4>
 8001202:	bf00      	nop
 8001204:	200003c5 	.word	0x200003c5
 8001208:	2000029c 	.word	0x2000029c
 800120c:	200002a0 	.word	0x200002a0
 8001210:	200002a4 	.word	0x200002a4
 8001214:	200002a8 	.word	0x200002a8

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	@ 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fcaa 	bl	8005b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <SystemClock_Config+0xc8>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a20      	ldr	r2, [pc, #128]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <SystemClock_Config+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001288:	2304      	movs	r3, #4
 800128a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800128c:	2360      	movs	r3, #96	@ 0x60
 800128e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f002 f9bd 	bl	800361c <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a8:	f000 fb68 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fc1f 	bl	8003b0c <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d4:	f000 fb52 	bl	800197c <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	@ 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012fa:	4b36      	ldr	r3, [pc, #216]	@ (80013d4 <MX_ADC1_Init+0xec>)
 80012fc:	4a36      	ldr	r2, [pc, #216]	@ (80013d8 <MX_ADC1_Init+0xf0>)
 80012fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001302:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001306:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001310:	2201      	movs	r2, #1
 8001312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001314:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001316:	2201      	movs	r2, #1
 8001318:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001322:	4b2c      	ldr	r3, [pc, #176]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001328:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800132a:	4a2c      	ldr	r2, [pc, #176]	@ (80013dc <MX_ADC1_Init+0xf4>)
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132e:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001336:	2204      	movs	r2, #4
 8001338:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001344:	2201      	movs	r2, #1
 8001346:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001348:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800134a:	f000 ff69 	bl	8002220 <HAL_ADC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001354:	f000 fb12 	bl	800197c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001358:	2304      	movs	r3, #4
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <MX_ADC1_Init+0xec>)
 800136a:	f001 f8a1 	bl	80024b0 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 fb02 	bl	800197c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001378:	2305      	movs	r3, #5
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <MX_ADC1_Init+0xec>)
 8001386:	f001 f893 	bl	80024b0 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001390:	f000 faf4 	bl	800197c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001394:	2306      	movs	r3, #6
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001398:	2303      	movs	r3, #3
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <MX_ADC1_Init+0xec>)
 80013a2:	f001 f885 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013ac:	f000 fae6 	bl	800197c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_ADC1_Init+0xec>)
 80013be:	f001 f877 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80013c8:	f000 fad8 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000007c 	.word	0x2000007c
 80013d8:	40012000 	.word	0x40012000
 80013dc:	0f000001 	.word	0x0f000001

080013e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM1_Init+0x98>)
 80013fe:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <MX_TIM1_Init+0x9c>)
 8001400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001404:	225f      	movs	r2, #95	@ 0x5f
 8001406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_TIM1_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001414:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_TIM1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	@ (8001478 <MX_TIM1_Init+0x98>)
 800142a:	f002 fd8f 	bl	8003f4c <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001434:	f000 faa2 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001446:	f003 fad9 	bl	80049fc <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001450:	f000 fa94 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_TIM1_Init+0x98>)
 8001462:	f003 fed7 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 fa86 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000124 	.word	0x20000124
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	@ 0x38
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014c6:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80014ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014da:	f002 fd37 	bl	8003f4c <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014e4:	f000 fa4a 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4821      	ldr	r0, [pc, #132]	@ (800157c <MX_TIM2_Init+0xfc>)
 80014f6:	f003 fa81 	bl	80049fc <HAL_TIM_ConfigClockSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001500:	f000 fa3c 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001504:	481d      	ldr	r0, [pc, #116]	@ (800157c <MX_TIM2_Init+0xfc>)
 8001506:	f002 fd70 	bl	8003fea <HAL_TIM_PWM_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001510:	f000 fa34 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	4619      	mov	r1, r3
 8001522:	4816      	ldr	r0, [pc, #88]	@ (800157c <MX_TIM2_Init+0xfc>)
 8001524:	f003 fe76 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800152e:	f000 fa25 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	@ 0x60
 8001534:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800153a:	2302      	movs	r3, #2
 800153c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <MX_TIM2_Init+0xfc>)
 800154a:	f003 f995 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001554:	f000 fa12 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2204      	movs	r2, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM2_Init+0xfc>)
 8001560:	f003 f98a 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800156a:	f000 fa07 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM2_Init+0xfc>)
 8001570:	f000 fc88 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	@ 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000016c 	.word	0x2000016c

08001580 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2224      	movs	r2, #36	@ 0x24
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f004 faf6 	bl	8005b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <MX_TIM4_Init+0xa0>)
 800159e:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <MX_TIM4_Init+0xa4>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015da:	2301      	movs	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <MX_TIM4_Init+0xa0>)
 80015ee:	f002 ff1f 	bl	8004430 <HAL_TIM_Encoder_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015f8:	f000 f9c0 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_TIM4_Init+0xa0>)
 800160a:	f003 fe03 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001614:	f000 f9b2 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3730      	adds	r7, #48	@ 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001b4 	.word	0x200001b4
 8001624:	40000800 	.word	0x40000800

08001628 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	@ 0x38
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <MX_TIM5_Init+0xe4>)
 800165a:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <MX_TIM5_Init+0xe8>)
 800165c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <MX_TIM5_Init+0xe4>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <MX_TIM5_Init+0xe4>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1919999;
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <MX_TIM5_Init+0xe4>)
 800166c:	4a29      	ldr	r2, [pc, #164]	@ (8001714 <MX_TIM5_Init+0xec>)
 800166e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <MX_TIM5_Init+0xe4>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <MX_TIM5_Init+0xe4>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800167c:	4823      	ldr	r0, [pc, #140]	@ (800170c <MX_TIM5_Init+0xe4>)
 800167e:	f002 fc65 	bl	8003f4c <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001688:	f000 f978 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001696:	4619      	mov	r1, r3
 8001698:	481c      	ldr	r0, [pc, #112]	@ (800170c <MX_TIM5_Init+0xe4>)
 800169a:	f003 f9af 	bl	80049fc <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80016a4:	f000 f96a 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016a8:	4818      	ldr	r0, [pc, #96]	@ (800170c <MX_TIM5_Init+0xe4>)
 80016aa:	f002 fc9e 	bl	8003fea <HAL_TIM_PWM_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80016b4:	f000 f962 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4619      	mov	r1, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	@ (800170c <MX_TIM5_Init+0xe4>)
 80016c8:	f003 fda4 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80016d2:	f000 f953 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d6:	2360      	movs	r3, #96	@ 0x60
 80016d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	220c      	movs	r2, #12
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <MX_TIM5_Init+0xe4>)
 80016ee:	f003 f8c3 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80016f8:	f000 f940 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <MX_TIM5_Init+0xe4>)
 80016fe:	f000 fbc1 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001702:	bf00      	nop
 8001704:	3738      	adds	r7, #56	@ 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200001fc 	.word	0x200001fc
 8001710:	40000c00 	.word	0x40000c00
 8001714:	001d4bff 	.word	0x001d4bff

08001718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_USART2_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800173e:	2208      	movs	r2, #8
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001750:	f003 fde2 	bl	8005318 <HAL_HalfDuplex_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 f90f 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000244 	.word	0x20000244
 8001768:	40004400 	.word	0x40004400

0800176c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_DMA_Init+0x3c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <MX_DMA_Init+0x3c>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_DMA_Init+0x3c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2038      	movs	r0, #56	@ 0x38
 8001794:	f001 fa17 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001798:	2038      	movs	r0, #56	@ 0x38
 800179a:	f001 fa30 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_GPIO_Init+0xb4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_GPIO_Init+0xb4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <MX_GPIO_Init+0xb4>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_GPIO_Init+0xb4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001816:	2303      	movs	r3, #3
 8001818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001826:	2302      	movs	r3, #2
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <MX_GPIO_Init+0xb8>)
 8001832:	f001 fd6f 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001836:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001848:	2304      	movs	r3, #4
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4804      	ldr	r0, [pc, #16]	@ (8001864 <MX_GPIO_Init+0xb8>)
 8001854:	f001 fd5e 	bl	8003314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400

08001868 <pulse_to_PWM>:

/* USER CODE BEGIN 4 */
int32_t pulse_to_PWM(RadioReciever_DriverTypeDef* rad)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	  // Getting radio pulse and setting motor
	  pulse_rad = get_pulse(rad);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f954 	bl	8001b1e <get_pulse>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <pulse_to_PWM+0xa4>)
 800187c:	801a      	strh	r2, [r3, #0]
	  duty_percent = ((pulse_rad-1509)*100)/513;
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <pulse_to_PWM+0xa4>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	f2a3 53e5 	subw	r3, r3, #1509	@ 0x5e5
 8001886:	2264      	movs	r2, #100	@ 0x64
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <pulse_to_PWM+0xa8>)
 800188e:	fb82 1203 	smull	r1, r2, r2, r3
 8001892:	1212      	asrs	r2, r2, #8
 8001894:	17db      	asrs	r3, r3, #31
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <pulse_to_PWM+0xac>)
 800189a:	6013      	str	r3, [r2, #0]
	  duty_count = ((pulse_rad-1509)*pulse)/513;
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <pulse_to_PWM+0xa4>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	f2a3 53e5 	subw	r3, r3, #1509	@ 0x5e5
 80018a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <pulse_to_PWM+0xb0>)
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <pulse_to_PWM+0xa8>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1212      	asrs	r2, r2, #8
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a18      	ldr	r2, [pc, #96]	@ (800191c <pulse_to_PWM+0xb4>)
 80018ba:	6013      	str	r3, [r2, #0]
	  if (duty_percent > 100 || duty_count > 4799){
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <pulse_to_PWM+0xac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b64      	cmp	r3, #100	@ 0x64
 80018c2:	dc04      	bgt.n	80018ce <pulse_to_PWM+0x66>
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <pulse_to_PWM+0xb4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 80018cc:	db07      	blt.n	80018de <pulse_to_PWM+0x76>
		  duty_percent = 100;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <pulse_to_PWM+0xac>)
 80018d0:	2264      	movs	r2, #100	@ 0x64
 80018d2:	601a      	str	r2, [r3, #0]
		  duty_count = 4799;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <pulse_to_PWM+0xb4>)
 80018d6:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e010      	b.n	8001900 <pulse_to_PWM+0x98>
	  }
	  else if (duty_percent < -100 || duty_count < -4799){
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <pulse_to_PWM+0xac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80018e6:	db04      	blt.n	80018f2 <pulse_to_PWM+0x8a>
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <pulse_to_PWM+0xb4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 80018f0:	dc06      	bgt.n	8001900 <pulse_to_PWM+0x98>
		  duty_percent = -100;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <pulse_to_PWM+0xac>)
 80018f4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80018f8:	601a      	str	r2, [r3, #0]
		  duty_count = -4799;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <pulse_to_PWM+0xb4>)
 80018fc:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <pulse_to_PWM+0xb8>)
 80018fe:	601a      	str	r2, [r3, #0]
	  }
	  return duty_count;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <pulse_to_PWM+0xb4>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000028c 	.word	0x2000028c
 8001910:	7fc01ff1 	.word	0x7fc01ff1
 8001914:	20000290 	.word	0x20000290
 8001918:	20000000 	.word	0x20000000
 800191c:	20000294 	.word	0x20000294
 8001920:	ffffed41 	.word	0xffffed41

08001924 <HAL_TIM_IC_CaptureCallback>:
}

// Callback Functions

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	rad_edge_flag = 1;
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x28>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
	htim_cb = *htim;
 8001932:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	2348      	movs	r3, #72	@ 0x48
 800193c:	461a      	mov	r2, r3
 800193e:	f004 f953 	bl	8005be8 <memcpy>

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200003c4 	.word	0x200003c4
 8001950:	2000037c 	.word	0x2000037c

08001954 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(adc_conversion_flag == 1){
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_ADC_ConvCpltCallback+0x24>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_ADC_ConvCpltCallback+0x16>
		adc_conversion_flag = 2;
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <HAL_ADC_ConvCpltCallback+0x24>)
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
	}
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200003c5 	.word	0x200003c5

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <Error_Handler+0x8>

08001988 <enable_mot>:
 */


#include "motor_driver.h"

void enable_mot(Motor_DriverTypeDef* mot, uint32_t motor_num){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	if(motor_num == 1){
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10f      	bne.n	80019b8 <enable_mot+0x30>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f002 fb7a 	bl	800409c <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f002 fb72 	bl	800409c <HAL_TIM_PWM_Start>
	}
	if(motor_num == 2){
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d10f      	bne.n	80019de <enable_mot+0x56>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel3);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f002 fb67 	bl	800409c <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(mot->tim_handle,mot->tim_channel4);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f002 fb5f 	bl	800409c <HAL_TIM_PWM_Start>
	}
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <set_PWM_percent>:
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel3);
		  HAL_TIM_PWM_Stop(mot->tim_handle,mot->tim_channel4);
	}
}

void set_PWM_percent(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_cycle){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	int32_t duty_count = (duty_cycle*(mot->pulse))/100;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <set_PWM_percent+0x34>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	617b      	str	r3, [r7, #20]
	set_PWM(mot, motor_num, duty_count);
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f807 	bl	8001a20 <set_PWM>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	51eb851f 	.word	0x51eb851f

08001a20 <set_PWM>:

void set_PWM(Motor_DriverTypeDef* mot, uint32_t motor_num, int32_t duty_count){
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	if (motor_num == 1){
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d11c      	bne.n	8001a6c <set_PWM+0x4c>
		if (duty_count <= 0){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dc0b      	bgt.n	8001a50 <set_PWM+0x30>
			(*(mot->tim_handle)).Instance->CCR1 = -duty_count;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	425a      	negs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = 0;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel3,0);
			//__HAL_TIM_SET_COMPARE(mot->tim_handle,mot->tim_channel4,duty_count);
		}
	}
}
 8001a4e:	e02c      	b.n	8001aaa <set_PWM+0x8a>
		else if (duty_count >= 0){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db29      	blt.n	8001aaa <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR1 = 0;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34
			(*(mot->tim_handle)).Instance->CCR2 = duty_count;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a6a:	e01e      	b.n	8001aaa <set_PWM+0x8a>
	else if (motor_num == 2){
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d11b      	bne.n	8001aaa <set_PWM+0x8a>
		if (duty_count <= 0){
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dc0b      	bgt.n	8001a90 <set_PWM+0x70>
			(*(mot->tim_handle)).Instance->CCR3 = -duty_count;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	425a      	negs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = 0;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a8e:	e00c      	b.n	8001aaa <set_PWM+0x8a>
		else if (duty_count >= 0){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db09      	blt.n	8001aaa <set_PWM+0x8a>
			(*(mot->tim_handle)).Instance->CCR3 = 0;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
			(*(mot->tim_handle)).Instance->CCR4 = duty_count;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <start_get_adc_values>:
 */

#include "photoresistor_driver.h"

void start_get_adc_values(Photoresistor_DriverTypeDef* photo)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(photo->adc_handle, (uint32_t*)(photo->adc_results),4); // EDIT: make sure the buffer works as an address input
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f000 fbed 	bl	80022a8 <HAL_ADC_Start_DMA>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <get_adc_values>:

uint32_t* get_adc_values(Photoresistor_DriverTypeDef* photo)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return photo->adc_results;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <enable_rad>:
 */

#include <radio_reciever_driver.h>

void enable_rad(RadioReciever_DriverTypeDef* rad)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	// Enabling the rising/falling edge interrupt
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f002 fb7b 	bl	80041fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(rad->tim_handle,rad->tim_channel2);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f002 fb73 	bl	80041fc <HAL_TIM_IC_Start_IT>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <get_pulse>:
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel1);
	HAL_TIM_IC_Stop_IT(rad->tim_handle,rad->tim_channel2);
}

uint16_t get_pulse(RadioReciever_DriverTypeDef* rad)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	if (rad->pulse_recieve_flag){
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d038      	beq.n	8001ba0 <get_pulse+0x82>
		// Calculate pulse width (in us) w/ overflow
		if (rad->IC_Fall < rad->IC_Rise){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	89da      	ldrh	r2, [r3, #14]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	899b      	ldrh	r3, [r3, #12]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20a      	bcs.n	8001b50 <get_pulse+0x32>
			rad->IC_Diff = (0xffff - rad->IC_Rise) + rad->IC_Fall;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	89da      	ldrh	r2, [r3, #14]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	899b      	ldrh	r3, [r3, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	821a      	strh	r2, [r3, #16]
 8001b4e:	e007      	b.n	8001b60 <get_pulse+0x42>
		}
		else{
			rad->IC_Diff = rad->IC_Fall - rad->IC_Rise;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	89da      	ldrh	r2, [r3, #14]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	899b      	ldrh	r3, [r3, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	821a      	strh	r2, [r3, #16]
		}
		// Manage invalid values
		if (rad->IC_Diff < (2000*(1+rad->tol)) || rad->IC_Diff > (1000*(1-rad->tol))){
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8a1b      	ldrh	r3, [r3, #16]
 8001b64:	4619      	mov	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8a9b      	ldrh	r3, [r3, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4299      	cmp	r1, r3
 8001b76:	db0c      	blt.n	8001b92 <get_pulse+0x74>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8a1b      	ldrh	r3, [r3, #16]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8a9b      	ldrh	r3, [r3, #20]
 8001b82:	f1c3 0301 	rsb	r3, r3, #1
 8001b86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4299      	cmp	r1, r3
 8001b90:	dd03      	ble.n	8001b9a <get_pulse+0x7c>
			rad->pulse_width = rad->IC_Diff;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8a1a      	ldrh	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	825a      	strh	r2, [r3, #18]
		}
		rad->pulse_recieve_flag = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
	}
	return rad->pulse_width;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8a5b      	ldrh	r3, [r3, #18]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <read_pulse>:

void read_pulse(RadioReciever_DriverTypeDef* rad, TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	if (htim->Instance == rad->tim_handle->Instance && !(rad->pulse_recieve_flag)){
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d11e      	bne.n	8001c06 <read_pulse+0x56>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11a      	bne.n	8001c06 <read_pulse+0x56>
		if (rad->rise_flag){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <read_pulse+0x50>
			rad->IC_Rise = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	819a      	strh	r2, [r3, #12]
			rad->IC_Fall = HAL_TIM_ReadCapturedValue(htim, rad->tim_channel2);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4619      	mov	r1, r3
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f002 ffd1 	bl	8004b8c <HAL_TIM_ReadCapturedValue>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	81da      	strh	r2, [r3, #14]
			rad->pulse_recieve_flag = 1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	619a      	str	r2, [r3, #24]
			rad->rise_flag = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
		}
		else{
			rad->rise_flag = 1;
		}
	}
}
 8001bfe:	e002      	b.n	8001c06 <read_pulse+0x56>
			rad->rise_flag = 1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	61da      	str	r2, [r3, #28]
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d3c <HAL_ADC_MspInit+0xdc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d157      	bne.n	8001d32 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c92:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <HAL_ADC_MspInit+0xe0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cba:	23f0      	movs	r3, #240	@ 0xf0
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481d      	ldr	r0, [pc, #116]	@ (8001d44 <HAL_ADC_MspInit+0xe4>)
 8001cce:	f001 fb21 	bl	8003314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HAL_ADC_MspInit+0xec>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001cf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001cfc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d16:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d18:	f000 ff8c 	bl	8002c34 <HAL_DMA_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d22:	f7ff fe2b 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2c:	4a06      	ldr	r2, [pc, #24]	@ (8001d48 <HAL_ADC_MspInit+0xe8>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012000 	.word	0x40012000
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	200000c4 	.word	0x200000c4
 8001d4c:	40026410 	.word	0x40026410

08001d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a22      	ldr	r2, [pc, #136]	@ (8001de8 <HAL_TIM_Base_MspInit+0x98>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d116      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201b      	movs	r0, #27
 8001d84:	f000 ff1f 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d88:	201b      	movs	r0, #27
 8001d8a:	f000 ff38 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d8e:	e026      	b.n	8001dde <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
}
 8001db6:	e012      	b.n	8001dde <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_TIM_Base_MspInit+0xa0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10d      	bne.n	8001dde <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	4a08      	ldr	r2, [pc, #32]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_TIM_Base_MspInit+0x9c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40000c00 	.word	0x40000c00

08001df4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12b      	bne.n	8001e6e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a10      	ldr	r2, [pc, #64]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e4e:	23c0      	movs	r3, #192	@ 0xc0
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e6a:	f001 fa53 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	@ 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4816      	ldr	r0, [pc, #88]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001ede:	f001 fa19 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ee2:	e022      	b.n	8001f2a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_TIM_MspPostInit+0xb8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11d      	bne.n	8001f2a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001f26:	f001 f9f5 	bl	8003314 <HAL_GPIO_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40000c00 	.word	0x40000c00

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <HAL_UART_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9e:	2312      	movs	r3, #18
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <HAL_UART_MspInit+0x8c>)
 8001fb6:	f001 f9ad 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 f8db 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM1_CC_IRQHandler+0x10>)
 8002036:	f002 fb2f 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000124 	.word	0x20000124

08002044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <DMA2_Stream0_IRQHandler+0x10>)
 800204a:	f000 fef9 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200000c4 	.word	0x200000c4

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f003 fd82 	bl	8005b90 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20020000 	.word	0x20020000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	200003c8 	.word	0x200003c8
 80020c0:	20000518 	.word	0x20000518

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ec:	f7ff ffea 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	@ (8002128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	@ (8002134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f003 fd41 	bl	8005b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7fe feb1 	bl	8000e80 <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800212c:	08006600 	.word	0x08006600
  ldr r2, =_sbss
 8002130:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002134:	20000518 	.word	0x20000518

08002138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <HAL_Init+0x40>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_Init+0x40>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	@ (800217c <HAL_Init+0x40>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 fd23 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fd4e 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fd3b 	bl	8002c1a <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 fd03 	bl	8002bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000004 	.word	0x20000004
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000008 	.word	0x20000008

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000000c 	.word	0x2000000c
 8002204:	200003cc 	.word	0x200003cc

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200003cc 	.word	0x200003cc

08002220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e033      	b.n	800229e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fd0e 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002266:	f023 0302 	bic.w	r3, r3, #2
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa4e 	bl	8002714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
 800228e:	e001      	b.n	8002294 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0ce      	b.n	8002464 <HAL_ADC_Start_DMA+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d018      	beq.n	800230e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ec:	4b5f      	ldr	r3, [pc, #380]	@ (800246c <HAL_ADC_Start_DMA+0x1c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002470 <HAL_ADC_Start_DMA+0x1c8>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9a      	lsrs	r2, r3, #18
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3b01      	subs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800231c:	d107      	bne.n	800232e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800232c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 8086 	bne.w	800244a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002368:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800237c:	d106      	bne.n	800238c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f023 0206 	bic.w	r2, r3, #6
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
 800238a:	e002      	b.n	8002392 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239a:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <HAL_ADC_Start_DMA+0x1cc>)
 800239c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	4a35      	ldr	r2, [pc, #212]	@ (8002478 <HAL_ADC_Start_DMA+0x1d0>)
 80023a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	4a34      	ldr	r2, [pc, #208]	@ (800247c <HAL_ADC_Start_DMA+0x1d4>)
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	4a33      	ldr	r2, [pc, #204]	@ (8002480 <HAL_ADC_Start_DMA+0x1d8>)
 80023b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	334c      	adds	r3, #76	@ 0x4c
 80023ea:	4619      	mov	r1, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f000 fcce 	bl	8002d90 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10f      	bne.n	8002420 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d129      	bne.n	8002462 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	e020      	b.n	8002462 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_ADC_Start_DMA+0x1dc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11b      	bne.n	8002462 <HAL_ADC_Start_DMA+0x1ba>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d114      	bne.n	8002462 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	e00b      	b.n	8002462 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000004 	.word	0x20000004
 8002470:	431bde83 	.word	0x431bde83
 8002474:	40012300 	.word	0x40012300
 8002478:	0800290d 	.word	0x0800290d
 800247c:	080029c7 	.word	0x080029c7
 8002480:	080029e3 	.word	0x080029e3
 8002484:	40012000 	.word	0x40012000

08002488 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e113      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x244>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d925      	bls.n	8002528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	2207      	movs	r2, #7
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	4603      	mov	r3, r0
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4403      	add	r3, r0
 800251a:	3b1e      	subs	r3, #30
 800251c:	409a      	lsls	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	e022      	b.n	800256e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	2207      	movs	r2, #7
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	4603      	mov	r3, r0
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4403      	add	r3, r0
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b06      	cmp	r3, #6
 8002574:	d824      	bhi.n	80025c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b05      	subs	r3, #5
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b05      	subs	r3, #5
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025be:	e04c      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d824      	bhi.n	8002612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b23      	subs	r3, #35	@ 0x23
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43da      	mvns	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	400a      	ands	r2, r1
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b23      	subs	r3, #35	@ 0x23
 8002604:	fa00 f203 	lsl.w	r2, r0, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002610:	e023      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b41      	subs	r3, #65	@ 0x41
 8002624:	221f      	movs	r2, #31
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	400a      	ands	r2, r1
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b41      	subs	r3, #65	@ 0x41
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_ADC_ConfigChannel+0x250>)
 800265c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a28      	ldr	r2, [pc, #160]	@ (8002704 <HAL_ADC_ConfigChannel+0x254>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10f      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1d8>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b12      	cmp	r3, #18
 800266e:	d10b      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <HAL_ADC_ConfigChannel+0x254>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12b      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <HAL_ADC_ConfigChannel+0x258>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x1f4>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b11      	cmp	r3, #17
 80026a2:	d122      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_ADC_ConfigChannel+0x258>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_ADC_ConfigChannel+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_ADC_ConfigChannel+0x260>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	0c9a      	lsrs	r2, r3, #18
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40012300 	.word	0x40012300
 8002704:	40012000 	.word	0x40012000
 8002708:	10000012 	.word	0x10000012
 800270c:	20000004 	.word	0x20000004
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271c:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <ADC_Init+0x1f0>)
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	4a58      	ldr	r2, [pc, #352]	@ (8002908 <ADC_Init+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e00f      	b.n	8002812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0202 	bic.w	r2, r2, #2
 8002820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
 800282c:	005a      	lsls	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800285e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	3b01      	subs	r3, #1
 800286c:	035a      	lsls	r2, r3, #13
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e007      	b.n	8002888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	051a      	lsls	r2, r3, #20
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ca:	025a      	lsls	r2, r3, #9
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	029a      	lsls	r2, r3, #10
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40012300 	.word	0x40012300
 8002908:	0f000001 	.word	0x0f000001

0800290c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d13c      	bne.n	80029a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d12b      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d127      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002960:	2b00      	cmp	r3, #0
 8002962:	d119      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fe ffdb 	bl	8001954 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800299e:	e00e      	b.n	80029be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff fd75 	bl	800249c <HAL_ADC_ErrorCallback>
}
 80029b2:	e004      	b.n	80029be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff fd57 	bl	8002488 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff fd4a 	bl	800249c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	@ (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	@ (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f7ff ff8e 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff29 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff3e 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff8e 	bl	8002b04 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5d 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff31 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa2 	bl	8002b6c <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff fae2 	bl	8002208 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e099      	b.n	8002d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	e00f      	b.n	8002c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c72:	f7ff fac9 	bl	8002208 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d908      	bls.n	8002c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e078      	b.n	8002d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e8      	bne.n	8002c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_DMA_Init+0x158>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d117      	bne.n	8002d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa6f 	bl	800321c <DMA_CheckFifoParam>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d52:	2301      	movs	r3, #1
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa26 	bl	80031b0 <DMA_CalcBaseAndBitshift>
 8002d64:	4603      	mov	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	223f      	movs	r2, #63	@ 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	f010803f 	.word	0xf010803f

08002d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_Start_IT+0x26>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e040      	b.n	8002e38 <HAL_DMA_Start_IT+0xa8>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d12f      	bne.n	8002e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f9b8 	bl	8003154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	223f      	movs	r2, #63	@ 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0216 	orr.w	r2, r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e005      	b.n	8002e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003088 <HAL_DMA_IRQHandler+0x248>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a8e      	ldr	r2, [pc, #568]	@ (800308c <HAL_DMA_IRQHandler+0x24c>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	2208      	movs	r2, #8
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	2204      	movs	r2, #4
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d043      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d03c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d018      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e01f      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
 8002f80:	e016      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 808f 	beq.w	80030e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8087 	beq.w	80030e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d136      	bne.n	8003058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0216 	bic.w	r2, r2, #22
 8002ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_DMA_IRQHandler+0x1da>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0208 	bic.w	r2, r2, #8
 8003028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	223f      	movs	r2, #63	@ 0x3f
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	2b00      	cmp	r3, #0
 800304c:	d07e      	beq.n	800314c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
        }
        return;
 8003056:	e079      	b.n	800314c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01d      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	2b00      	cmp	r3, #0
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e02c      	b.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
 8003086:	bf00      	nop
 8003088:	20000004 	.word	0x20000004
 800308c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d023      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e01e      	b.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0210 	bic.w	r2, r2, #16
 80030be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d032      	beq.n	800314e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d022      	beq.n	800313a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2205      	movs	r2, #5
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3301      	adds	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d307      	bcc.n	8003128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f2      	bne.n	800310c <HAL_DMA_IRQHandler+0x2cc>
 8003126:	e000      	b.n	800312a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
 800314a:	e000      	b.n	800314e <HAL_DMA_IRQHandler+0x30e>
        return;
 800314c:	bf00      	nop
    }
  }
}
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d108      	bne.n	8003194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003192:	e007      	b.n	80031a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3b10      	subs	r3, #16
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <DMA_CalcBaseAndBitshift+0x64>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <DMA_CalcBaseAndBitshift+0x68>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d909      	bls.n	80031f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80031f0:	e007      	b.n	8003202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	aaaaaaab 	.word	0xaaaaaaab
 8003218:	080065b4 	.word	0x080065b4

0800321c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11f      	bne.n	8003276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d856      	bhi.n	80032ea <DMA_CheckFifoParam+0xce>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <DMA_CheckFifoParam+0x28>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	08003267 	.word	0x08003267
 800324c:	08003255 	.word	0x08003255
 8003250:	080032eb 	.word	0x080032eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d046      	beq.n	80032ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e043      	b.n	80032ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800326e:	d140      	bne.n	80032f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e03d      	b.n	80032f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327e:	d121      	bne.n	80032c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d837      	bhi.n	80032f6 <DMA_CheckFifoParam+0xda>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <DMA_CheckFifoParam+0x70>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a3 	.word	0x080032a3
 8003294:	0800329d 	.word	0x0800329d
 8003298:	080032b5 	.word	0x080032b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e030      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d025      	beq.n	80032fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b2:	e022      	b.n	80032fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032c2:	e01c      	b.n	80032fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d903      	bls.n	80032d2 <DMA_CheckFifoParam+0xb6>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d003      	beq.n	80032d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032d0:	e018      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      break;
 80032d6:	e015      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e00b      	b.n	8003302 <DMA_CheckFifoParam+0xe6>
      break;
 80032ea:	bf00      	nop
 80032ec:	e00a      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e008      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e006      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;   
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
    }
  } 
  
  return status; 
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e159      	b.n	80035e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 8148 	bne.w	80035de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003362:	2b02      	cmp	r3, #2
 8003364:	d130      	bne.n	80033c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 0201 	and.w	r2, r3, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d017      	beq.n	8003404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d123      	bne.n	8003458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a2 	beq.w	80035de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b57      	ldr	r3, [pc, #348]	@ (80035fc <HAL_GPIO_Init+0x2e8>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	4a56      	ldr	r2, [pc, #344]	@ (80035fc <HAL_GPIO_Init+0x2e8>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034aa:	4b54      	ldr	r3, [pc, #336]	@ (80035fc <HAL_GPIO_Init+0x2e8>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b6:	4a52      	ldr	r2, [pc, #328]	@ (8003600 <HAL_GPIO_Init+0x2ec>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a49      	ldr	r2, [pc, #292]	@ (8003604 <HAL_GPIO_Init+0x2f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d019      	beq.n	8003516 <HAL_GPIO_Init+0x202>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a48      	ldr	r2, [pc, #288]	@ (8003608 <HAL_GPIO_Init+0x2f4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0x1fe>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a47      	ldr	r2, [pc, #284]	@ (800360c <HAL_GPIO_Init+0x2f8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00d      	beq.n	800350e <HAL_GPIO_Init+0x1fa>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a46      	ldr	r2, [pc, #280]	@ (8003610 <HAL_GPIO_Init+0x2fc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x1f6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a45      	ldr	r2, [pc, #276]	@ (8003614 <HAL_GPIO_Init+0x300>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_GPIO_Init+0x1f2>
 8003502:	2304      	movs	r3, #4
 8003504:	e008      	b.n	8003518 <HAL_GPIO_Init+0x204>
 8003506:	2307      	movs	r3, #7
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x204>
 800350a:	2303      	movs	r3, #3
 800350c:	e004      	b.n	8003518 <HAL_GPIO_Init+0x204>
 800350e:	2302      	movs	r3, #2
 8003510:	e002      	b.n	8003518 <HAL_GPIO_Init+0x204>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_GPIO_Init+0x204>
 8003516:	2300      	movs	r3, #0
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f002 0203 	and.w	r2, r2, #3
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	4093      	lsls	r3, r2
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003528:	4935      	ldr	r1, [pc, #212]	@ (8003600 <HAL_GPIO_Init+0x2ec>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003536:	4b38      	ldr	r3, [pc, #224]	@ (8003618 <HAL_GPIO_Init+0x304>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800355a:	4a2f      	ldr	r2, [pc, #188]	@ (8003618 <HAL_GPIO_Init+0x304>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003560:	4b2d      	ldr	r3, [pc, #180]	@ (8003618 <HAL_GPIO_Init+0x304>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003584:	4a24      	ldr	r2, [pc, #144]	@ (8003618 <HAL_GPIO_Init+0x304>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800358a:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <HAL_GPIO_Init+0x304>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <HAL_GPIO_Init+0x304>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b4:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_GPIO_Init+0x304>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003618 <HAL_GPIO_Init+0x304>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	f67f aea2 	bls.w	8003330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3724      	adds	r7, #36	@ 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40013800 	.word	0x40013800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	40021000 	.word	0x40021000
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e267      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00c      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4b85      	ldr	r3, [pc, #532]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364e:	2b08      	cmp	r3, #8
 8003650:	d112      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b7e      	ldr	r3, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e242      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b70      	ldr	r3, [pc, #448]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6f      	ldr	r2, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b6d      	ldr	r3, [pc, #436]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6c      	ldr	r2, [pc, #432]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b69      	ldr	r3, [pc, #420]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a68      	ldr	r2, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b66      	ldr	r3, [pc, #408]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fd98 	bl	8002208 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fd94 	bl	8002208 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	@ 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e207      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b5b      	ldr	r3, [pc, #364]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fd84 	bl	8002208 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fd80 	bl	8002208 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f3      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b51      	ldr	r3, [pc, #324]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003732:	4b4a      	ldr	r3, [pc, #296]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b44      	ldr	r3, [pc, #272]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1c7      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4937      	ldr	r1, [pc, #220]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b34      	ldr	r3, [pc, #208]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe fd39 	bl	8002208 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe fd35 	bl	8002208 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1a8      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4925      	ldr	r1, [pc, #148]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fd18 	bl	8002208 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe fd14 	bl	8002208 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e187      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe fcf8 	bl	8002208 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381c:	f7fe fcf4 	bl	8002208 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e167      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
 800383a:	e01b      	b.n	8003874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe fce1 	bl	8002208 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e00e      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe fcdd 	bl	8002208 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d907      	bls.n	8003868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e150      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	42470000 	.word	0x42470000
 8003864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ea      	bne.n	800384a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8097 	beq.w	80039b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b81      	ldr	r3, [pc, #516]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b7d      	ldr	r3, [pc, #500]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a2:	4b7a      	ldr	r3, [pc, #488]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b77      	ldr	r3, [pc, #476]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b74      	ldr	r3, [pc, #464]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fe fc9d 	bl	8002208 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fe fc99 	bl	8002208 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e10c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x2ea>
 80038f8:	4b64      	ldr	r3, [pc, #400]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fc:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	@ 0x70
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x30c>
 800390e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a5e      	ldr	r2, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
 800391a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003928:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	@ 0x70
 8003934:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4a54      	ldr	r2, [pc, #336]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fc5e 	bl	8002208 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe fc5a 	bl	8002208 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0cb      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ee      	beq.n	8003950 <HAL_RCC_OscConfig+0x334>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7fe fc48 	bl	8002208 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fc44 	bl	8002208 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b5      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003992:	4b3e      	ldr	r3, [pc, #248]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ee      	bne.n	800397c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b39      	ldr	r3, [pc, #228]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	4a38      	ldr	r2, [pc, #224]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a1 	beq.w	8003afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d05c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d141      	bne.n	8003a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fc18 	bl	8002208 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fc14 	bl	8002208 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e087      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b27      	ldr	r3, [pc, #156]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fbed 	bl	8002208 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe fbe9 	bl	8002208 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e05c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x416>
 8003a50:	e054      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fbd6 	bl	8002208 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe fbd2 	bl	8002208 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e045      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x444>
 8003a7e:	e03d      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e038      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d028      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fb04 	bl	8002208 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fe fb00 	bl	8002208 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	@ (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fa64 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	0800659c 	.word	0x0800659c
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	20000008 	.word	0x20000008

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b094      	sub	sp, #80	@ 0x50
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce8:	2300      	movs	r3, #0
 8003cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf0:	4b79      	ldr	r3, [pc, #484]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f200 80e1 	bhi.w	8003ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e0db      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b73      	ldr	r3, [pc, #460]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x204>)
 8003d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d10:	e0db      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b73      	ldr	r3, [pc, #460]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d16:	e0d8      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4621      	mov	r1, r4
 8003d64:	1a51      	subs	r1, r2, r1
 8003d66:	6139      	str	r1, [r7, #16]
 8003d68:	4629      	mov	r1, r5
 8003d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	018b      	lsls	r3, r1, #6
 8003d80:	4651      	mov	r1, sl
 8003d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d86:	4651      	mov	r1, sl
 8003d88:	018a      	lsls	r2, r1, #6
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d90:	4659      	mov	r1, fp
 8003d92:	eb63 0901 	sbc.w	r9, r3, r1
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003daa:	4690      	mov	r8, r2
 8003dac:	4699      	mov	r9, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	eb18 0303 	adds.w	r3, r8, r3
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	462b      	mov	r3, r5
 8003db8:	eb49 0303 	adc.w	r3, r9, r3
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dca:	4629      	mov	r1, r5
 8003dcc:	024b      	lsls	r3, r1, #9
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	024a      	lsls	r2, r1, #9
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dde:	2200      	movs	r2, #0
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de8:	f7fc fe40 	bl	8000a6c <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4613      	mov	r3, r2
 8003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df4:	e058      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4611      	mov	r1, r2
 8003e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	0159      	lsls	r1, r3, #5
 8003e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e22:	0150      	lsls	r0, r2, #5
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e2e:	4649      	mov	r1, r9
 8003e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e48:	ebb2 040a 	subs.w	r4, r2, sl
 8003e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	00eb      	lsls	r3, r5, #3
 8003e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e5e:	00e2      	lsls	r2, r4, #3
 8003e60:	4614      	mov	r4, r2
 8003e62:	461d      	mov	r5, r3
 8003e64:	4643      	mov	r3, r8
 8003e66:	18e3      	adds	r3, r4, r3
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	eb45 0303 	adc.w	r3, r5, r3
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	028b      	lsls	r3, r1, #10
 8003e82:	4621      	mov	r1, r4
 8003e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e88:	4621      	mov	r1, r4
 8003e8a:	028a      	lsls	r2, r1, #10
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e92:	2200      	movs	r2, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	61fa      	str	r2, [r7, #28]
 8003e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e9c:	f7fc fde6 	bl	8000a6c <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec2:	e002      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3750      	adds	r7, #80	@ 0x50
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f00:	f7ff fff0 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	080065ac 	.word	0x080065ac

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f28:	f7ff ffdc 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0b5b      	lsrs	r3, r3, #13
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	080065ac 	.word	0x080065ac

08003f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e041      	b.n	8003fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd feec 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fe6a 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e041      	b.n	8004080 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f839 	bl	8004088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 fe1b 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_TIM_PWM_Start+0x24>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e022      	b.n	8004106 <HAL_TIM_PWM_Start+0x6a>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d109      	bne.n	80040da <HAL_TIM_PWM_Start+0x3e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e015      	b.n	8004106 <HAL_TIM_PWM_Start+0x6a>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d109      	bne.n	80040f4 <HAL_TIM_PWM_Start+0x58>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e008      	b.n	8004106 <HAL_TIM_PWM_Start+0x6a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e068      	b.n	80041e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0x82>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800411c:	e013      	b.n	8004146 <HAL_TIM_PWM_Start+0xaa>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0x92>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800412c:	e00b      	b.n	8004146 <HAL_TIM_PWM_Start+0xaa>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800413c:	e003      	b.n	8004146 <HAL_TIM_PWM_Start+0xaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f83a 	bl	80051c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <HAL_TIM_PWM_Start+0x14c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d107      	bne.n	800416e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <HAL_TIM_PWM_Start+0x14c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d018      	beq.n	80041aa <HAL_TIM_PWM_Start+0x10e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d013      	beq.n	80041aa <HAL_TIM_PWM_Start+0x10e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a19      	ldr	r2, [pc, #100]	@ (80041ec <HAL_TIM_PWM_Start+0x150>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIM_PWM_Start+0x10e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a17      	ldr	r2, [pc, #92]	@ (80041f0 <HAL_TIM_PWM_Start+0x154>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIM_PWM_Start+0x10e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <HAL_TIM_PWM_Start+0x158>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIM_PWM_Start+0x10e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a14      	ldr	r2, [pc, #80]	@ (80041f8 <HAL_TIM_PWM_Start+0x15c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d111      	bne.n	80041ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d010      	beq.n	80041de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	e007      	b.n	80041de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000

080041fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0x1e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e013      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x46>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0x2e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e00b      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x46>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0x3e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e003      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x46>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004240:	b2db      	uxtb	r3, r3
 8004242:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_TIM_IC_Start_IT+0x58>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e013      	b.n	800427c <HAL_TIM_IC_Start_IT+0x80>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d104      	bne.n	8004264 <HAL_TIM_IC_Start_IT+0x68>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e00b      	b.n	800427c <HAL_TIM_IC_Start_IT+0x80>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d104      	bne.n	8004274 <HAL_TIM_IC_Start_IT+0x78>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e003      	b.n	800427c <HAL_TIM_IC_Start_IT+0x80>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427a:	b2db      	uxtb	r3, r3
 800427c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800427e:	7bbb      	ldrb	r3, [r7, #14]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004284:	7b7b      	ldrb	r3, [r7, #13]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0c2      	b.n	8004414 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_TIM_IC_Start_IT+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800429c:	e013      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0xca>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_IC_Start_IT+0xb2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0xca>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d104      	bne.n	80042be <HAL_TIM_IC_Start_IT+0xc2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0xca>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_IC_Start_IT+0xda>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d4:	e013      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x102>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_IC_Start_IT+0xea>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x102>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_IC_Start_IT+0xfa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f4:	e003      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x102>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d841      	bhi.n	8004388 <HAL_TIM_IC_Start_IT+0x18c>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_TIM_IC_Start_IT+0x110>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004341 	.word	0x08004341
 8004310:	08004389 	.word	0x08004389
 8004314:	08004389 	.word	0x08004389
 8004318:	08004389 	.word	0x08004389
 800431c:	08004353 	.word	0x08004353
 8004320:	08004389 	.word	0x08004389
 8004324:	08004389 	.word	0x08004389
 8004328:	08004389 	.word	0x08004389
 800432c:	08004365 	.word	0x08004365
 8004330:	08004389 	.word	0x08004389
 8004334:	08004389 	.word	0x08004389
 8004338:	08004389 	.word	0x08004389
 800433c:	08004377 	.word	0x08004377
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0202 	orr.w	r2, r2, #2
 800434e:	60da      	str	r2, [r3, #12]
      break;
 8004350:	e01d      	b.n	800438e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0204 	orr.w	r2, r2, #4
 8004360:	60da      	str	r2, [r3, #12]
      break;
 8004362:	e014      	b.n	800438e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0208 	orr.w	r2, r2, #8
 8004372:	60da      	str	r2, [r3, #12]
      break;
 8004374:	e00b      	b.n	800438e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0210 	orr.w	r2, r2, #16
 8004384:	60da      	str	r2, [r3, #12]
      break;
 8004386:	e002      	b.n	800438e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	bf00      	nop
  }

  if (status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d13e      	bne.n	8004412 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	6839      	ldr	r1, [r7, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 ff13 	bl	80051c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	@ (800441c <HAL_TIM_IC_Start_IT+0x220>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x1e2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b4:	d013      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x1e2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_TIM_IC_Start_IT+0x224>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x1e2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <HAL_TIM_IC_Start_IT+0x228>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x1e2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIM_IC_Start_IT+0x22c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x1e2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a14      	ldr	r2, [pc, #80]	@ (800442c <HAL_TIM_IC_Start_IT+0x230>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d111      	bne.n	8004402 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d010      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	e007      	b.n	8004412 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000

08004430 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e097      	b.n	8004574 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fccb 	bl	8001df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f000 fbed 	bl	8004c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4313      	orrs	r3, r2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80044d0:	f023 030c 	bic.w	r3, r3, #12
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	4313      	orrs	r3, r2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	031b      	lsls	r3, r3, #12
 8004500:	4313      	orrs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4313      	orrs	r3, r2
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004594:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800459c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b2:	7b7b      	ldrb	r3, [r7, #13]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e069      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045cc:	e031      	b.n	8004632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d110      	bne.n	80045f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d4:	7bbb      	ldrb	r3, [r7, #14]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045da:	7b3b      	ldrb	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e055      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f4:	e01d      	b.n	8004632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d108      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	7b7b      	ldrb	r3, [r7, #13]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004608:	7b3b      	ldrb	r3, [r7, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e03e      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_TIM_Encoder_Start+0xc4>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d008      	beq.n	8004650 <HAL_TIM_Encoder_Start+0xd4>
 800463e:	e00f      	b.n	8004660 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fdbd 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 800464e:	e016      	b.n	800467e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	2104      	movs	r1, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fdb5 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 800465e:	e00e      	b.n	800467e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fdad 	bl	80051c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	2104      	movs	r1, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fda6 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 800467c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0202 	mvn.w	r2, #2
 80046cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd f91e 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa9c 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 faa3 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd f8f8 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa76 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa7d 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d020      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd f8d2 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa50 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa57 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d020      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2208      	movs	r2, #8
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd f8ac 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa2a 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa31 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0201 	mvn.w	r2, #1
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa08 	bl	8004c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fd6e 	bl	8005304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa02 	bl	8004c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0220 	mvn.w	r2, #32
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fd40 	bl	80052f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e0ae      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	f200 809f 	bhi.w	80049e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080049e5 	.word	0x080049e5
 80048b4:	080049e5 	.word	0x080049e5
 80048b8:	080049e5 	.word	0x080049e5
 80048bc:	08004921 	.word	0x08004921
 80048c0:	080049e5 	.word	0x080049e5
 80048c4:	080049e5 	.word	0x080049e5
 80048c8:	080049e5 	.word	0x080049e5
 80048cc:	08004963 	.word	0x08004963
 80048d0:	080049e5 	.word	0x080049e5
 80048d4:	080049e5 	.word	0x080049e5
 80048d8:	080049e5 	.word	0x080049e5
 80048dc:	080049a3 	.word	0x080049a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa48 	bl	8004d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0208 	orr.w	r2, r2, #8
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0204 	bic.w	r2, r2, #4
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	619a      	str	r2, [r3, #24]
      break;
 800491e:	e064      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa8e 	bl	8004e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800493a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	619a      	str	r2, [r3, #24]
      break;
 8004960:	e043      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fad9 	bl	8004f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0208 	orr.w	r2, r2, #8
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0204 	bic.w	r2, r2, #4
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	61da      	str	r2, [r3, #28]
      break;
 80049a0:	e023      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fb23 	bl	8004ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69d9      	ldr	r1, [r3, #28]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	021a      	lsls	r2, r3, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	61da      	str	r2, [r3, #28]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e0b4      	b.n	8004b82 <HAL_TIM_ConfigClockSource+0x186>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a50:	d03e      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a56:	f200 8087 	bhi.w	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	f000 8086 	beq.w	8004b6e <HAL_TIM_ConfigClockSource+0x172>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a66:	d87f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b70      	cmp	r3, #112	@ 0x70
 8004a6a:	d01a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a6c:	2b70      	cmp	r3, #112	@ 0x70
 8004a6e:	d87b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b60      	cmp	r3, #96	@ 0x60
 8004a72:	d050      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x11a>
 8004a74:	2b60      	cmp	r3, #96	@ 0x60
 8004a76:	d877      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b50      	cmp	r3, #80	@ 0x50
 8004a7a:	d03c      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a7c:	2b50      	cmp	r3, #80	@ 0x50
 8004a7e:	d873      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d058      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x13a>
 8004a84:	2b40      	cmp	r3, #64	@ 0x40
 8004a86:	d86f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d064      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b30      	cmp	r3, #48	@ 0x30
 8004a8e:	d86b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d060      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d867      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d05a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	e062      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	f000 fb69 	bl	8005188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	609a      	str	r2, [r3, #8]
      break;
 8004ace:	e04f      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	f000 fb52 	bl	8005188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af2:	609a      	str	r2, [r3, #8]
      break;
 8004af4:	e03c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fac6 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2150      	movs	r1, #80	@ 0x50
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb1f 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004b14:	e02c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 fae5 	bl	80050f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2160      	movs	r1, #96	@ 0x60
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb0f 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004b34:	e01c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 faa6 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2140      	movs	r1, #64	@ 0x40
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 faff 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004b54:	e00c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 faf6 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004b66:	e003      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d831      	bhi.n	8004c04 <HAL_TIM_ReadCapturedValue+0x78>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004c05 	.word	0x08004c05
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c05 	.word	0x08004c05
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004c05 	.word	0x08004c05
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c05 	.word	0x08004c05
 8004bd8:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	60fb      	str	r3, [r7, #12]

      break;
 8004be4:	e00f      	b.n	8004c06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	60fb      	str	r3, [r7, #12]

      break;
 8004bee:	e00a      	b.n	8004c06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	60fb      	str	r3, [r7, #12]

      break;
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	60fb      	str	r3, [r7, #12]

      break;
 8004c02:	e000      	b.n	8004c06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c04:	bf00      	nop
  }

  return tmpreg;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3a      	ldr	r2, [pc, #232]	@ (8004d60 <TIM_Base_SetConfig+0xfc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a37      	ldr	r2, [pc, #220]	@ (8004d64 <TIM_Base_SetConfig+0x100>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <TIM_Base_SetConfig+0x104>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <TIM_Base_SetConfig+0x108>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d60 <TIM_Base_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d017      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <TIM_Base_SetConfig+0x100>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <TIM_Base_SetConfig+0x104>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00f      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	@ (8004d6c <TIM_Base_SetConfig+0x108>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	@ (8004d70 <TIM_Base_SetConfig+0x10c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d007      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <TIM_Base_SetConfig+0x110>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	@ (8004d78 <TIM_Base_SetConfig+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0e      	ldr	r2, [pc, #56]	@ (8004d60 <TIM_Base_SetConfig+0xfc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d103      	bne.n	8004d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]
  }
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f023 0201 	bic.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0302 	bic.w	r3, r3, #2
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <TIM_OC1_SetConfig+0xc8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10c      	bne.n	8004df2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0308 	bic.w	r3, r3, #8
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <TIM_OC1_SetConfig+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40010000 	.word	0x40010000

08004e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 0210 	bic.w	r2, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0320 	bic.w	r3, r3, #32
 8004e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f1c <TIM_OC2_SetConfig+0xd4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <TIM_OC2_SetConfig+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d113      	bne.n	8004ef4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000

08004f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10d      	bne.n	8004f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800503e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a10      	ldr	r2, [pc, #64]	@ (8005090 <TIM_OC4_SetConfig+0x9c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800505a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40010000 	.word	0x40010000

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f023 0210 	bic.w	r2, r3, #16
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800511c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800512e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	f043 0307 	orr.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2201      	movs	r2, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	401a      	ands	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e050      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1c      	ldr	r2, [pc, #112]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005278:	d013      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a16      	ldr	r2, [pc, #88]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a15      	ldr	r2, [pc, #84]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a13      	ldr	r2, [pc, #76]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40014000 	.word	0x40014000

080052f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e04a      	b.n	80053c0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fdfe 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	@ 0x24
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800535a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f97b 	bl	8005658 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005380:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d175      	bne.n	80054d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_UART_Transmit+0x2c>
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e06e      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2221      	movs	r2, #33	@ 0x21
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005406:	f7fc feff 	bl	8002208 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005420:	d108      	bne.n	8005434 <HAL_UART_Transmit+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e003      	b.n	800543c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800543c:	e02e      	b.n	800549c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	2180      	movs	r1, #128	@ 0x80
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f848 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e03a      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3302      	adds	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	e007      	b.n	800548e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1cb      	bne.n	800543e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	2140      	movs	r1, #64	@ 0x40
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f814 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	e03b      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d037      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fc fe86 	bl	8002208 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <UART_WaitOnFlagUntilTimeout+0x30>
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e03a      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d023      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b80      	cmp	r3, #128	@ 0x80
 8005524:	d020      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b40      	cmp	r3, #64	@ 0x40
 800552a:	d01d      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d116      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f81d 	bl	8005590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2208      	movs	r2, #8
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e00f      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	d0b4      	beq.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b095      	sub	sp, #84	@ 0x54
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	61fb      	str	r3, [r7, #28]
   return(result);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	d119      	bne.n	800563c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60bb      	str	r3, [r7, #8]
   return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005628:	61ba      	str	r2, [r7, #24]
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	@ 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800565c:	b0c0      	sub	sp, #256	@ 0x100
 800565e:	af00      	add	r7, sp, #0
 8005660:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	68d9      	ldr	r1, [r3, #12]
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	ea40 0301 	orr.w	r3, r0, r1
 8005680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	431a      	orrs	r2, r3
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056b0:	f021 010c 	bic.w	r1, r1, #12
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056be:	430b      	orrs	r3, r1
 80056c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d2:	6999      	ldr	r1, [r3, #24]
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	ea40 0301 	orr.w	r3, r0, r1
 80056de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005924 <UART_SetConfig+0x2cc>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d005      	beq.n	80056f8 <UART_SetConfig+0xa0>
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005928 <UART_SetConfig+0x2d0>)
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d104      	bne.n	8005702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f8:	f7fe fc14 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 80056fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005700:	e003      	b.n	800570a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005702:	f7fe fbfb 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8005706:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005714:	f040 810c 	bne.w	8005930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571c:	2200      	movs	r2, #0
 800571e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005722:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	1891      	adds	r1, r2, r2
 8005730:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005732:	415b      	adcs	r3, r3
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800573a:	4621      	mov	r1, r4
 800573c:	eb12 0801 	adds.w	r8, r2, r1
 8005740:	4629      	mov	r1, r5
 8005742:	eb43 0901 	adc.w	r9, r3, r1
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575a:	4690      	mov	r8, r2
 800575c:	4699      	mov	r9, r3
 800575e:	4623      	mov	r3, r4
 8005760:	eb18 0303 	adds.w	r3, r8, r3
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005768:	462b      	mov	r3, r5
 800576a:	eb49 0303 	adc.w	r3, r9, r3
 800576e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800577e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005786:	460b      	mov	r3, r1
 8005788:	18db      	adds	r3, r3, r3
 800578a:	653b      	str	r3, [r7, #80]	@ 0x50
 800578c:	4613      	mov	r3, r2
 800578e:	eb42 0303 	adc.w	r3, r2, r3
 8005792:	657b      	str	r3, [r7, #84]	@ 0x54
 8005794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800579c:	f7fb f966 	bl	8000a6c <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4b61      	ldr	r3, [pc, #388]	@ (800592c <UART_SetConfig+0x2d4>)
 80057a6:	fba3 2302 	umull	r2, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	011c      	lsls	r4, r3, #4
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057c8:	415b      	adcs	r3, r3
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057d0:	4641      	mov	r1, r8
 80057d2:	eb12 0a01 	adds.w	sl, r2, r1
 80057d6:	4649      	mov	r1, r9
 80057d8:	eb43 0b01 	adc.w	fp, r3, r1
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f0:	4692      	mov	sl, r2
 80057f2:	469b      	mov	fp, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	eb1a 0303 	adds.w	r3, sl, r3
 80057fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057fe:	464b      	mov	r3, r9
 8005800:	eb4b 0303 	adc.w	r3, fp, r3
 8005804:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005814:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800581c:	460b      	mov	r3, r1
 800581e:	18db      	adds	r3, r3, r3
 8005820:	643b      	str	r3, [r7, #64]	@ 0x40
 8005822:	4613      	mov	r3, r2
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
 800582a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800582e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005832:	f7fb f91b 	bl	8000a6c <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4611      	mov	r1, r2
 800583c:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <UART_SetConfig+0x2d4>)
 800583e:	fba3 2301 	umull	r2, r3, r3, r1
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2264      	movs	r2, #100	@ 0x64
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	1acb      	subs	r3, r1, r3
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005852:	4b36      	ldr	r3, [pc, #216]	@ (800592c <UART_SetConfig+0x2d4>)
 8005854:	fba3 2302 	umull	r2, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005860:	441c      	add	r4, r3
 8005862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005866:	2200      	movs	r2, #0
 8005868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800586c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	1891      	adds	r1, r2, r2
 800587a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800587c:	415b      	adcs	r3, r3
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005884:	4641      	mov	r1, r8
 8005886:	1851      	adds	r1, r2, r1
 8005888:	6339      	str	r1, [r7, #48]	@ 0x30
 800588a:	4649      	mov	r1, r9
 800588c:	414b      	adcs	r3, r1
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800589c:	4659      	mov	r1, fp
 800589e:	00cb      	lsls	r3, r1, #3
 80058a0:	4651      	mov	r1, sl
 80058a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058a6:	4651      	mov	r1, sl
 80058a8:	00ca      	lsls	r2, r1, #3
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	4642      	mov	r2, r8
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058b8:	464b      	mov	r3, r9
 80058ba:	460a      	mov	r2, r1
 80058bc:	eb42 0303 	adc.w	r3, r2, r3
 80058c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058d8:	460b      	mov	r3, r1
 80058da:	18db      	adds	r3, r3, r3
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058de:	4613      	mov	r3, r2
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058ee:	f7fb f8bd 	bl	8000a6c <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <UART_SetConfig+0x2d4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	@ 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	3332      	adds	r3, #50	@ 0x32
 800590a:	4a08      	ldr	r2, [pc, #32]	@ (800592c <UART_SetConfig+0x2d4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 0207 	and.w	r2, r3, #7
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4422      	add	r2, r4
 800591e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005920:	e106      	b.n	8005b30 <UART_SetConfig+0x4d8>
 8005922:	bf00      	nop
 8005924:	40011000 	.word	0x40011000
 8005928:	40011400 	.word	0x40011400
 800592c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800593a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800593e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005942:	4642      	mov	r2, r8
 8005944:	464b      	mov	r3, r9
 8005946:	1891      	adds	r1, r2, r2
 8005948:	6239      	str	r1, [r7, #32]
 800594a:	415b      	adcs	r3, r3
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
 800594e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005952:	4641      	mov	r1, r8
 8005954:	1854      	adds	r4, r2, r1
 8005956:	4649      	mov	r1, r9
 8005958:	eb43 0501 	adc.w	r5, r3, r1
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	00eb      	lsls	r3, r5, #3
 8005966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596a:	00e2      	lsls	r2, r4, #3
 800596c:	4614      	mov	r4, r2
 800596e:	461d      	mov	r5, r3
 8005970:	4643      	mov	r3, r8
 8005972:	18e3      	adds	r3, r4, r3
 8005974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005978:	464b      	mov	r3, r9
 800597a:	eb45 0303 	adc.w	r3, r5, r3
 800597e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800598e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800599e:	4629      	mov	r1, r5
 80059a0:	008b      	lsls	r3, r1, #2
 80059a2:	4621      	mov	r1, r4
 80059a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a8:	4621      	mov	r1, r4
 80059aa:	008a      	lsls	r2, r1, #2
 80059ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059b0:	f7fb f85c 	bl	8000a6c <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b60      	ldr	r3, [pc, #384]	@ (8005b3c <UART_SetConfig+0x4e4>)
 80059ba:	fba3 2302 	umull	r2, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	011c      	lsls	r4, r3, #4
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	61b9      	str	r1, [r7, #24]
 80059dc:	415b      	adcs	r3, r3
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059e4:	4641      	mov	r1, r8
 80059e6:	1851      	adds	r1, r2, r1
 80059e8:	6139      	str	r1, [r7, #16]
 80059ea:	4649      	mov	r1, r9
 80059ec:	414b      	adcs	r3, r1
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059fc:	4659      	mov	r1, fp
 80059fe:	00cb      	lsls	r3, r1, #3
 8005a00:	4651      	mov	r1, sl
 8005a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a06:	4651      	mov	r1, sl
 8005a08:	00ca      	lsls	r2, r1, #3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4642      	mov	r2, r8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a18:	464b      	mov	r3, r9
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	008b      	lsls	r3, r1, #2
 8005a40:	4641      	mov	r1, r8
 8005a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a46:	4641      	mov	r1, r8
 8005a48:	008a      	lsls	r2, r1, #2
 8005a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a4e:	f7fb f80d 	bl	8000a6c <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b38      	ldr	r3, [pc, #224]	@ (8005b3c <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	@ 0x32
 8005a6c:	4a33      	ldr	r2, [pc, #204]	@ (8005b3c <UART_SetConfig+0x4e4>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a78:	441c      	add	r4, r3
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	415b      	adcs	r3, r3
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aca:	464b      	mov	r3, r9
 8005acc:	460a      	mov	r2, r1
 8005ace:	eb42 0303 	adc.w	r3, r2, r3
 8005ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ade:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005aec:	4649      	mov	r1, r9
 8005aee:	008b      	lsls	r3, r1, #2
 8005af0:	4641      	mov	r1, r8
 8005af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af6:	4641      	mov	r1, r8
 8005af8:	008a      	lsls	r2, r1, #2
 8005afa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005afe:	f7fa ffb5 	bl	8000a6c <__aeabi_uldivmod>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <UART_SetConfig+0x4e4>)
 8005b08:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2164      	movs	r1, #100	@ 0x64
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	3332      	adds	r3, #50	@ 0x32
 8005b1a:	4a08      	ldr	r2, [pc, #32]	@ (8005b3c <UART_SetConfig+0x4e4>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4422      	add	r2, r4
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b36:	46bd      	mov	sp, r7
 8005b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3c:	51eb851f 	.word	0x51eb851f

08005b40 <siprintf>:
 8005b40:	b40e      	push	{r1, r2, r3}
 8005b42:	b500      	push	{lr}
 8005b44:	b09c      	sub	sp, #112	@ 0x70
 8005b46:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b48:	9002      	str	r0, [sp, #8]
 8005b4a:	9006      	str	r0, [sp, #24]
 8005b4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b50:	4809      	ldr	r0, [pc, #36]	@ (8005b78 <siprintf+0x38>)
 8005b52:	9107      	str	r1, [sp, #28]
 8005b54:	9104      	str	r1, [sp, #16]
 8005b56:	4909      	ldr	r1, [pc, #36]	@ (8005b7c <siprintf+0x3c>)
 8005b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5c:	9105      	str	r1, [sp, #20]
 8005b5e:	6800      	ldr	r0, [r0, #0]
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	a902      	add	r1, sp, #8
 8005b64:	f000 f9a2 	bl	8005eac <_svfiprintf_r>
 8005b68:	9b02      	ldr	r3, [sp, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	b01c      	add	sp, #112	@ 0x70
 8005b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b74:	b003      	add	sp, #12
 8005b76:	4770      	bx	lr
 8005b78:	20000010 	.word	0x20000010
 8005b7c:	ffff0208 	.word	0xffff0208

08005b80 <memset>:
 8005b80:	4402      	add	r2, r0
 8005b82:	4603      	mov	r3, r0
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d100      	bne.n	8005b8a <memset+0xa>
 8005b88:	4770      	bx	lr
 8005b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8e:	e7f9      	b.n	8005b84 <memset+0x4>

08005b90 <__errno>:
 8005b90:	4b01      	ldr	r3, [pc, #4]	@ (8005b98 <__errno+0x8>)
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000010 	.word	0x20000010

08005b9c <__libc_init_array>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005bd4 <__libc_init_array+0x38>)
 8005ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8005bd8 <__libc_init_array+0x3c>)
 8005ba2:	1b64      	subs	r4, r4, r5
 8005ba4:	10a4      	asrs	r4, r4, #2
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	42a6      	cmp	r6, r4
 8005baa:	d109      	bne.n	8005bc0 <__libc_init_array+0x24>
 8005bac:	4d0b      	ldr	r5, [pc, #44]	@ (8005bdc <__libc_init_array+0x40>)
 8005bae:	4c0c      	ldr	r4, [pc, #48]	@ (8005be0 <__libc_init_array+0x44>)
 8005bb0:	f000 fc66 	bl	8006480 <_init>
 8005bb4:	1b64      	subs	r4, r4, r5
 8005bb6:	10a4      	asrs	r4, r4, #2
 8005bb8:	2600      	movs	r6, #0
 8005bba:	42a6      	cmp	r6, r4
 8005bbc:	d105      	bne.n	8005bca <__libc_init_array+0x2e>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc4:	4798      	blx	r3
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7ee      	b.n	8005ba8 <__libc_init_array+0xc>
 8005bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bce:	4798      	blx	r3
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	e7f2      	b.n	8005bba <__libc_init_array+0x1e>
 8005bd4:	080065f8 	.word	0x080065f8
 8005bd8:	080065f8 	.word	0x080065f8
 8005bdc:	080065f8 	.word	0x080065f8
 8005be0:	080065fc 	.word	0x080065fc

08005be4 <__retarget_lock_acquire_recursive>:
 8005be4:	4770      	bx	lr

08005be6 <__retarget_lock_release_recursive>:
 8005be6:	4770      	bx	lr

08005be8 <memcpy>:
 8005be8:	440a      	add	r2, r1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	4770      	bx	lr
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d1f9      	bne.n	8005bf6 <memcpy+0xe>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <_free_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4605      	mov	r5, r0
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	d041      	beq.n	8005c90 <_free_r+0x8c>
 8005c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c10:	1f0c      	subs	r4, r1, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfb8      	it	lt
 8005c16:	18e4      	addlt	r4, r4, r3
 8005c18:	f000 f8e0 	bl	8005ddc <__malloc_lock>
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <_free_r+0x90>)
 8005c1e:	6813      	ldr	r3, [r2, #0]
 8005c20:	b933      	cbnz	r3, 8005c30 <_free_r+0x2c>
 8005c22:	6063      	str	r3, [r4, #4]
 8005c24:	6014      	str	r4, [r2, #0]
 8005c26:	4628      	mov	r0, r5
 8005c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c2c:	f000 b8dc 	b.w	8005de8 <__malloc_unlock>
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	d908      	bls.n	8005c46 <_free_r+0x42>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	1821      	adds	r1, r4, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf01      	itttt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	e7ed      	b.n	8005c22 <_free_r+0x1e>
 8005c46:	461a      	mov	r2, r3
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b10b      	cbz	r3, 8005c50 <_free_r+0x4c>
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	d9fa      	bls.n	8005c46 <_free_r+0x42>
 8005c50:	6811      	ldr	r1, [r2, #0]
 8005c52:	1850      	adds	r0, r2, r1
 8005c54:	42a0      	cmp	r0, r4
 8005c56:	d10b      	bne.n	8005c70 <_free_r+0x6c>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	4401      	add	r1, r0
 8005c5c:	1850      	adds	r0, r2, r1
 8005c5e:	4283      	cmp	r3, r0
 8005c60:	6011      	str	r1, [r2, #0]
 8005c62:	d1e0      	bne.n	8005c26 <_free_r+0x22>
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	6053      	str	r3, [r2, #4]
 8005c6a:	4408      	add	r0, r1
 8005c6c:	6010      	str	r0, [r2, #0]
 8005c6e:	e7da      	b.n	8005c26 <_free_r+0x22>
 8005c70:	d902      	bls.n	8005c78 <_free_r+0x74>
 8005c72:	230c      	movs	r3, #12
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	e7d6      	b.n	8005c26 <_free_r+0x22>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	1821      	adds	r1, r4, r0
 8005c7c:	428b      	cmp	r3, r1
 8005c7e:	bf04      	itt	eq
 8005c80:	6819      	ldreq	r1, [r3, #0]
 8005c82:	685b      	ldreq	r3, [r3, #4]
 8005c84:	6063      	str	r3, [r4, #4]
 8005c86:	bf04      	itt	eq
 8005c88:	1809      	addeq	r1, r1, r0
 8005c8a:	6021      	streq	r1, [r4, #0]
 8005c8c:	6054      	str	r4, [r2, #4]
 8005c8e:	e7ca      	b.n	8005c26 <_free_r+0x22>
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	bf00      	nop
 8005c94:	20000514 	.word	0x20000514

08005c98 <sbrk_aligned>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8005cd8 <sbrk_aligned+0x40>)
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	6831      	ldr	r1, [r6, #0]
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	b911      	cbnz	r1, 8005caa <sbrk_aligned+0x12>
 8005ca4:	f000 fba6 	bl	80063f4 <_sbrk_r>
 8005ca8:	6030      	str	r0, [r6, #0]
 8005caa:	4621      	mov	r1, r4
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fba1 	bl	80063f4 <_sbrk_r>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d103      	bne.n	8005cbe <sbrk_aligned+0x26>
 8005cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8005cba:	4620      	mov	r0, r4
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	1cc4      	adds	r4, r0, #3
 8005cc0:	f024 0403 	bic.w	r4, r4, #3
 8005cc4:	42a0      	cmp	r0, r4
 8005cc6:	d0f8      	beq.n	8005cba <sbrk_aligned+0x22>
 8005cc8:	1a21      	subs	r1, r4, r0
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 fb92 	bl	80063f4 <_sbrk_r>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d1f2      	bne.n	8005cba <sbrk_aligned+0x22>
 8005cd4:	e7ef      	b.n	8005cb6 <sbrk_aligned+0x1e>
 8005cd6:	bf00      	nop
 8005cd8:	20000510 	.word	0x20000510

08005cdc <_malloc_r>:
 8005cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	1ccd      	adds	r5, r1, #3
 8005ce2:	f025 0503 	bic.w	r5, r5, #3
 8005ce6:	3508      	adds	r5, #8
 8005ce8:	2d0c      	cmp	r5, #12
 8005cea:	bf38      	it	cc
 8005cec:	250c      	movcc	r5, #12
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	db01      	blt.n	8005cf8 <_malloc_r+0x1c>
 8005cf4:	42a9      	cmp	r1, r5
 8005cf6:	d904      	bls.n	8005d02 <_malloc_r+0x26>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dd8 <_malloc_r+0xfc>
 8005d06:	f000 f869 	bl	8005ddc <__malloc_lock>
 8005d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0e:	461c      	mov	r4, r3
 8005d10:	bb44      	cbnz	r4, 8005d64 <_malloc_r+0x88>
 8005d12:	4629      	mov	r1, r5
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff ffbf 	bl	8005c98 <sbrk_aligned>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	d158      	bne.n	8005dd2 <_malloc_r+0xf6>
 8005d20:	f8d8 4000 	ldr.w	r4, [r8]
 8005d24:	4627      	mov	r7, r4
 8005d26:	2f00      	cmp	r7, #0
 8005d28:	d143      	bne.n	8005db2 <_malloc_r+0xd6>
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d04b      	beq.n	8005dc6 <_malloc_r+0xea>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	4639      	mov	r1, r7
 8005d32:	4630      	mov	r0, r6
 8005d34:	eb04 0903 	add.w	r9, r4, r3
 8005d38:	f000 fb5c 	bl	80063f4 <_sbrk_r>
 8005d3c:	4581      	cmp	r9, r0
 8005d3e:	d142      	bne.n	8005dc6 <_malloc_r+0xea>
 8005d40:	6821      	ldr	r1, [r4, #0]
 8005d42:	1a6d      	subs	r5, r5, r1
 8005d44:	4629      	mov	r1, r5
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7ff ffa6 	bl	8005c98 <sbrk_aligned>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d03a      	beq.n	8005dc6 <_malloc_r+0xea>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	442b      	add	r3, r5
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	f8d8 3000 	ldr.w	r3, [r8]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	bb62      	cbnz	r2, 8005db8 <_malloc_r+0xdc>
 8005d5e:	f8c8 7000 	str.w	r7, [r8]
 8005d62:	e00f      	b.n	8005d84 <_malloc_r+0xa8>
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	1b52      	subs	r2, r2, r5
 8005d68:	d420      	bmi.n	8005dac <_malloc_r+0xd0>
 8005d6a:	2a0b      	cmp	r2, #11
 8005d6c:	d917      	bls.n	8005d9e <_malloc_r+0xc2>
 8005d6e:	1961      	adds	r1, r4, r5
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	6025      	str	r5, [r4, #0]
 8005d74:	bf18      	it	ne
 8005d76:	6059      	strne	r1, [r3, #4]
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	bf08      	it	eq
 8005d7c:	f8c8 1000 	streq.w	r1, [r8]
 8005d80:	5162      	str	r2, [r4, r5]
 8005d82:	604b      	str	r3, [r1, #4]
 8005d84:	4630      	mov	r0, r6
 8005d86:	f000 f82f 	bl	8005de8 <__malloc_unlock>
 8005d8a:	f104 000b 	add.w	r0, r4, #11
 8005d8e:	1d23      	adds	r3, r4, #4
 8005d90:	f020 0007 	bic.w	r0, r0, #7
 8005d94:	1ac2      	subs	r2, r0, r3
 8005d96:	bf1c      	itt	ne
 8005d98:	1a1b      	subne	r3, r3, r0
 8005d9a:	50a3      	strne	r3, [r4, r2]
 8005d9c:	e7af      	b.n	8005cfe <_malloc_r+0x22>
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	bf0c      	ite	eq
 8005da4:	f8c8 2000 	streq.w	r2, [r8]
 8005da8:	605a      	strne	r2, [r3, #4]
 8005daa:	e7eb      	b.n	8005d84 <_malloc_r+0xa8>
 8005dac:	4623      	mov	r3, r4
 8005dae:	6864      	ldr	r4, [r4, #4]
 8005db0:	e7ae      	b.n	8005d10 <_malloc_r+0x34>
 8005db2:	463c      	mov	r4, r7
 8005db4:	687f      	ldr	r7, [r7, #4]
 8005db6:	e7b6      	b.n	8005d26 <_malloc_r+0x4a>
 8005db8:	461a      	mov	r2, r3
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d1fb      	bne.n	8005db8 <_malloc_r+0xdc>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6053      	str	r3, [r2, #4]
 8005dc4:	e7de      	b.n	8005d84 <_malloc_r+0xa8>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f000 f80c 	bl	8005de8 <__malloc_unlock>
 8005dd0:	e794      	b.n	8005cfc <_malloc_r+0x20>
 8005dd2:	6005      	str	r5, [r0, #0]
 8005dd4:	e7d6      	b.n	8005d84 <_malloc_r+0xa8>
 8005dd6:	bf00      	nop
 8005dd8:	20000514 	.word	0x20000514

08005ddc <__malloc_lock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	@ (8005de4 <__malloc_lock+0x8>)
 8005dde:	f7ff bf01 	b.w	8005be4 <__retarget_lock_acquire_recursive>
 8005de2:	bf00      	nop
 8005de4:	2000050c 	.word	0x2000050c

08005de8 <__malloc_unlock>:
 8005de8:	4801      	ldr	r0, [pc, #4]	@ (8005df0 <__malloc_unlock+0x8>)
 8005dea:	f7ff befc 	b.w	8005be6 <__retarget_lock_release_recursive>
 8005dee:	bf00      	nop
 8005df0:	2000050c 	.word	0x2000050c

08005df4 <__ssputs_r>:
 8005df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	688e      	ldr	r6, [r1, #8]
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	42be      	cmp	r6, r7
 8005dfe:	680b      	ldr	r3, [r1, #0]
 8005e00:	4682      	mov	sl, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4690      	mov	r8, r2
 8005e06:	d82d      	bhi.n	8005e64 <__ssputs_r+0x70>
 8005e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e10:	d026      	beq.n	8005e60 <__ssputs_r+0x6c>
 8005e12:	6965      	ldr	r5, [r4, #20]
 8005e14:	6909      	ldr	r1, [r1, #16]
 8005e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e1a:	eba3 0901 	sub.w	r9, r3, r1
 8005e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e22:	1c7b      	adds	r3, r7, #1
 8005e24:	444b      	add	r3, r9
 8005e26:	106d      	asrs	r5, r5, #1
 8005e28:	429d      	cmp	r5, r3
 8005e2a:	bf38      	it	cc
 8005e2c:	461d      	movcc	r5, r3
 8005e2e:	0553      	lsls	r3, r2, #21
 8005e30:	d527      	bpl.n	8005e82 <__ssputs_r+0x8e>
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7ff ff52 	bl	8005cdc <_malloc_r>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	b360      	cbz	r0, 8005e96 <__ssputs_r+0xa2>
 8005e3c:	6921      	ldr	r1, [r4, #16]
 8005e3e:	464a      	mov	r2, r9
 8005e40:	f7ff fed2 	bl	8005be8 <memcpy>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	6126      	str	r6, [r4, #16]
 8005e52:	6165      	str	r5, [r4, #20]
 8005e54:	444e      	add	r6, r9
 8005e56:	eba5 0509 	sub.w	r5, r5, r9
 8005e5a:	6026      	str	r6, [r4, #0]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	463e      	mov	r6, r7
 8005e60:	42be      	cmp	r6, r7
 8005e62:	d900      	bls.n	8005e66 <__ssputs_r+0x72>
 8005e64:	463e      	mov	r6, r7
 8005e66:	6820      	ldr	r0, [r4, #0]
 8005e68:	4632      	mov	r2, r6
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	f000 faa8 	bl	80063c0 <memmove>
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	1b9b      	subs	r3, r3, r6
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	4433      	add	r3, r6
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	462a      	mov	r2, r5
 8005e84:	f000 fac6 	bl	8006414 <_realloc_r>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d1e0      	bne.n	8005e50 <__ssputs_r+0x5c>
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	4650      	mov	r0, sl
 8005e92:	f7ff feb7 	bl	8005c04 <_free_r>
 8005e96:	230c      	movs	r3, #12
 8005e98:	f8ca 3000 	str.w	r3, [sl]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e7e9      	b.n	8005e7e <__ssputs_r+0x8a>
	...

08005eac <_svfiprintf_r>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	898b      	ldrh	r3, [r1, #12]
 8005eb4:	061b      	lsls	r3, r3, #24
 8005eb6:	b09d      	sub	sp, #116	@ 0x74
 8005eb8:	4607      	mov	r7, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	d510      	bpl.n	8005ee2 <_svfiprintf_r+0x36>
 8005ec0:	690b      	ldr	r3, [r1, #16]
 8005ec2:	b973      	cbnz	r3, 8005ee2 <_svfiprintf_r+0x36>
 8005ec4:	2140      	movs	r1, #64	@ 0x40
 8005ec6:	f7ff ff09 	bl	8005cdc <_malloc_r>
 8005eca:	6028      	str	r0, [r5, #0]
 8005ecc:	6128      	str	r0, [r5, #16]
 8005ece:	b930      	cbnz	r0, 8005ede <_svfiprintf_r+0x32>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	b01d      	add	sp, #116	@ 0x74
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	2340      	movs	r3, #64	@ 0x40
 8005ee0:	616b      	str	r3, [r5, #20]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee6:	2320      	movs	r3, #32
 8005ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef0:	2330      	movs	r3, #48	@ 0x30
 8005ef2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006090 <_svfiprintf_r+0x1e4>
 8005ef6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005efa:	f04f 0901 	mov.w	r9, #1
 8005efe:	4623      	mov	r3, r4
 8005f00:	469a      	mov	sl, r3
 8005f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f06:	b10a      	cbz	r2, 8005f0c <_svfiprintf_r+0x60>
 8005f08:	2a25      	cmp	r2, #37	@ 0x25
 8005f0a:	d1f9      	bne.n	8005f00 <_svfiprintf_r+0x54>
 8005f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f10:	d00b      	beq.n	8005f2a <_svfiprintf_r+0x7e>
 8005f12:	465b      	mov	r3, fp
 8005f14:	4622      	mov	r2, r4
 8005f16:	4629      	mov	r1, r5
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7ff ff6b 	bl	8005df4 <__ssputs_r>
 8005f1e:	3001      	adds	r0, #1
 8005f20:	f000 80a7 	beq.w	8006072 <_svfiprintf_r+0x1c6>
 8005f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f26:	445a      	add	r2, fp
 8005f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 809f 	beq.w	8006072 <_svfiprintf_r+0x1c6>
 8005f34:	2300      	movs	r3, #0
 8005f36:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3e:	f10a 0a01 	add.w	sl, sl, #1
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f4c:	4654      	mov	r4, sl
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f54:	484e      	ldr	r0, [pc, #312]	@ (8006090 <_svfiprintf_r+0x1e4>)
 8005f56:	f7fa f94b 	bl	80001f0 <memchr>
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	b9d8      	cbnz	r0, 8005f96 <_svfiprintf_r+0xea>
 8005f5e:	06d0      	lsls	r0, r2, #27
 8005f60:	bf44      	itt	mi
 8005f62:	2320      	movmi	r3, #32
 8005f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f68:	0711      	lsls	r1, r2, #28
 8005f6a:	bf44      	itt	mi
 8005f6c:	232b      	movmi	r3, #43	@ 0x2b
 8005f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f72:	f89a 3000 	ldrb.w	r3, [sl]
 8005f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f78:	d015      	beq.n	8005fa6 <_svfiprintf_r+0xfa>
 8005f7a:	9a07      	ldr	r2, [sp, #28]
 8005f7c:	4654      	mov	r4, sl
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f04f 0c0a 	mov.w	ip, #10
 8005f84:	4621      	mov	r1, r4
 8005f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f8a:	3b30      	subs	r3, #48	@ 0x30
 8005f8c:	2b09      	cmp	r3, #9
 8005f8e:	d94b      	bls.n	8006028 <_svfiprintf_r+0x17c>
 8005f90:	b1b0      	cbz	r0, 8005fc0 <_svfiprintf_r+0x114>
 8005f92:	9207      	str	r2, [sp, #28]
 8005f94:	e014      	b.n	8005fc0 <_svfiprintf_r+0x114>
 8005f96:	eba0 0308 	sub.w	r3, r0, r8
 8005f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	46a2      	mov	sl, r4
 8005fa4:	e7d2      	b.n	8005f4c <_svfiprintf_r+0xa0>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	9103      	str	r1, [sp, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfbb      	ittet	lt
 8005fb2:	425b      	neglt	r3, r3
 8005fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb8:	9307      	strge	r3, [sp, #28]
 8005fba:	9307      	strlt	r3, [sp, #28]
 8005fbc:	bfb8      	it	lt
 8005fbe:	9204      	strlt	r2, [sp, #16]
 8005fc0:	7823      	ldrb	r3, [r4, #0]
 8005fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fc4:	d10a      	bne.n	8005fdc <_svfiprintf_r+0x130>
 8005fc6:	7863      	ldrb	r3, [r4, #1]
 8005fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fca:	d132      	bne.n	8006032 <_svfiprintf_r+0x186>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	1d1a      	adds	r2, r3, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	9203      	str	r2, [sp, #12]
 8005fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fd8:	3402      	adds	r4, #2
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060a0 <_svfiprintf_r+0x1f4>
 8005fe0:	7821      	ldrb	r1, [r4, #0]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	f7fa f903 	bl	80001f0 <memchr>
 8005fea:	b138      	cbz	r0, 8005ffc <_svfiprintf_r+0x150>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	eba0 000a 	sub.w	r0, r0, sl
 8005ff2:	2240      	movs	r2, #64	@ 0x40
 8005ff4:	4082      	lsls	r2, r0
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006000:	4824      	ldr	r0, [pc, #144]	@ (8006094 <_svfiprintf_r+0x1e8>)
 8006002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006006:	2206      	movs	r2, #6
 8006008:	f7fa f8f2 	bl	80001f0 <memchr>
 800600c:	2800      	cmp	r0, #0
 800600e:	d036      	beq.n	800607e <_svfiprintf_r+0x1d2>
 8006010:	4b21      	ldr	r3, [pc, #132]	@ (8006098 <_svfiprintf_r+0x1ec>)
 8006012:	bb1b      	cbnz	r3, 800605c <_svfiprintf_r+0x1b0>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	3307      	adds	r3, #7
 8006018:	f023 0307 	bic.w	r3, r3, #7
 800601c:	3308      	adds	r3, #8
 800601e:	9303      	str	r3, [sp, #12]
 8006020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006022:	4433      	add	r3, r6
 8006024:	9309      	str	r3, [sp, #36]	@ 0x24
 8006026:	e76a      	b.n	8005efe <_svfiprintf_r+0x52>
 8006028:	fb0c 3202 	mla	r2, ip, r2, r3
 800602c:	460c      	mov	r4, r1
 800602e:	2001      	movs	r0, #1
 8006030:	e7a8      	b.n	8005f84 <_svfiprintf_r+0xd8>
 8006032:	2300      	movs	r3, #0
 8006034:	3401      	adds	r4, #1
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	4619      	mov	r1, r3
 800603a:	f04f 0c0a 	mov.w	ip, #10
 800603e:	4620      	mov	r0, r4
 8006040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006044:	3a30      	subs	r2, #48	@ 0x30
 8006046:	2a09      	cmp	r2, #9
 8006048:	d903      	bls.n	8006052 <_svfiprintf_r+0x1a6>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0c6      	beq.n	8005fdc <_svfiprintf_r+0x130>
 800604e:	9105      	str	r1, [sp, #20]
 8006050:	e7c4      	b.n	8005fdc <_svfiprintf_r+0x130>
 8006052:	fb0c 2101 	mla	r1, ip, r1, r2
 8006056:	4604      	mov	r4, r0
 8006058:	2301      	movs	r3, #1
 800605a:	e7f0      	b.n	800603e <_svfiprintf_r+0x192>
 800605c:	ab03      	add	r3, sp, #12
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	462a      	mov	r2, r5
 8006062:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <_svfiprintf_r+0x1f0>)
 8006064:	a904      	add	r1, sp, #16
 8006066:	4638      	mov	r0, r7
 8006068:	f3af 8000 	nop.w
 800606c:	1c42      	adds	r2, r0, #1
 800606e:	4606      	mov	r6, r0
 8006070:	d1d6      	bne.n	8006020 <_svfiprintf_r+0x174>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	065b      	lsls	r3, r3, #25
 8006076:	f53f af2d 	bmi.w	8005ed4 <_svfiprintf_r+0x28>
 800607a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800607c:	e72c      	b.n	8005ed8 <_svfiprintf_r+0x2c>
 800607e:	ab03      	add	r3, sp, #12
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	462a      	mov	r2, r5
 8006084:	4b05      	ldr	r3, [pc, #20]	@ (800609c <_svfiprintf_r+0x1f0>)
 8006086:	a904      	add	r1, sp, #16
 8006088:	4638      	mov	r0, r7
 800608a:	f000 f879 	bl	8006180 <_printf_i>
 800608e:	e7ed      	b.n	800606c <_svfiprintf_r+0x1c0>
 8006090:	080065bc 	.word	0x080065bc
 8006094:	080065c6 	.word	0x080065c6
 8006098:	00000000 	.word	0x00000000
 800609c:	08005df5 	.word	0x08005df5
 80060a0:	080065c2 	.word	0x080065c2

080060a4 <_printf_common>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	4616      	mov	r6, r2
 80060aa:	4698      	mov	r8, r3
 80060ac:	688a      	ldr	r2, [r1, #8]
 80060ae:	690b      	ldr	r3, [r1, #16]
 80060b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bfb8      	it	lt
 80060b8:	4613      	movlt	r3, r2
 80060ba:	6033      	str	r3, [r6, #0]
 80060bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060c0:	4607      	mov	r7, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	b10a      	cbz	r2, 80060ca <_printf_common+0x26>
 80060c6:	3301      	adds	r3, #1
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	0699      	lsls	r1, r3, #26
 80060ce:	bf42      	ittt	mi
 80060d0:	6833      	ldrmi	r3, [r6, #0]
 80060d2:	3302      	addmi	r3, #2
 80060d4:	6033      	strmi	r3, [r6, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	f015 0506 	ands.w	r5, r5, #6
 80060dc:	d106      	bne.n	80060ec <_printf_common+0x48>
 80060de:	f104 0a19 	add.w	sl, r4, #25
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	6832      	ldr	r2, [r6, #0]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dc26      	bgt.n	800613a <_printf_common+0x96>
 80060ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060f0:	6822      	ldr	r2, [r4, #0]
 80060f2:	3b00      	subs	r3, #0
 80060f4:	bf18      	it	ne
 80060f6:	2301      	movne	r3, #1
 80060f8:	0692      	lsls	r2, r2, #26
 80060fa:	d42b      	bmi.n	8006154 <_printf_common+0xb0>
 80060fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006100:	4641      	mov	r1, r8
 8006102:	4638      	mov	r0, r7
 8006104:	47c8      	blx	r9
 8006106:	3001      	adds	r0, #1
 8006108:	d01e      	beq.n	8006148 <_printf_common+0xa4>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	f003 0306 	and.w	r3, r3, #6
 8006112:	2b04      	cmp	r3, #4
 8006114:	bf02      	ittt	eq
 8006116:	68e5      	ldreq	r5, [r4, #12]
 8006118:	6833      	ldreq	r3, [r6, #0]
 800611a:	1aed      	subeq	r5, r5, r3
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	bf0c      	ite	eq
 8006120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006124:	2500      	movne	r5, #0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfc4      	itt	gt
 800612a:	1a9b      	subgt	r3, r3, r2
 800612c:	18ed      	addgt	r5, r5, r3
 800612e:	2600      	movs	r6, #0
 8006130:	341a      	adds	r4, #26
 8006132:	42b5      	cmp	r5, r6
 8006134:	d11a      	bne.n	800616c <_printf_common+0xc8>
 8006136:	2000      	movs	r0, #0
 8006138:	e008      	b.n	800614c <_printf_common+0xa8>
 800613a:	2301      	movs	r3, #1
 800613c:	4652      	mov	r2, sl
 800613e:	4641      	mov	r1, r8
 8006140:	4638      	mov	r0, r7
 8006142:	47c8      	blx	r9
 8006144:	3001      	adds	r0, #1
 8006146:	d103      	bne.n	8006150 <_printf_common+0xac>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	3501      	adds	r5, #1
 8006152:	e7c6      	b.n	80060e2 <_printf_common+0x3e>
 8006154:	18e1      	adds	r1, r4, r3
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	2030      	movs	r0, #48	@ 0x30
 800615a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800615e:	4422      	add	r2, r4
 8006160:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006164:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006168:	3302      	adds	r3, #2
 800616a:	e7c7      	b.n	80060fc <_printf_common+0x58>
 800616c:	2301      	movs	r3, #1
 800616e:	4622      	mov	r2, r4
 8006170:	4641      	mov	r1, r8
 8006172:	4638      	mov	r0, r7
 8006174:	47c8      	blx	r9
 8006176:	3001      	adds	r0, #1
 8006178:	d0e6      	beq.n	8006148 <_printf_common+0xa4>
 800617a:	3601      	adds	r6, #1
 800617c:	e7d9      	b.n	8006132 <_printf_common+0x8e>
	...

08006180 <_printf_i>:
 8006180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	7e0f      	ldrb	r7, [r1, #24]
 8006186:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006188:	2f78      	cmp	r7, #120	@ 0x78
 800618a:	4691      	mov	r9, r2
 800618c:	4680      	mov	r8, r0
 800618e:	460c      	mov	r4, r1
 8006190:	469a      	mov	sl, r3
 8006192:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006196:	d807      	bhi.n	80061a8 <_printf_i+0x28>
 8006198:	2f62      	cmp	r7, #98	@ 0x62
 800619a:	d80a      	bhi.n	80061b2 <_printf_i+0x32>
 800619c:	2f00      	cmp	r7, #0
 800619e:	f000 80d2 	beq.w	8006346 <_printf_i+0x1c6>
 80061a2:	2f58      	cmp	r7, #88	@ 0x58
 80061a4:	f000 80b9 	beq.w	800631a <_printf_i+0x19a>
 80061a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061b0:	e03a      	b.n	8006228 <_printf_i+0xa8>
 80061b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061b6:	2b15      	cmp	r3, #21
 80061b8:	d8f6      	bhi.n	80061a8 <_printf_i+0x28>
 80061ba:	a101      	add	r1, pc, #4	@ (adr r1, 80061c0 <_printf_i+0x40>)
 80061bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c0:	08006219 	.word	0x08006219
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	080061a9 	.word	0x080061a9
 80061cc:	080061a9 	.word	0x080061a9
 80061d0:	080061a9 	.word	0x080061a9
 80061d4:	080061a9 	.word	0x080061a9
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	080061a9 	.word	0x080061a9
 80061e0:	080061a9 	.word	0x080061a9
 80061e4:	080061a9 	.word	0x080061a9
 80061e8:	080061a9 	.word	0x080061a9
 80061ec:	0800632d 	.word	0x0800632d
 80061f0:	08006257 	.word	0x08006257
 80061f4:	080062e7 	.word	0x080062e7
 80061f8:	080061a9 	.word	0x080061a9
 80061fc:	080061a9 	.word	0x080061a9
 8006200:	0800634f 	.word	0x0800634f
 8006204:	080061a9 	.word	0x080061a9
 8006208:	08006257 	.word	0x08006257
 800620c:	080061a9 	.word	0x080061a9
 8006210:	080061a9 	.word	0x080061a9
 8006214:	080062ef 	.word	0x080062ef
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6032      	str	r2, [r6, #0]
 8006220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006224:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006228:	2301      	movs	r3, #1
 800622a:	e09d      	b.n	8006368 <_printf_i+0x1e8>
 800622c:	6833      	ldr	r3, [r6, #0]
 800622e:	6820      	ldr	r0, [r4, #0]
 8006230:	1d19      	adds	r1, r3, #4
 8006232:	6031      	str	r1, [r6, #0]
 8006234:	0606      	lsls	r6, r0, #24
 8006236:	d501      	bpl.n	800623c <_printf_i+0xbc>
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	e003      	b.n	8006244 <_printf_i+0xc4>
 800623c:	0645      	lsls	r5, r0, #25
 800623e:	d5fb      	bpl.n	8006238 <_printf_i+0xb8>
 8006240:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006244:	2d00      	cmp	r5, #0
 8006246:	da03      	bge.n	8006250 <_printf_i+0xd0>
 8006248:	232d      	movs	r3, #45	@ 0x2d
 800624a:	426d      	negs	r5, r5
 800624c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006250:	4859      	ldr	r0, [pc, #356]	@ (80063b8 <_printf_i+0x238>)
 8006252:	230a      	movs	r3, #10
 8006254:	e011      	b.n	800627a <_printf_i+0xfa>
 8006256:	6821      	ldr	r1, [r4, #0]
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	0608      	lsls	r0, r1, #24
 800625c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006260:	d402      	bmi.n	8006268 <_printf_i+0xe8>
 8006262:	0649      	lsls	r1, r1, #25
 8006264:	bf48      	it	mi
 8006266:	b2ad      	uxthmi	r5, r5
 8006268:	2f6f      	cmp	r7, #111	@ 0x6f
 800626a:	4853      	ldr	r0, [pc, #332]	@ (80063b8 <_printf_i+0x238>)
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	bf14      	ite	ne
 8006270:	230a      	movne	r3, #10
 8006272:	2308      	moveq	r3, #8
 8006274:	2100      	movs	r1, #0
 8006276:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800627a:	6866      	ldr	r6, [r4, #4]
 800627c:	60a6      	str	r6, [r4, #8]
 800627e:	2e00      	cmp	r6, #0
 8006280:	bfa2      	ittt	ge
 8006282:	6821      	ldrge	r1, [r4, #0]
 8006284:	f021 0104 	bicge.w	r1, r1, #4
 8006288:	6021      	strge	r1, [r4, #0]
 800628a:	b90d      	cbnz	r5, 8006290 <_printf_i+0x110>
 800628c:	2e00      	cmp	r6, #0
 800628e:	d04b      	beq.n	8006328 <_printf_i+0x1a8>
 8006290:	4616      	mov	r6, r2
 8006292:	fbb5 f1f3 	udiv	r1, r5, r3
 8006296:	fb03 5711 	mls	r7, r3, r1, r5
 800629a:	5dc7      	ldrb	r7, [r0, r7]
 800629c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062a0:	462f      	mov	r7, r5
 80062a2:	42bb      	cmp	r3, r7
 80062a4:	460d      	mov	r5, r1
 80062a6:	d9f4      	bls.n	8006292 <_printf_i+0x112>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d10b      	bne.n	80062c4 <_printf_i+0x144>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	07df      	lsls	r7, r3, #31
 80062b0:	d508      	bpl.n	80062c4 <_printf_i+0x144>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	6861      	ldr	r1, [r4, #4]
 80062b6:	4299      	cmp	r1, r3
 80062b8:	bfde      	ittt	le
 80062ba:	2330      	movle	r3, #48	@ 0x30
 80062bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062c4:	1b92      	subs	r2, r2, r6
 80062c6:	6122      	str	r2, [r4, #16]
 80062c8:	f8cd a000 	str.w	sl, [sp]
 80062cc:	464b      	mov	r3, r9
 80062ce:	aa03      	add	r2, sp, #12
 80062d0:	4621      	mov	r1, r4
 80062d2:	4640      	mov	r0, r8
 80062d4:	f7ff fee6 	bl	80060a4 <_printf_common>
 80062d8:	3001      	adds	r0, #1
 80062da:	d14a      	bne.n	8006372 <_printf_i+0x1f2>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	b004      	add	sp, #16
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f043 0320 	orr.w	r3, r3, #32
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	4833      	ldr	r0, [pc, #204]	@ (80063bc <_printf_i+0x23c>)
 80062f0:	2778      	movs	r7, #120	@ 0x78
 80062f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	6831      	ldr	r1, [r6, #0]
 80062fa:	061f      	lsls	r7, r3, #24
 80062fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006300:	d402      	bmi.n	8006308 <_printf_i+0x188>
 8006302:	065f      	lsls	r7, r3, #25
 8006304:	bf48      	it	mi
 8006306:	b2ad      	uxthmi	r5, r5
 8006308:	6031      	str	r1, [r6, #0]
 800630a:	07d9      	lsls	r1, r3, #31
 800630c:	bf44      	itt	mi
 800630e:	f043 0320 	orrmi.w	r3, r3, #32
 8006312:	6023      	strmi	r3, [r4, #0]
 8006314:	b11d      	cbz	r5, 800631e <_printf_i+0x19e>
 8006316:	2310      	movs	r3, #16
 8006318:	e7ac      	b.n	8006274 <_printf_i+0xf4>
 800631a:	4827      	ldr	r0, [pc, #156]	@ (80063b8 <_printf_i+0x238>)
 800631c:	e7e9      	b.n	80062f2 <_printf_i+0x172>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f023 0320 	bic.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	e7f6      	b.n	8006316 <_printf_i+0x196>
 8006328:	4616      	mov	r6, r2
 800632a:	e7bd      	b.n	80062a8 <_printf_i+0x128>
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	6825      	ldr	r5, [r4, #0]
 8006330:	6961      	ldr	r1, [r4, #20]
 8006332:	1d18      	adds	r0, r3, #4
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	062e      	lsls	r6, r5, #24
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	d501      	bpl.n	8006340 <_printf_i+0x1c0>
 800633c:	6019      	str	r1, [r3, #0]
 800633e:	e002      	b.n	8006346 <_printf_i+0x1c6>
 8006340:	0668      	lsls	r0, r5, #25
 8006342:	d5fb      	bpl.n	800633c <_printf_i+0x1bc>
 8006344:	8019      	strh	r1, [r3, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	4616      	mov	r6, r2
 800634c:	e7bc      	b.n	80062c8 <_printf_i+0x148>
 800634e:	6833      	ldr	r3, [r6, #0]
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	6032      	str	r2, [r6, #0]
 8006354:	681e      	ldr	r6, [r3, #0]
 8006356:	6862      	ldr	r2, [r4, #4]
 8006358:	2100      	movs	r1, #0
 800635a:	4630      	mov	r0, r6
 800635c:	f7f9 ff48 	bl	80001f0 <memchr>
 8006360:	b108      	cbz	r0, 8006366 <_printf_i+0x1e6>
 8006362:	1b80      	subs	r0, r0, r6
 8006364:	6060      	str	r0, [r4, #4]
 8006366:	6863      	ldr	r3, [r4, #4]
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	2300      	movs	r3, #0
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006370:	e7aa      	b.n	80062c8 <_printf_i+0x148>
 8006372:	6923      	ldr	r3, [r4, #16]
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	47d0      	blx	sl
 800637c:	3001      	adds	r0, #1
 800637e:	d0ad      	beq.n	80062dc <_printf_i+0x15c>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	079b      	lsls	r3, r3, #30
 8006384:	d413      	bmi.n	80063ae <_printf_i+0x22e>
 8006386:	68e0      	ldr	r0, [r4, #12]
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	4298      	cmp	r0, r3
 800638c:	bfb8      	it	lt
 800638e:	4618      	movlt	r0, r3
 8006390:	e7a6      	b.n	80062e0 <_printf_i+0x160>
 8006392:	2301      	movs	r3, #1
 8006394:	4632      	mov	r2, r6
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	47d0      	blx	sl
 800639c:	3001      	adds	r0, #1
 800639e:	d09d      	beq.n	80062dc <_printf_i+0x15c>
 80063a0:	3501      	adds	r5, #1
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	9903      	ldr	r1, [sp, #12]
 80063a6:	1a5b      	subs	r3, r3, r1
 80063a8:	42ab      	cmp	r3, r5
 80063aa:	dcf2      	bgt.n	8006392 <_printf_i+0x212>
 80063ac:	e7eb      	b.n	8006386 <_printf_i+0x206>
 80063ae:	2500      	movs	r5, #0
 80063b0:	f104 0619 	add.w	r6, r4, #25
 80063b4:	e7f5      	b.n	80063a2 <_printf_i+0x222>
 80063b6:	bf00      	nop
 80063b8:	080065cd 	.word	0x080065cd
 80063bc:	080065de 	.word	0x080065de

080063c0 <memmove>:
 80063c0:	4288      	cmp	r0, r1
 80063c2:	b510      	push	{r4, lr}
 80063c4:	eb01 0402 	add.w	r4, r1, r2
 80063c8:	d902      	bls.n	80063d0 <memmove+0x10>
 80063ca:	4284      	cmp	r4, r0
 80063cc:	4623      	mov	r3, r4
 80063ce:	d807      	bhi.n	80063e0 <memmove+0x20>
 80063d0:	1e43      	subs	r3, r0, #1
 80063d2:	42a1      	cmp	r1, r4
 80063d4:	d008      	beq.n	80063e8 <memmove+0x28>
 80063d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063de:	e7f8      	b.n	80063d2 <memmove+0x12>
 80063e0:	4402      	add	r2, r0
 80063e2:	4601      	mov	r1, r0
 80063e4:	428a      	cmp	r2, r1
 80063e6:	d100      	bne.n	80063ea <memmove+0x2a>
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063f2:	e7f7      	b.n	80063e4 <memmove+0x24>

080063f4 <_sbrk_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d06      	ldr	r5, [pc, #24]	@ (8006410 <_sbrk_r+0x1c>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f7fb fe2a 	bl	8002058 <_sbrk>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_sbrk_r+0x1a>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_sbrk_r+0x1a>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20000508 	.word	0x20000508

08006414 <_realloc_r>:
 8006414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4680      	mov	r8, r0
 800641a:	4615      	mov	r5, r2
 800641c:	460c      	mov	r4, r1
 800641e:	b921      	cbnz	r1, 800642a <_realloc_r+0x16>
 8006420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	4611      	mov	r1, r2
 8006426:	f7ff bc59 	b.w	8005cdc <_malloc_r>
 800642a:	b92a      	cbnz	r2, 8006438 <_realloc_r+0x24>
 800642c:	f7ff fbea 	bl	8005c04 <_free_r>
 8006430:	2400      	movs	r4, #0
 8006432:	4620      	mov	r0, r4
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006438:	f000 f81a 	bl	8006470 <_malloc_usable_size_r>
 800643c:	4285      	cmp	r5, r0
 800643e:	4606      	mov	r6, r0
 8006440:	d802      	bhi.n	8006448 <_realloc_r+0x34>
 8006442:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006446:	d8f4      	bhi.n	8006432 <_realloc_r+0x1e>
 8006448:	4629      	mov	r1, r5
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff fc46 	bl	8005cdc <_malloc_r>
 8006450:	4607      	mov	r7, r0
 8006452:	2800      	cmp	r0, #0
 8006454:	d0ec      	beq.n	8006430 <_realloc_r+0x1c>
 8006456:	42b5      	cmp	r5, r6
 8006458:	462a      	mov	r2, r5
 800645a:	4621      	mov	r1, r4
 800645c:	bf28      	it	cs
 800645e:	4632      	movcs	r2, r6
 8006460:	f7ff fbc2 	bl	8005be8 <memcpy>
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff fbcc 	bl	8005c04 <_free_r>
 800646c:	463c      	mov	r4, r7
 800646e:	e7e0      	b.n	8006432 <_realloc_r+0x1e>

08006470 <_malloc_usable_size_r>:
 8006470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006474:	1f18      	subs	r0, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	bfbc      	itt	lt
 800647a:	580b      	ldrlt	r3, [r1, r0]
 800647c:	18c0      	addlt	r0, r0, r3
 800647e:	4770      	bx	lr

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
